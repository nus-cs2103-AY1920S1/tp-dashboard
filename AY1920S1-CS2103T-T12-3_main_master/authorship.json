[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T12-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-T12-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://ci.appveyor.com/project/hellodommy/main[image:https://ci.appveyor.com/api/projects/status/lsaggubb3k8wrx19?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T12-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T12-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[MIT License]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* This is a desktop team management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* It is a Java application intended for coaches and captains in charge of performance sports teams."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* This application was built based on Address Book (Level 3), an initiative of the https://se-education.org[SE-EDU] team."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    archiveName \u003d \u0027Athletick.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u0027site-name\u0027: \u0027Athletick\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T12-3/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Dominique Ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::hellodommy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty} [https://github.com/hellodommy[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty} [https://ay1920s1-cs2103t-t12-3.github.io/main/team/hellodommy.html[portfolio]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: Scheduling and tracking, Deliverables and deadlines, *Model Component*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Erwin Chan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::changuo79.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/ChangUo79[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "{empty} [https://ay1920s1-cs2103t-t12-3.github.io/main/team/ChangUo79.html[portfolio]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Test Engineer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: *Commons Component*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Lim Jun Hup"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::junhuplim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/junhuplim[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Back-end Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: *Logic Component*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Poon Jeun Hoe"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::jeunhoe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/jeunhoe[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Quality Assurance Engineer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Responsibilities: Code quality, Documentation, *Storage Component*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Shawn Lee"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::shawnlsj97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "{empty}[https://shawnlsj.github.io/[personal website]] [https://github.com/shawnlsj97[github]] [\u003c\u003cshawnlsj97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Role: Integration Developer, UI/UX Designer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Responsibilities: Git expert, *Ui Component*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "ChangUo79": 2,
      "hellodommy": 21,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T12-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* *Email us* : You can also reach us at `dominique@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d Athletick - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "By: `AY1920S1-CS2103T-T12-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section specifies the purpose of this document and design goals of Athletick."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This document describes the software architecture and system design of Athletick, a team management desktop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "application for coaches and team captains of timing-based performance sports. It also includes some of the design"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "considerations for the implementation of Athletick\u0027s features."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The intended audience of this document includes the developers and software testers of Athletick."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::symbol[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "NOTE:  This symbol indicates important information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`command`:: A grey highlight (called a mark-up) indicates that this is a command that can be typed into the command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "line and executed by the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`[green]#component#`:: Green text with grey highlight indicates a component, class, object or method in the architecture of the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::symbol[]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Design goals"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick was developed as part of https://nusmods.com/modules/CS2103T/software-engineering[CS2103T], a software engineering module taken in the National University of Singapore. We were tasked to morph a generic https://se-education.org/addressbook-level3/[address book application] that manages contacts into an application that manages something else. At the end of the project, it should be ready to be continued by future developers."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "As part of the project constraints, the input to Athletick needs to be primarily Command-Line Interface (CLI)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Non-CLI inputs will reduce the suitability of the product to our target users. Taking this into consideration,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "the following principles guide the design of Athletick:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". **Detailed Command Syntax Instructions**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "In order to make Athletick more user-friendly, we have provided detailed command syntax instructions whenever users enter an erroneous command, allowing them to correct their errors on the fly. This helps users to maintain their workflow without having to switch back and forth between the application and the user guide, enabling them to complete their tasks more efficiently."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". **Optimised Performance**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Athletick should be able to hold up to 1000 athletes, attendance and performance records without a noticeable"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "sluggishness in performance for typical usage. To achieve this, we have used optimal data structures for storing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "and retrieval of data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". **Designer Friendly**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "As Athletick is intended for future student developers like us to make modifications and extensions to its behaviour,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "adhering to the high-level design architecture strictly was a necessity. This translates to extensive use of"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "abstractions for code clarity. Additionally, we provided Javadoc comments for our classes and methods for developers to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "understand how they work."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d System design"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This section introduces the high-level design of Athletick and gives you a basic understanding of how each component"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "operates and interacts with one another."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::ArchitectureDiagram.png[width\u003d400]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of Athletick. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#Main#` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`[green]#Main#`] and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/MainApp.java[`[green]#MainApp#`]. It is responsible for,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c\u003cDesign-Commons,*`[green]#Commons#`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* `[green]#LogsCenter#` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* \u003c\u003cDesign-Ui,*`[green]#UI#`*\u003e\u003e: Displays the UI of Athletick."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* \u003c\u003cDesign-Logic,*`[green]#Logic#`*\u003e\u003e: Executes commands from the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* \u003c\u003cDesign-Model,*`[green]#Model#`*\u003e\u003e: Holds the data of Athletick in-memory."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* \u003c\u003cDesign-Storage,*`[green]#Storage#`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Defines its _API_ in an interface with the same name as the Component."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Exposes its functionality using a `[green]#{Component Name}Manager#` class."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "For example, the `[green]#Logic#` component (refer to the class diagram given below) defines it\u0027s API in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#Logic.java#` interface and exposes its functionality using the `[green]#LogicManager.java#` class."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::LogicComponent.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Component Interactions for `delete 1` Command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::ArchitectureSequenceDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`[green]#Ui.java#`]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The UI consists of a `[green]#MainWindow#` that is made up of parts e.g.`[green]#CommandBox#`,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#ResultDisplay#`, `[green]#PersonListPanel#`, `[green]#StatusBarFooter#` etc. All these, including the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#MainWindow#`, inherit from the abstract"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#UiPart#` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The `[green]#UI#` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "files that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "are in the `src/main/resources/view` folder. For example, the layout of the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`[green]#MainWindow#`] is specified in"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "link:{repoURL}/src/main/resources/view/MainWindow.fxml[`[green]#MainWindow.fxml#`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The `[green]#UI#` component,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Executes user commands using the `[green]#Logic#` component."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Listens for changes to `[green]#Model#` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::LogicComponent.png[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`[green]#Logic.java#`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  `[green]#Logic#` uses the `[green]#AthletickParser#` class to parse the user command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  This results in a `[green]#Command#` object which is executed by the `[green]#LogicManager#`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  The command execution can affect the `[green]#Model#` (e.g. adding a person)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  The result of the command execution is encapsulated as a `[green]#CommandResult#` object which is passed back to the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#Ui#`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  In addition, the `[green]#CommandResult#` object can also instruct the `[green]#Ui#` to perform certain actions, such"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "as displaying help to the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `[green]#Logic#` component for the `[green]#execute"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "(\"delete 1\")#` API call."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "NOTE: The lifeline for `[green]#DeleteCommandParser#` should end at the destroy marker (X) but due to a limitation of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::ModelComponent.png[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`[green]#Model.java#`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The `[green]#Model#`,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* stores a `[green]#UserPref#` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* exposes an unmodifiable `[green]#*ObservableList\u003cPerson\u003e*#` that can be \u0027observed\u0027 e.g. the UI can be bound to this"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "As a more OOP model, we can store a Tag list in `[green]#Athletick#`, which `[green]#Person#` can reference. This would"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "allow `[green]#Athletick#` to only require one `[green]#Tag#` object per unique `[green]#Tag#`, instead of each"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#Person#` needing their own `[green]#Tag#`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::storage_classdiagram.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`[green]#Storage.java#`]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The `[green]#Storage#` component saves the following data in json format and reads it back as objects when"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a new session of Athletick is started."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* `[green]#UserPref#` data"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* `[green]#Athletick#` data (athlete list)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* `[green]#Performance#` data (`[green]#Event#` and `[green]#Record#`)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* `[green]#TrainingManager#` data (`[green]#Training#`)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#Performance#` and `[green]#TrainingManager#` rely on `[green]#JsonAdaptedPerson#` as well, since a"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "performance and training record also stores the athlete it is referring to."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Classes used by multiple components are in the `[green]#seedu.addressbook.commons#` package."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented. We have included our design considerations for you to understand our decision making processes."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::entire_training[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_structure[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d Training feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Athletick* allows users to record training information like the date of training and an athlete\u0027s attendance. This"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "is done using a `training` command. With this information recorded, *Athletick* allows users to get the team\u0027s"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "overall attendance rate, and get an overview of all training sessions in a month."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "A `[green]#Training#` class stores the training information. To facilitate management of trainings, a"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#TrainingManager#` class stores all the `[green]#Training#` sessions. The class diagram below shows the"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "interaction of different components to produce the training feature."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ".Class diagram of the training feature components"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::training_class_diagram.png[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "A training session is represented by a `[green]#Training#` class and it contains information like the date of"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "training and training attendance. The `[green]#AthletickDate#` class represents the date of a training session in"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#Training#`. This class is shared across both the frontend and backend of the application, allowing training"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "information to be used in other features that use `[green]#AthletickDate#`. A `[green]#HashMap\u003cPerson, Boolean\u003e#` represents attendance in"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#Training#` and indicates whether a `[green]#Person#` has attended that training session. If a"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#Person#` attended, the value associated with him in the `[green]#HashMap\u003cPerson, Boolean\u003e#` will be true,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "and false if he did not attend."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "The `[green]#TrainingCommand#` is an abstract class that extends the `[green]#Command#` class and allows users to"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "record training sessions. Users have the ability to add training sessions by indicating members present or members"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "absent using the `training` or `training -a` commands. The `[green]#TrainingCommandPresent#` and"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#TrainingCommandAbsent#` are classes that extend `[green]#TrainingCommand#` which allows for this"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "polymorphism. They are created by the `[green]#TrainingCommandParser#` class."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "A `[green]#TrainingManager#` stores and manages all `[green]#Training#` sessions in *Athletick*. It contains a"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "list which is used to maintain information of multiple trainings. A `[green]#Training#` is added to this list"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "whenever a user executes a `training` command. The activity diagram below shows how training information is"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "stored after a user executes the `training` command."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ".Activity diagram showing execution of `training` command"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::training_command_activity_diagram.png[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#TrainingManager#` also provides functions for users to calculate the attendance rate of one individual, or"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "the entire team. The following operations are used for this feature:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* `[green]#TrainingManager#getPersonAttendanceRateString#` -- Returns the person\u0027s overall attendance rate in String"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "format."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* `[green]#TrainingManager#getAttendanceRateOfAll#` - Returns a list of everyone\u0027s attendance rate."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "These operations are used by the `select`, `attendance` and `view attendance` commands. The following sequence diagram"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "shows how the `TrainingManager` provides other components with attendance rates."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ".Sequence diagram showing how `view attendance` command gets attendance rate"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::view_attendance_sequence_diagram.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_structure[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`[green]#TrainingManager#` also allows users to get the attendance of one particular training using the following"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "operation:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* `[green]#TrainingManager#getTrainingAttendanceListOnDate#` -- Returns training attendance on the specified date."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "The sequence diagram below shows a use case of how training attendance is obtained from `[green]#TrainingManager#`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "when a `calendar` command is executed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ".Sequence diagram showing how `calendar` command gets training attendance"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::calendar_sequence_diagram.png[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_design[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This section contains some of our considerations for the training feature."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store attendance information of an individual."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "||*Alternative 1:* Make extensions to the `[green]#AddressBook#` by storing and tagging each `[green]#Person#` with"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "number of trainings attended and total number of trainings."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Alternative 2 (Current Choice):* Create separate classes to manage training information."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Pros*"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|It is easy to implement."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Allows storing of specific training information without depending on the `[green]#AddressBook#`. This also allows new"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "features to be easily introduced to training in the future."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Cons*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Violates software engineering principles (single responsibility principle) and is not useful when we want more"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "detailed information (attendance on specific date) about a training session."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|More time needed to design system architecture."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Reason for choosing alternative 2: `[green]#Training#` and `[green]#TrainingManager#` are created as standalone"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "classes to contain training information. We intend to introduce new features (e.g. training category) in the future and this"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "implementation allows us to easily do so."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which data structure to store training attendance."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "||*Alternative 1:* Use a linked list to store training attendance."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Alternative 2 (Current Choice):* Use a hash table to store training attendance."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Pros*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Most intuitive way to maintain training attendance. Also provides us with functions to easily access and edit data."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Makes obtaining information much quicker."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Cons*"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Accessing attendance and attendance rate of one person takes more time."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Requires more effort to maintain and requires coding of new functions to edit data."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Reason for choosing alternative 2: The `select` and `attendance` commands require the attendance rate of only one"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "person and a hash table provides us with the fastest access time to access attendance information of one person."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to edit training information."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "||*Alternative 1 (Current Choice)*: Edit by replacing an existing training with a new training on the same date."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Alternative 2:* Create a command to support editing of training."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Pros*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Users will not need to type lengthy edit commands."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|More intuitive to a user who wants to edit."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|*Cons*"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Unable to support multiple trainings on same date."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|Users have the option to edit date, attendance and even add a person which will require lengthy commands."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Reason for choosing alternative 1: Editing training information would require typing long commands which will be very"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "time-consuming and this defeats the purpose of having a command line interface. Editing training by replacing an old"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "one with the `training` command makes it editing much quicker."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_design[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::entire_training[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_intro[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Performance feature"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Athletick allows users to record athlete\u0027s performance details from timed trials."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "With this information recorded, Athletick allows users to get an overview of the team\u0027s capability and"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "progress in specific events."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This section explains how `[green]#Performance#` is implemented in Athletick."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_intro[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "It is split into 4 sections."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ". Overview"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ". Adding and deleting of  `[green]#Event#`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ". Adding and deleting of  `[green]#Record#`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ". Viewing of  `[green]#Event#` and  `[green]#Record#`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_overview[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#ModelManager#` has a `[green]#Performance#`, which has a `[green]#UniqueEventList#`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Every `[green]#Event#` in Athletick is stored in this `[green]#UniqueEventList#`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The class diagram below shows how the different components mentioned interact with one another."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Class diagram for showing how Performance is implemented with Model and Logic."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::performance_classdiagram.png[width\u003d400]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "As the name suggests, all `[green]#Event#` names are unique in `[green]#UniqueEventList#`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This is ensured by `[green]#UniqueEventList#contains()#` that checks whether there is an `[green]#Event#`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "with the same name before the `[green]#Event#` is added."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Every event has its own https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html[HashMap]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "where performances under this event are stored."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The _key_ of the HashMap is the `[green]#Person#` that the performance records will be under, while the _value_"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "of the HashMap is a list of `[green]#Record#` s under the `[green]#Person#`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This structure allows each `[green]#Person#` to have multiple `[green]#Record#` s stored in Athletick so"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "their progress over time can be analysed using the `[green]#AthletickDate#` and `[green]#Timing#`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "attributes in `[green]#Record#`. Additionally, athlete\u0027s records can be easily retrieved by calling the"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#HashMap#get()#` method."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#Event#` s are added using the `[green]#EventCommand#`, and `[green]#Record#` s are added using the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " `[green]#PerformanceCommand#`. In these commands, changes to `[green]#UniqueEventList#` are called through"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "  `[green]#Model#` in `[green]#EventCommand#execute()#` and `[green]#PerformanceCommand#execute()#` since"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "  `[green]#Model#` carries a common copy of all the data stored in Athletick."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The _Observer Pattern_ is adopted when displaying `[green]#Performance#` data through the `[green]#UI#`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#Model#` exposes an unmodifiable `[green]#ObservableList\u003cEvent\u003e#` through"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#Model#getPerformance#` that returns a `[green]#ReadOnlyPerformance#`. It can be \u0027observed\u0027"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "and is updated accordingly when data in `[green]#Performance#` changes."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_overview[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Function 1: Adding and Deleting of Event"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_event[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The following sequence diagram illustrates what happens in `[green]#Logic#` and `[green]#Model#` when in an"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "example scenario when `event freestyle 50m` is given as a user input (ie. when the user adds the `freestyle"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "50m` event)."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Sequence diagram showing the operations in Logic and Model when an event is added."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addevent_sequencediagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Deleting an event (with `[green]#DeleteEventCommand#`) does the opposite. The input `delete -e freestyle"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "50m` will call `[green]#Model#deleteEvent()#`, after making sure the event exists in Athletick by getting a"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "boolean from `[green]#Model#hasEvent()#`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_event[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Function 2: Adding and Deleting of Record"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_record[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Operations for `[green]#Record#` - adding and deleting - work similarly to that of `[green]#Event#` as well,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "except there are more methods involved as there is a greater degree of nesting."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The workflow for adding a record can be illustrated by the Activity Diagram below."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Activity diagram showing how a Record is added to an Event."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addrecord_activitydiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_record[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Function 3: Viewing of Event and Record"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_view[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Users can also view all `[green]#Record#` s under an `[green]#Event#` using `view records e/EVENT_NAME`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The following sequence diagrams illustrate how the `[green]#Logic#`, `[green]#Ui#` and"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#Model#` work together when `[green]#Record#` viewing is executed."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Sequence diagram showing how Records are viewed. Interactions in the RecordsPanel are omitted and shown in a separate sequence diagram below."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::viewrecords_sequencediagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Reference frame for interactions in the RecordsPanel in the previous sequence diagram."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::recordspanel_sequencediagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_view[]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_designconsiderations[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This section explains the factors that we took into consideration when making decision on how different"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "aspects in `[green]#Performance#` should be implemented."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Method of storing performance records for athletes."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Performance records are currently stored in a list for each athlete. Each list is saved as a value for the"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "athlete key in a Performance HashMap."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|| *Alternative 1 (Current Choice): Use a HashMap of Persons as keys and a list of Records as values.*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "| *Alternative 2: Create a class that has Persons and list of Records as attributes and store instances of"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "this class in a list.*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Retrieving athlete\u0027s individual records is fast - it can be done in O(1) time"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Checking of records can be done with a simple for-loop"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Checking requires using an iterator or a lambda operation (requires variables to be declared as final,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "making retrieval of data troublesome)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Retrieving by values (eg. date of record) is difficult as it requires traversing through the HashMap and"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "checking the individual records\u0027 dates"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Adding of records is susceptible to errors as duplicate persons can be added"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Creating our own data structure results in overheads in testing and creating our own helper methods"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Retrieving an athlete\u0027s individual records in O(1) time requires the athlete\u0027s index in the list, which"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "is not always known"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "**Reason for choice of Alternative 1:**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Retrieving from a HashMap is fast, which fulfils one of our non-functional requirements of being able to support a database of 1000 athletes"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Using a athlete-records relationship is similar to the key-value relationship in HashMap so the existing"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "methods that are in the HashMap API are relevant"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Method of displaying events and records to users."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Viewing events and records are separate commands in Athletick."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "To view events, the command is `view performance`. Users will be shown a list of all the events they have"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "in Athletick."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "To view records under a certain event, the command is `view records EVENT_NAME`. Users will be shown a"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "graph on each athlete\u0027s records under this event."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|| *Alternative 1 (Current Choice): Display events and records separately.*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "| *Alternative 2: Display all records under all events.*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Viewing events, followed by \"zooming\" in to a particular event\u0027s records gives users a more immersive"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "experience"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Navigating is simple as viewing events and its records requires only one command"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Getting an overview of all events and its respective records is not possible"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Supporting 2 commands results in overhead in parsing the command and creating the relevant Ui in the"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "feature box"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Displaying of information will require a lot of scrolling (since the feature box is limited in size) and"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "can be difficult when the event of interest is located at the end"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "**Reason for choice of Alternative 1:**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Allowing users to look at the records under their event of interest gives them more control over what they want to see"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Navigating from event overview to a particular event mimics how people navigate in apps - tapping on a"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "chat title (in this case, viewing records for a particular event), to see the whole conversation (record"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "details for a particular event)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_designconsiderations[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Calendar feature"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "To allow users to retrieve training and performance records using the date they were recorded on, Athletick has a calendar feature which provides 2 main functions:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". Displays an overview of training and performance records in a selected month"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". Displays training and performance records entered on a specific date"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The implementation of the above functions will be described separately in this section."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Function 1: Displays an overview of training and performance records in a selected month"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "There are 2 commands that users can issue to perform function 1:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". `view calendar`: Displays calendar for the current month."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". `calendar MMYYYY`: Displays calendar for the month specified by the user."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following sequence diagram shows you how the `calendar MMYYYY` (e.g. `calendar 012019` where `012019` corresponds to January 2019) command works."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Interactions inside the `[green]#UI#` and `[green]#Logic#` components for the `calendar 012019` Command"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::CalendarCommandSequenceDiagram1.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Upon completion of the above execution, the calendar for January 2019 will be displayed to the user."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `view calendar` command is similar except that `[green]#displayCalendar(CommandResult)#` is called instead of `[green]#displayCalendarWithDate(CommandResult)#` and the `[green]#CalendarPanel#` class is instantiated _without_ an `[green]#AthletickDate#` specified by the user. The calendar displayed to the user will reflect the current month and year since date is not specified by the user."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following activity diagram summarises what happens when a user wants to perform function 1."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Activity diagram showing what happens when a user wants to  perform function 1"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::Function1ActivityDiagram.png[width\u003d200]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Function 1 is facilitated by the `[green]#CalendarPanel#` class. It extends `[green]#UiPart\u003cRegion\u003e#` and represents the calendar using a `[green]#GridPane#` with dimensions of 7 by 6 (42 cells). Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarPanel#retrieveCurrentDate()#` -- Retrieves the details of today\u0027s date to be used as the title of the calendar feature and for rendering the displayed month on the calendar when the user does not provide a specific month to view."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarPanel#retrieveProvidedDate(AthletickDate)#` -- Retrieves the details of the date provided by the user for rendering the displayed month on the calendar."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarPanel#initialiseSelectedDate()#` -- Fills up all the 42 cells of the `[green]#GridPane#` with their respective days based on the selected month by the user. Days of the previous and next month used to fill up the remaining cells are marked in a lighter colour."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "In addition, days with training or performance records will be marked with a small green or purple dot indicator respectively."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "These operations are performed when an instance of the `[green]#CalendarPanel#` class is created in the `[green]#MainWindow#` class. An instance of `[green]#CalendarPanel#` is created when the `[green]#CommandResult#` obtained in `[green]#MainWindow#` after the execution of the user\u0027s command contains a `[green]#Feature#` corresponding to a calendar and an _optional_ `[green]#AthletickDate#`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The sequence diagram below shows you what happens when the `[green]#CalendarPanel#` class is instantiated."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Interactions inside the `[green]#UI#` and `[green]#Model#` components when `[green]#CalendarPanel#` is instantiated"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::CalendarConstructorSequenceDiagram.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "With reference to the above diagram, if `[green]#hasTrainingOn(AthletickDate)#` returns true, a green dot indicator will be added to the cell of the `[green]#GridPane#`. Similarly, if `[green]#hasPerformanceOn(AthletickDate)#` returns true, a purple dot indicator will be added."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Upon completion of the above execution, all 42 cells `[green]#GridPane#` will be filled with a number corresponding to the day of the month. Days with training or performance records will be marked with a green or purple dot indicator respectively. The following diagram depicts how each individual cell will look like."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::CellResult.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Function 2: Displays training and performance records entered on a specific date"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "In order to perform function 2, the user issues the `calendar DDMMYYYY` command (e.g. `calendar 01012019` where `01012019` corresponds to 1st January 2019)."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following sequence diagram shows you how the `calendar DDMMYYYY` (e.g. `calendar 01012019`) operation works."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Interactions inside the `[green]#UI#` and `[green]#Logic#` components for the `calendar 01012019` command"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::CalendarCommandSequenceDiagram2.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Upon completion of the above execution, the attendance and performance records for 1st January 2019 will be displayed to the user."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following activity diagram summarises what happens when a user issues the `calendar DDMMYYYY` command."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Activity diagram showing what happens when a user issues the `calendar DDMMYYYY` command"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::Function2ActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Function 2 is facilitated by `[green]#CalendarDetailPanel#`. It extends `[green]#UiPart\u003cRegion\u003e#` and displays the attendance and performance records for a date specified by the user. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarDetailPanel#displayAttendanceChart()#` -- Calculates and displays a pie chart showing overall team attendance percentage for the specified date."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarDetailPanel#displayAttendanceTable()#` -- Retrieves and displays a table with the athletes\u0027 names in the first column and their attendance (marked with a tick or cross) in the second column."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarDetailPanel#displayPerformanceStats()#` -- Displays the total number of performance records recorded on the specified date."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `[green]#CalendarDetailPanel#displayPerformanceTable()#` -- Retrieves and displays the performance records recorded on the specified date. Records are grouped according to the event they belong to."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "These operations are performed when an instance of `[green]#CalendarDetailPanel#` is created in the `[green]#MainWindow#` class. An instance of `CalendarDetailPanel` is created when the `[green]#CommandResult#` obtained after executing the user\u0027s command contains a `[green]#Feature#` corresponding to a calendar and an `[green]#AthletickDate#`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The sequence diagram below shows you what happens when the `[green]#CalendarDetailPanel#` class is instantiated."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Interactions inside the `[green]#UI#` and `[green]#Model#` components when `[green]#CalendarPanel#` is instantiated"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::CalendarDetailConstructor.png[]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Upon completion of the above execution, training and performance records recorded on the specified date will be displayed to the user."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section contains some of our design considerations for the calendar feature."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Whether to display information using a monthly calendar or a list only containing dates in a month with training or performance records"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 1 (Current Choice)**: Use a monthly calendar"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 2**: Use a monthly list"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Displays information more clearly especially when users have a large number of training and performance records in a month"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Allows for future expansion of calendar feature with more date-related functionalities (e.g. planning of training programme in advance)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Displays information more concisely if users have a small amount of training and performance records in a month"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Increases difficulty of implementation"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Displays information in rows and columns which is no better than using Excel"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Reasons for choice of alternative 1:**"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 displays information more clearly when users have a large amount of training and performance information, which is a probable scenario in the case of sports teams. In contrast, alternative 2 uses a list similar to Excel which we are trying to improve upon."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 abides by our design principle to keep **Athletick** designer friendly since future developers can expand upon it and implement more date-related functionalities."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to display calendar for a month"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 1 (Current Choice)**: Display using a fixed 7 by 6 `[green]#GridPane#`, fill up left over days with days from previous and next month"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 2**: Display using a variable sized `[green]#GridPane#` that is populated with days from selected month only"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Makes implementation easier"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Emulates implementation by other calendar applications (e.g. Google Calendar)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Maximises usage of space in the application window"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Displays information of previous and next month which users may not be interested in"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Increases difficulty of implementation"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Reasons for choice of alternative 1:**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 is easier to implement since the dimensions of the calendar are fixed so we do not have to recalculate it constantly. The ease of implementation is important given the tight deadlines we have to contend with in our software engineering module."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 emulates the implementation of other successful calendar applications (e.g. Google Calendar) so we do not have to reinvent the wheel."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the user can display the attendance and performance data on a specific date"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 1 (Current Choice)**: Use one `calendar DDMMYYYY` command to view _both_ attendance and performance records on the specified date"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 2**: Use two separate commands to view attendance and performance records _separately_ on the specified date"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Makes access of data more efficient"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Allows users to have more control over what data is displayed"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Displays both attendance and performance records on the specified date all the time"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Requires more flags to be added to the command syntax which makes it more complex"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Reasons for choice of alternative 1:**"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 is more user-friendly as it reduces the number of commands users have to remember in order to access the information they want to see. In addition, attendance and performance records are displayed into separate sections in the window so the information will not be cluttered."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//tag::select[]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d Select feature"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The `select` feature allows user to view the profile of a selected athlete."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The implementation of the `select` feature consists of two parts, mainly the implementation of the command and the"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "implementation of the UI."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The implementation of the command is facilitated by `[green]#SelectCommand#` class. It extends"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#Command#` and parses the arguments using `[green]#SelectCommandParser#`. It implements one operation:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* `[green]#CommandResult#execute()#` -- Executes the selectCommand which returns the athlete selected to be displayed in"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "the"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "UI."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The implementation of the UI portion for the `select` feature  is facilitated by `[green]#InformationDisplay#`. It"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "extends"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#UiPart\u003cRegion\u003e#` and displays the personal information of the selected athlete. Additionally, it implements the"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "following operations:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* `[green]#InformationDisplay#displayPersonalInfo()#` -- Displays the personal information of the selected athlete"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "such as the name, email, address, phone number and other personal details."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* `[green]#InformationDisplay#performanceDisplay()#` -- Displays the performance of the selected athlete, which includes"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "the event, best performance and most recent performance."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "An example usage scenario is given below which elaborates how the `select` feature behaves at each step."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Step 1. The user executes the `select 3` command. The command is then parsed by `[green]#SelectCommandParser#` which"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "creates"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "an instance of `[green]#SelectCommand#`. `[green]#SelectCommand#` retrieves the athlete based on the index of the list"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "panel on the left."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "When the command is executed, the athlete selected at the specified index will be stored in `[green]#ModelManager#` as"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#selectedPerson#` using the operation `[green]#Model#storePerson(Person)#`."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Step 2. After the command has been executed, the selected athlete is retrieved in the MainWindow class. It checks"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "whether an athlete has been selected and displays the selected athlete\u0027s personal information."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The diagram below summarises the steps of the example scenario when a user executes the `select` command:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".Activity diagram of `select` command execution"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::SelectActivityDiagram.png[width\u003d330]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The implementation was done this way because the Ui component interacts with both the Logic and Model component."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Firstly, the Ui component takes in the input from the user and allows `[green]#SelectCommandParser#` in Logic component"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "to parse the argument."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "After the argument has been parsed, the athlete is stored in the Model component which houses most of the data in the"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "app. The Ui listens for any changes made to the Model data, and updates the Ui to display the selected athlete."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The following sequence diagram shows how the `select` feature works:"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".Sequence Diagram of `select` Command"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::SelectCommandSequenceDiagram.png[width\u003d600]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "There were some decisions that I had to make as I was designing the `select` feature and had to compare which methods"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "would better suit the application. The following consists of the design considerations for the `select` feature."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the personal information of the selected athlete will be displayed"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "There were a few ways how the personal information of the selected athlete could be displayed and the following"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "alternatives are some of the considerations I had when implementing."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5, 5\"]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a| *Alternative 1 (current choice)*: Displaying it in a feature box."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a| *Alternative 2*: Displaying it in a tab form."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a| *Alternative 3*: Displaying via a pop-up."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|*Pros*"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Minimises the use of mouse and is in line with the other features that is utilizing the feature box."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Looks more organised compared to the other alternatives."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Looks neater and organised."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|*Cons*"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Aesthetic is not as good compared to the other alternatives."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Not as intuitive to use as mouse has to be used to switch around tabs."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Increase the use of mouse to close the window and may be distracting to user."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Reason: Alternative 1 was chosen because it utilises more of the command line interface and we wanted to steer away"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "from the use of the mouse. Even those the aesthetic might not be as good as alternative 2 and 3, I felt that it was a"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "better choice as it was in line with the other features that my group mates were going to implement."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to select an athlete"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "There were two ways on how an athlete could be selected and it was between choosing by index or by name which I had"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "to consider."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a| Alternative 1 (current choice): Choosing by the index number."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a| Alternative 2: Choosing by name."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|*Pros*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Pros: Intuitive to use and can be used with other commands such as `[green]#FindCommand#` and"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#FilterCommand#` to narrow down the list of people."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Pros: Can omit the filtering step and select the athlete directly."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|*Cons*"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Cons: Additional step of filtering the list to make it shorter before selecting an athlete."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|** Cons: There may be 2 people with the same name and thus result in an error."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Reason: In the end, I went with alternative 1 because it was more intuitive to use and was in line with some of the"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "other functions such as `[green]#DeleteCommand#` or `[green]#FindCommand#` which also uses index. It also reduces the"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "need to type out the full name of the selected athlete."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//end::select[]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//tag::undoredo[]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Undo / Redo feature"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The `undo` command enables users to undo their previous commands while the `redo` command enables users to redo their"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "undone commands."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d\u003d\u003d Undo Implementation"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The `undo` command is facilitated by the `[green]#HistoryManager#`. `[green]#HistoryManager#` holds the"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "states of `[green]#Athletick#`, `[green]#Attendance#` and `[green]#Performance#`, which are kept in"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "their respective stacks governed by `[green]#HistoryManager#`. Furthermore, `[green]#HistoryManager#` also"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "holds the `[green]#Command#` stack that keeps track of the commands executed by the user."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Each time after the user executes a command, the command will be pushed to the"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#Command#` stack. Also, following the execution of the command,"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "changes to either `[green]#Athletick#`,`[green]#Attendance#` or `[green]#Performance#`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "will result in the new state being pushed into their respective stacks."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Given below is an example usage scenario on how the undo mechanism behaves at each step."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Step 1. The user launches the application for the first time. The `[green]#HistoryManager#` will be"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "initialised with the initial `[green]#Athletick#`, `[green]#Attendance#` and"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#Performance#` state pushed to the respective stacks."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ".Initial stacks of states"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::initialStack.png[width\u003d450]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Step 2. The user executes the `delete -p 3` command to delete the 3rd person in the `[green]#Athletick#` list. The"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "delete command will be pushed into the `[green]#Command#` stack. After that,"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "since the `delete -p 3` command only alters the `[green]#Athletick#` state, the new `[green]#Athletick#`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "state will then be pushed to the `[green]#Athletick#` stack while the `[green]#Attendance#` and"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#Performance#` stacks are left untouched as their states remain the same."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ".Stacks of states after `delete -p 3` command"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::afterUndoStack.png[width\u003d450]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Step 3. The user now decides that deleting the 3rd person in the list was a mistake, and decides to undo the action"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "by executing the `undo` command. The `undo` command then executes the `undo` method in the"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#ModelManager#`. This pops the latest command from the `[green]#Command#`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "stack and the latest `[green]#Athletick#` state from the `[green]#Athletick#` stack."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "It then peeks at the `[green]#Athletick#` stack to retrieve the `[green]#Athletick#` state"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "before `delete -p 3` command was executed."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ".Stacks of states after `undo` command"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::initialStack.png[width\u003d450]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Step 4. After retrieving the `[green]#Athletick#` state before `delete -p 3` command"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "was executed, we then resets the `[green]#Athletick#` state to this retrieved"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#Athletick#` state. As such, the previous command will then be undone."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ".Sequence diagram for undo implementation"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::undoSQ.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d\u003d\u003d Redo Implementation"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The `redo` command is similarly facilitated by the `[green]#HistoryManager#`. `[green]#HistoryManager#`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "also holds the undone states of `[green]#Athletick#`, `[green]#Attendance#` and `[green]#Performance#`,"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "which are kept in their respective undone stacks governed by `[green]#HistoryManager#`. Furthermore,"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#HistoryManager#` also holds the undone `[green]#Command#` stack that keeps track of the commands"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "undone by the user."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Each time an `undo` command is executed succesfully, the undone `[green]#Command#` will be pushed"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "to the undone `[green]#Command#` stack and the respective undone states of `[green]#Athletick#`, `[green]#Attendance#`"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "or `[green]#Performance#`, if affected, will be pushed to their respective undone states."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Following that, how the `redo` command works is very similar to how the `undo` command works."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "As such, you can also refer to the diagrams in the"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "link:https://github.com/AY1920S1-CS2103T-T12-3/main/blob/master/docs/DeveloperGuide.adoc#undo-redo-feature[Undo"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Implementation.]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The activity diagram for `redo` command is as follows:"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ".Activity diagram for `redo` command"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::redoactivity.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "This section describes the pros and cons of the current and other alternative implementations of the undo and redo features."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "||Alternative 1 (Current Choice): Keep states of `[green]#Athletick#`, `[green]#Attendance#` and"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#Performance#`.|Alternative 2: Individual command knows how to undo/redo by itself"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "a|* Easy to implement, and easy for developers to understand."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "a|* Will use less memory (e.g. for `delete -p 1`, just save the person being deleted)."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "a|* May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "a|* We must ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Reason why we chose alternative 1:"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Even though the memory usage of Alternative 2 is lesser, we do not feel that this benefit of lesser memory usage"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "outweighs the tedious cost of implementing the alternative."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Furthermore, as we realise that each time the application starts, the memories of the states"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "are cleared."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "This means that the cost of having alternative 1 is significantly lesser, as the memories of the states do not"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "accumulate. As such, we decided to go with the first alternative."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//end::undoredo[]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//tag::photo[]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d Adding/editing photo feature"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The sub feature of `[green]#AddCommand#` and `[green]#EditCommand#` allows the inclusion of photo for an athlete."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The sub feature is facilitated by `[green]#Photo#`. It is similar to the other features such as `[green]#Name#` and"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#Phone#` which uses a prefix `i/` followed by the file name (e.g. `i/default.png`). Prior to adding the photo"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "of an athlete, the image file that is going to be used has to be in the `images` folder which will be generated when the"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "jar file is executed. `[green]#Photo#` takes in the file name as a `[green]#String#` and retrieves the photo to be added"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "or edited from the `images` folder."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The file name of the images is restricted to alphanumerics only and the file format that will be used is `.png`."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This is done to keep the file name simple."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The following consists of some of the design consideration when I was designing this sub-feature."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Regular expression for the file name"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5\"]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a|**Alternative 1 (current choice):** To use alphanumerics only."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|*Pros*"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "a| Pros: Keeps it simple without the confusion of special characters."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Reason: Alternative 1 was chosen because it simplifies the parsing of the filename and reduces the error it might"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "have if special characters were included."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//end::photo[]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The filter command enables filtering of athletes based on their tags. Users are able to filter by multiple"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "tags, and any athlete that has any of the given tags will be in the results."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Filter makes use of a `[green]#TagMatchesPredicate#` class to determine if the athlete has tags matching the user input."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Given below is the Sequence Diagram to show how `[green]#Logic#` and `[green]#Model#` are involved when an"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "example input of `filter captain freestyle` is called."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Sequence diagram for execution of FilterCommand."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::filter_sequencediagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This section explains the factors that we took into consideration when making decision on how"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`[green]#FilterCommand#` should be implemented."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Method of determining an athlete match when multiple tags are given."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Given an example search of `filter captain freestyle`, athletes will be shown in the results if they"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "contain either the `captain` or `freestyle` tag. They need not have both `captain` and `freestyle`."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|| *Alternative 1 (Current Choice): Match athletes who contain either tag.*"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "| *Alternative 2: Match athletes who contain every tag.*"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Searching for athletes is flexible"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Retrieving a specific type of athlete is possible"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Filtering can yield results that the user is not interested in"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a|* Filtering will yield limited results and a separate filter operation is required if users want a more"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "lenient filtering"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "**Reason for choice of Alternative 1:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Our choice of \"lenient\" filtering may give users results that they may not be interested in"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "especially if they are looking for very specific athletes. However, we find that it is a good compromise"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "for users who want this \"lenient\" filtering as the athlete\u0027s tags will be listed in the search as well, so"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "specific athletes can be found from this filtered list."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Sort Command"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `sort` command sorts the displayed list of athletes in alphabetical order. As new athletes are added to the bottom of the list, the `sort` command is used after to reorder the athlete list."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `sort` command makes use of a `[green]#PersonNameComparator#` that orders athletes in alphabetical order by comparing their names. The comparison is case-insensitive."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following sequence diagram shows how the `sort` operation works:"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Interactions Inside the Logic and Model Components for the `sort` Command"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::SortCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "With reference to the diagram above, when the user issues the `sort` command, a `[green]#SortCommand#` object `[green]#s#` is created. `[green]#s#` is then executed by `[green]#LogicManager#`, which calls the `[green]#sortByName()#` method in `[green]#LogicManager#`. An instance of `[green]#PersonNameComparator#` is then created and is used by the `[green]#sortByName(PersonNameComparator)#` method in `[green]#Athletick#` to sort the observable `[green]#internalList#` in `[green]#UniquePersonList#`. Upon completion of the above execution, the sorted list of athletes would be displayed immediately to the user."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "To support sorting by more attributes (e.g. attendance rate/performance) in the future, you can simply create a new class that implements the `[green]#Comparator#` interface which compares athletes by that attribute instead. After which, you have to edit the `sort` command syntax to allow users to indicate how they want their list to be sorted."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section contains some of our design considerations for the sort command."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When should the athlete list should be sorted"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 5, 5\"]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 1 (Current Choice)**: Sort address book after user issues the `sort` command"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|**Alternative 2**: Sort address book persistently in alphabetical order"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Pros**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Allows users to view their newly added athletes at the bottom of the list which is more user-friendly especially when the list of athletes is very long"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Allows for future expansion of sorting by other attributes (e.g. performance scores) easily as we only have to create new comparators to order the athletes"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Automates sorting so users do not have to issue any commands"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|**Cons**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Requires additional overhead in terms of having to create an additional command for users to issue"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "a|* Restricts users from sorting their list by other methods"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Limits feature\u0027s further expansion by future developers"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Reason for choice of alternative 1:**"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 allows users to view their newly added athletes to ensure their details are correct before they are sorted into their correct positions alphabetically. This is important especially when the athlete list is very long."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 abides by our design principle to keep **Athletick** designer friendly since future developers can expand upon it to allow sorting by other attributes. On the other hand, alternative 2 does not provide much room for future expansion."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `[green]#config.json#`)."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Team coaches for time-based, competitive sports"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Has a need to manage a significant number of team members"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Value proposition*: Manage team details faster and more accurately than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* * *` |Team coach who values commitment |Input attendance of my team  |Keep track of their attendance rate and commitment level"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* * *` |Efficient team coach |Take attendance quickly |Focus on coaching my team"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* * *` |Team coach |Track performance of my team |Know how to help them improve"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* * *` |Motivational Team coach |Performance data analysis of the performance of my team |Provide detailed feedback to my athletes"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* * *` |Detailed team coach |Retrieve past training and performance records on a specific date |Know what happened on a specific date"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* * *` |Team coach |View profile of specific members |Monitor their individual progress"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* * *` |Careless user |Undo my previous commands |Redo any mistakes"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* * *` |New user |Know the available commands |Be able to use all the app functionalities"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* *` |Team coach |Assign tags to my team members |Differentiate roles of team members"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`* *` |Team coach |Filter out my best performers for each event |Plan my team to send for competitions"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`*` |Coach who is in-charge of multiple teams |Add multiple teams |Manage my teams separately"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`*` |Forgetful coach |See past commands issued |Know what changes I have made"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|`*` |User who wants customisation |Change the app’s colour |Customise the app according to my preference"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`*` |Coach who wants fit players |Filter players by overweight BMIs |Single them out and get them to lose weight"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(For all use cases below, the *System* is  `Athletick` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d System: Athletick"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC1 - Marking attendance of players"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletick shows a list of persons"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User keys in players who attended training"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick saves the training session"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC2 - Delete person"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletick shows a list of persons"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick deletes the person"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC3 - Key in Performance of a Player"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletick shows a list of persons"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User requests to tag a performance to a specific person in the list"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick updates the player’s performances"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3b. Input event does not exist"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3b1. Athletick shows an error message"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3c. Timing is invalid"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3c1. Athletick shows an error message"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC4 - View a player’s profile"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletic shows a list of persons"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User request to select a specific person in the list"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick shows the profile of the person"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC5 - Add a person"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User keys in details of person to be added"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Person is added to the list"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1a. Details are invalid (eg. not all fields are filled up)"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1b. Person has already been added"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1b1. Athletick shows an error message."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC6 - Undo a command"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User calls for undo"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Most recent command is undone"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1a. There are no tasks to be undone."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1b. The most recent command cannot be undone."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1b1. Athletick shows the most recent command that can be undone and undo"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC7 - Redo a command"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User calls for redo"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Undo command is redone"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1a. No Redo Command to be redone"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1a1. Athletick shows an error message."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[[cli]] CLI::"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Command line interface (CLI) is a text-based interface that is used to operate software and operating systems while allowing the user to respond to visual prompts by typing single commands into the interface and receiving a reply in the same way."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[[time-base-sports]] Time-base Sports::"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples of time-based sports are swimming and track \u0026 field, where performance can be measured in terms of time or distance."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 292,
      "ChangUo79": 195,
      "jeunhoe": 238,
      "hellodommy": 271,
      "junhuplim": 86,
      "-": 347
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d Athletick - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "By: `CS2103T-T12-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick is a team management desktop application for captains and coaches of timing-based sports teams. Athletick helps you to handle your administrative tasks so that you can focus on what you love doing: leading and motivating your team."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick supports *storing of your team members\u0027 personal details, attendance tracking and performance recording*. If you are a fast typist, you\u0027ll love Athletick\u0027s *Command Line Interface* (CLI) which will get your team management tasks done faster than ever before!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Ready to let us help you to manage your team? Continue reading to find out more!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This document serves to assist you in the navigation and utilisation of Athletick."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Note the following symbols and formatting used in this document"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "NOTE: This symbol indicates important information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`command`:: A grey highlight (called a mark-up) indicates that this is a command that can be typed into the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "command line and executed by the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section guides you on how to install Athletick on your computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "These are the steps you should take:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".  Check that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  Download the latest `athletick.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".  Copy the downloaded file to the folder you want to use as the home folder for your Athletick."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::Gui.png[width\u003d450]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* *`list`* : lists all athletes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com g/Male a/311, Clementi Ave 2, #02-25` : adds an athlete named `John Doe` to Athletick."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **`delete`**`3` : deletes the 3rd athlete shown in the current list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You may refer to \u003c\u003cFeatures\u003e\u003e for a full list of commands and their details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This section explains how you can use the features in *Athletick*."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The features are segregated by their main functions."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* `INDEX` refers to the athlete\u0027s position in the active list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "As the index can change depending on what filters are applied, refer to the current index on the sidebar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "//maybe provide picture"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Team Data Entry"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an athlete : `add`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command adds an athlete to Athletick."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Let\u0027s say John Doe just joined the team and you want to add him to Athletick so that you are able to track his"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "attendance and performance."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the athlete\u0027s particulars in the format given below."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format : `add n/NAME p/PHONE e/EMAIL g/GENDER a/ADDRESS [t/TAG]... [i/IMAGE]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Take note that if you want to add an image of John when you are adding him to Athletick, make sure that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "the image is in `.png` format and that it is included in the `images` folder. Refer to the *\"FAQ\"* section on how to"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "add your images"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "to the folder."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "You can include any number of tags (zero tags are also allowed) to an athlete and the addition of an image"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "is optional."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example: `add n/John Doe p/98765432 e/johnd@example.com g/male a/311, Clementi Ave 2, #02-25 t/backstroke i/john.png`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::beforeAdd.png[width\u003d450]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::afterAdd.png[width\u003d450]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully added, the details of the added athlete will be displayed in the result box."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The added athlete will be shown at the bottom of the team list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an athlete : `delete -p`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command deletes an athlete from the list by their index."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say you want to remove Tao Li from Athletick as she is no longer in the team."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format: `delete -p INDEX`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `delete -p 3`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".As seen in the orange box, Tao Li has index 3 in the active list. Hence, 3 is used at the INDEX."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deleteathlete_wysd.png[width\u003d450]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully deleted, the result box will display the details of the athlete you just deleted, as shown in"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "the diagram below. The athlete should no longer be shown in the team list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Notice that Tao Li is no longer in the athlete list on the left sidebar."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deleteathlete_wyss.png[width\u003d450]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an athlete : `edit`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command edits the details of an existing athlete in Athletick."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "All the details of an athlete (name, phone number, email, address, tags, image) can be edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the edit command in the following format, using the relevant prefixes to edit the appropriate details."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `edit INDEX n/[NAME] p/[PHONE] e/[EMAIL] g/[GENDER] a/[ADDRESS] t/[TAGS] i/[IMAGE]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "In order to edit Chad le Clos name to Shawn, type in the following."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `edit 6 n/Shawn`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::beforeEdit.png[width\u003d450]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "At least one of the optional field must be provided."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "You can remove all the person’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "When editing the image, make sure that the image you are replacing with is in the `images` folder and the format is"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "in `.png`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::afterEdit.png[width\u003d450]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "If successfully edited, the edited information of Chad le Clos (now Shawn) will be displayed in the result box."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The team list should also reflect Chad le Clos\u0027s new details."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::entire_training[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_intro[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Training"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Athletick* allows you to record your team\u0027s training sessions, so that you can store important information like"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "date of training and training attendance. After adding a training session, you can look at past trainings to check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "attendance on that particular date. You can also edit training attendance or delete a training from *Athletick*."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_intro[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "NOTE: *Athletick* does not support recording of multiple trainings on the same date. Recording a training on the same"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "date will replace the previous training. (see \u003c\u003cEdit attendance of an existing training session: `training` or `training -a`\u003e\u003e)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_present[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Record training session by indicating athletes present : `training`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This command saves a training session to *Athletick*, and marks the athletes indicated as present. You will need"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "the date of training and indexes of athletes who were present."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you want to record a training session that took place on the 28th of November 2019 and only Michael and Joseph"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "were present."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type in the `training` command, date of training and the indexes of athletes who were present in the following format"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "and press `Enter` to execute it."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Format : `training [d/DDMMYYYY] #/INDEX [INDEX] [INDEX ] …`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples : `training d/28112019 #/2 4` or `training #/1 3 4 7`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "NOTE: If no date is entered, the training will be recorded under today\u0027s date."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::training_without_flag_before.png[width\u003d450]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "If successfully added, the result box will display the following result as shown in the diagram below. A green dot will"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "also appear at the date on the calendar, indicating that the training has been recorded."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::training_without_flag_after.png[width\u003d350]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_present[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_absent[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Record training session by indicating athletes absent : `training -a`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This command saves a training session to *Athletick*, and marks the athletes indicated as absent. You will need"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "the date of training and indexes of athletes who were absent."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you want to record a training session that took place today and everyone was present except Tao Li."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type in the `training` command, the absent flag `-a`, date of training and the indexes of athletes who were absent in"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "the following"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "format and"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "press `Enter` to execute it."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Format : `training -a [d/DDMMYYYY] #/INDEX [INDEX] [INDEX ] …`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples : `training -a d/29112019 #/3 6` or `training -a #/3`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "NOTE: If no date is entered, the training will be recorded under today\u0027s date."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::training_with_flag_before.png[width\u003d450]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "If successfully added, the result box will display the following result as shown in the diagram below. A green dot"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "will appear also at the date on the calendar, indicating that the training has been recorded."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::training_with_flag_after.png[width\u003d350]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_absent[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_edit[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Edit attendance of an existing training session: `training` or `training -a`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This command allows you to edit the attendance of a training session. You will need the date of training and indexes"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "of athletes."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you recorded a training session on the 23rd of November and indicated that Amanda and Joseph were absent."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "However, you later realised that Joseph was actually present that day and want to change the attendance for that"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "training."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type in the `training` command, date and the correct indexes of athletes in the following format and press `Enter` to"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "execute it. This will edit the training on the date by replacing it with the newly entered training session."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "NOTE: In this case, you can type either `training` or `training -a`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Format : `training [-a] d/DDMMYYYY #/INDEX [INDEX] [INDEX ] …`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples : `training d/23112019 #/2 3 4 5` or `training -a d/23112019 #/1`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::edit_training_before.png[width\u003d350]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "If successfully edited, the result box will display the following result as shown in the diagram below."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::edit_training_after.png[width\u003d350]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_edit[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::training_delete[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a training session: `delete -t`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This command allows you to delete a training session. You will need the date of the training session you wish to delete."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you previously recorded a training session on the 29th of November and you wish to delete that training"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "session."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type in the `delete` command with the training flag `-t` and the date of training in the following format and press"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`Enter` to execute it."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Format : `delete -t d/DDMMYYYY`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples : `delete -t d/29112019`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::delete_training_before.png[width\u003d350]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "If successfully deleted, the result box will display the following result as shown in the diagram below. The green dot"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "at the date will also disappear, indicating that it has been removed."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::delete_training_after.png[width\u003d350]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::training_delete[]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::attendance_intro[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d Attendance"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "To save you the trouble of manually calculating your team\u0027s attendance, Athletick has an attendance tracker that"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "checks your team\u0027s overall attendance for you as you record trainings."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::attendance_intro[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "After recording a training, you can check the attendance of an athlete"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(see \u003c\u003cCheck attendance of an athlete : `attendance`\u003e\u003e) or check your team\u0027s attendance (see: \u003c\u003cCheck overall attendance of your team : `view attendance`\u003e\u003e)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::attendance_command[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Check attendance of an athlete : `attendance`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This command allows you to check the attendance of an athlete."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you notice that Michael hasn\u0027t been attending recent trainings and would like to check on his overall"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "attendance."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type the `attendance` command and the athlete\u0027s index. Press `Enter` to execute it."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Format : `attendance INDEX`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples: `attendance 2`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::attendance_command_before.png[width\u003d350]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "If the command is successful, the athlete\u0027s name and attendance will be displayed in the result box as shown in"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "the diagram below."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::attendance_command_after.png[width\u003d350]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::attendance_command[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// tag::view_attendance_command[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d\u003d Check overall attendance of your team : `view attendance`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This command allows you to check the overall attendance of your team."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you would like to track your team\u0027s overall attendance but don\u0027t want to manually type the attendance"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "command multiple times."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type the `view attendance` command and press `Enter` to execute it."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::view_attendance_before.png[width\u003d350]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "If the command is successful, the result box will display the following result as shown in the diagram below. The"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "feature box will show you your team\u0027s overall attendance."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "image::view_attendance_after.png[width\u003d350]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::view_attendance_command[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "// end::entire_training[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_addevent[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Performance"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "To help you keep track of your team\u0027s performance,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Athletick has a built-in performance tracker for you record and analyse your team\u0027s performance."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "First, you will have to add an event."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "After that, you can add records from timed trials under the event to start tracking their performance."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an event : `event`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command adds an event to *Athletick*, and will be used for storing your athletes’ performances."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you want to start recording performances for the `freestyle 50m` event. You will need to add"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "the `freestyle 50m` event to *Athletick* first."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Format : `event NAME_OF_EVENT`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "NOTE: Event names are case-insensitive (eg. `50**m** freestyle` and `50**M** freestyle` are considered"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "the same event)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Example: `event freestyle 50m`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addevent_wysd.png[width\u003d350]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully added, the result box will display message \"_Event created:_\" followed by the name"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "of the event you just added, as shown in the red box in the diagram below."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Additionally, the feature box (orange box) will display the list of all your events. The event you just"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "added should be included in the list. In the example below, `freestyle 50m` appears at the bottom of the list."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addevent_wyss.png[width\u003d350]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_addevent[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an event : `delete -e`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command removes an event from *Athletick*."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Records stored under this event will be deleted as well."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that your team is no longer participating in the `backstroke 100m` event, and you want to remove it"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "from Athletick."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `delete -e NAME_OF_EVENT`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `delete -e backstroke 100m`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deleteevent_wysd.png[width\u003d350]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully deleted, the result box will display the message \"_Deleted event:_\" followed by"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "the name of the event you just deleted, as shown in the red box in the diagram below."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Additionally, the feature box (orange box) will show the current list of events you have in Athletick. The"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "deleted event should not appear in the list."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Notice that the backstroke 100m event is not listed."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deleteevent_wyss.png[width\u003d350]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_addrecord[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an athlete\u0027s record : `performance`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command records your athlete’s performance for a certain event, on a certain day, to Athletick."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "You will need the following details to add a record."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Athlete\u0027s index"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Event name"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Date of record"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Timing of record"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "NOTE: The event has to be created first. Otherwise, Athletick will prompt you to create that event."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you took a timed trial for Tao Li on 2nd November 2019 under the freestyle 50m event,"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "and she took 24.01 seconds to complete it. Now you want to store this record in Athletick."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `performance INDEX e/EVENT_NAME d/DDMMYYYY t/TIMING`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `performance 3 e/freestyle 50m d/02112019 t/24.01`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".As seen in the orange box, Tao Li has index 3 in the active list. Hence, 3 is used at the INDEX."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addrecord_wysd.png[width\u003d350]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully added, the result box will display the details of the record you just added, as shown in"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "the diagram below."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Details of Tao Li\u0027s new record - event, date and timing - are displayed in the result box."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addrecord_wyss.png[width\u003d350]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_addrecord[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an athlete\u0027s record : `delete -r`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command removes an athlete\u0027s record for a certain event, on a certain day, from Athletick."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "You will need the following details to delete a record."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Athlete\u0027s index"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Event name"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Date of record"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you want to delete Tao Li\u0027s record for the freestyle 50m event on 2nd November 2019."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `delete -r INDEX e/EVENT_NAME d/DDMMYYYY`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `delete -r 3 e/freestyle 50m d/02112019`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".As seen in the orange box, Tao Li has index 3 in the active list. Hence, 3 is used at the INDEX."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deleterecord_wysd.png[width\u003d350]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully deleted, the result box will display the details of the record you just deleted, as shown"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "in the diagram below."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Details of Tao Li\u0027s deleted record - event and date - are displayed in the result box."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deleterecord_wyss.png[width\u003d350]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Viewings events : `view performance`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command shows you what events you have stored in *Athletick*."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you want to know what events you have added to *Athletick*."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `view performance`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::viewevents_wysd.png[width\u003d350]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully executed, the result box (red box) will display the message \"_Here are your events stored"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "in Athletick_\" followed, as shown in the diagram below."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Additionally, the feature box (orange box) will show the list of events you have in Athletick."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::viewevents_wyss.png[width\u003d350]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// tag::performance_viewrecord[]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing records : `view records`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command shows you the records stored under a particular event in Athletick."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you want to see the records under the freestyle 50m event."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `view records EVENT_NAME`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `view records freestyle 50m`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::viewrecords_wysd.png[width\u003d350]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully executed, the result box will display the message \"_Here are the records for_\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "followed by the event name you requested, as shown in the red box in the diagram below."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Additionally, the feature box (orange box) will show the athletes who have records under this event,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "followed by a graph of their progress over time."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::viewrecords_wyss.png[width\u003d350]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// end::performance_viewrecord[]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// tag::calendar1[]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "To allow you to retrieve training and performance records using the date they were recorded on, Athletick has a calendar feature which provides 2 main functions:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". Displays an overview of training and performance records in a selected month"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". Displays training and performance records entered on a specific date"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the calendar : `view calendar`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command displays the calendar for the current month."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Let\u0027s say that you have been entering training and performance records into **Athletick** over the past few weeks in the current month (e.g October 2019), and you would like to find out which days of the month contain training or performance records."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Type `view calendar` into the command box, and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::calendar1.png[width\u003d450]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "If successfully executed, the message \"Viewing your calendar\" will be displayed in the result box (red box)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Additionally, the feature box (yellow box) will display the calendar for the current month (e.g. October 2019)."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar3.png[width\u003d450]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "With reference to the diagram below, **Header 1** displays today’s day and date. **Header 2** displays the month and year you are currently viewing."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendarview_calendar.png[width\u003d300]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You may use the left and right arrow icons beside header 2 to navigate to the previous or next month."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Days with training entries are marked with a green dot indicator, and days with performance entries are marked with a purple dot indicator. Days with both training and performance entries are marked with both indicators. Today\u0027s date (e.g. 31 October 2019) is marked with a blue circle."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Navigating the calendar to a specific month : `calendar MMYYYY`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command allows you to display the calendar for a specific month of your choice."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You will need to specify the month and the year you would like to view."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you would like to view the calendar containing training and performance records from 2 years ago (e.g. October 2017)."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type in the command `calendar` followed by the desired month and year in the format `MMYYYY`."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Format: `calendar MMYYYY`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`MM` provided has to be within the range `01` to `12` (`0` must be included in front of single-digit numbers) and `YYYY` provided has to be within the range 0001 to 9999 for the command to execute successfully."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Example: `calendar 102017`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type `calendar 102017` into the command box, and press kbd:[enter] to execute it."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar5.png[width\u003d350]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "If successfully executed, the message \"Viewing calendar for: October 2017\" will be displayed in the result box (red box)."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Additionally, the feature box (yellow box) will display the calendar for the selected month and year (e.g. October 2017)."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar7.png[width\u003d450]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// end::calendar1[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "With reference to the diagram below, **Header 1** displays today’s day and date. **Header 2** displays the month and year you are currently viewing."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::monthview_calendar.png[width\u003d450]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You may use the left and right arrow icons beside header 2 to navigate to the previous or next month."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Days with training entries are marked with a green dot indicator, and days with performance entries are marked with a purple dot indicator. Days with both training and performance entries are marked with both indicators."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// tag::calendar2[]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing training / performance details for a specific date : `calendar DDMMYYYY`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command displays the training and performance details entered on a specific date."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You will need to specify the day, month and the year you would like to view."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Let\u0027s say that you have entered both training and performance records into **Athletick** on 31 October 2019, and you would like to view these records."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type in the command `calendar` followed by the desired date in the format `DDMMYYYY`."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Format: `calendar DDMMYYYY`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// end::calendar2[]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`MM` provided has to be within the range `01` to `12` (`0` must be included in front of single-digit numbers) and `YYYY` provided has to be within the range 0001 to 9999 for the command to execute successfully."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You should have either training or attendance records on the specified date entered into **Athletick**, otherwise no records will be displayed."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// tag::calendar3[]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Example: `calendar 31102019`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type `calendar 31102019` into the command box, and press kbd:[enter] to execute it."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar8.png[width\u003d350]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "If successfully executed, the message \"Viewing details for: 31st October 2019\" will be displayed in the result box (red box)."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Additionally, the feature box (yellow box) will display the training and performance details recorded on 31 October 2019."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar10.png[width\u003d450]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "In the event your list of attendance and performance records exceeds the size of the window, you may use the blue vertical scrollbar on the right of the feature box to scroll down."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "With reference to the diagram below, the **attendance pie chart** indicates the overall team attendance percentage and the number of present and absent team members. The **attendance table** displays your team members and whether they were present or absent. The **performance statistic** indicates the total number of performance records and the **performance table** displays the records for each event."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar11.png[width\u003d450]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// end::calendar3[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Athlete Management"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing more details of a team member : `select`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This command shows the profile of the athlete that you have selected."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Let\u0027s say you want to view Michael\u0027s personal information."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `select INDEX`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example : `select 2`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::beforeSelect.png[width\u003d450]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The message “Person selected!” will be displayed in the result box to indicate that you have selected the"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "athlete."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "In the feature box, the personal information of the athlete will be displayed as shown."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::afterSelect.png[width\u003d450]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "If the image of the selected athlete is not appearing as shown below, take note that the image file is not in the"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`images` folder. You may refer to \u003c\u003cFAQ\u003e\u003e section to know more on where to include the image files"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "which are going to be used and \u003c\u003cEditing an athlete : `edit`\u003e\u003e to understand further how to edit the image of"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "an athlete."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::noImage.png[width\u003d450]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting athletes alphabetically : `sort`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command sorts your **Athletick** list alphabetically by the athletes\u0027 name."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say you have just added 2 new athletes named Aaron and Bala. These new athletes are added to the bottom of the list."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Now you want to sort the list to put these players in their correct positions alphabetically."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `sort` command is case-insensitive."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command will change your athletes’ index numbers."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type `sort` into the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `sort`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::sort1.png[width\u003d450]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "If successfully executed, the message \"Sorted your team list in alphabetical order.\" will be displayed in the result box (red box)."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Additionally, your newly added athletes (Aaron and Bala) are now in their correct positions and the index numbers of all your athletes in the list have been updated."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::sort2.png[width\u003d450]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering athletes by their tags : `filter`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command filters your athletes based on their tags."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command will change your athletes’ `INDEX`."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command is case-insensitive, so filtering by `captain` and `Captain` will give the same result."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say you want to see which athletes are butterfly swimmers"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "(ie. you want to filter by the `butterfly` tag)."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `filter TAG [TAG]...`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `filter butterfly`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::filter_wysd.png[width\u003d450]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully filtered, the result box will display the message \"_x persons listed!_\", where _x_ is the"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "number of athletes that have the tag you filtered by, as shown in the red box in the diagram below."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Additionally, the athlete list (orange box) will show only the athletes that have the tag you filtered by."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Note that the index numbers of the athletes in the filtered list may differ from that of the unfiltered list. Refer to the diagram below for an explanation."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::filter_wyss.png[width\u003d450]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The diagram below shows the change in the active list (from unfiltered to filtered) when the filter is"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "applied."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Notice that the index of some athletes have changed (eg. Joseph Schooling has changed from 3 to 2)."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::filter_change.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Finding athletes by their name : `find`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command find athletes whose name contains any of the keywords you provide."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command will change your athletes’ `INDEX`."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command is case-insensitive, so finding by `Joseph` and `joseph` will give the same result."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Only full keyword matches are accepted (eg. to find `Joseph Schooling`, you need to search"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "for `Joseph` or `Schooling`, but *not `Jo`*."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let\u0027s say that you want to find Joseph Schooling from your long list of athletes."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format and press `Enter` to execute it."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `find joseph`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::find_wysd.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully found, the result box will display the message \"_x persons listed!_\", where _x_ is the"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "number of athletes whose names have the keyword(s) you provided, as shown in the red box in the diagram"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "below."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Additionally, the athlete list (orange box) will show only the athletes whose names have the keyword(s) you"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "provided."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Note that the index numbers of the athletes in the searched list may differ from that of the unsearched list. Refer to the diagram below for an explanation."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::find_wyss.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The diagram below shows the change in the active list (from unsearched to searched) when the search term is"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "applied."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Notice that the index of some athletes have changed (eg. Joseph Schooling has changed from 4 to 1)."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::find_change.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all data : `clear`"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command clears all the existing data in Athletick."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "It deletes all players, trainings, attendance, events and performances."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the clear command."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::clear.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `clear`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::afterclear.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The following prompt will show if data was successfully cleared."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Get help on how to use Athletick: `help`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command provides a user guide for Athletick."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the help command."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::beforehelp.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::afterhelp.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "A pop up box will appear, with a link to the user guide on Athletick."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//tag::undoredo[]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing a previous command : `undo`"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command restores Athletick to the state before the previous command was executed."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Take note that the `undo` feature only applies to undoable commands."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Undoable commands include: `add`, `delete`, `edit`, `clear`, `training`, `event` and `performance`."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The `undo` command will not be able to undo non-undoable commands."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Let’s say you have executed a `list` command to list out all the athletes information in Athletick."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "If you were to execute the `undo` command now, the `undo` command will fail because `list` is not an undoable command,"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "and that no undoable commands were executed before this."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `undo` command will reverse the latest command that can be undone."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Let’s say you have executed the `delete` command, followed by the `list` command."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Since `list` command is not an undoable command, if you were to execute `undo`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "command now, you will thus reverse the `delete` command."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The `undo` command reverses previous commands in reverse chronological order."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Let’s say you have executed the `edit` command, followed by the `delete` command. If you were"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "to execute `undo` command now, you will reverse the `delete` command. Executing `undo` again"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "will then reverse the `edit` command."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have accidentally deleted an athlete’s contact (Mohamad Ali) from your list."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Instead of having to re-enter Mohamad Ali’s contact information all over again,"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "you can easily restore all of Mohamad Ali’s details by executing the command `undo` to"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "undo the `delete` command that you have just entered."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "With Mohamad Ali\u0027s contact information deleted, the current list has 7 people. Type `undo` into the command box, and"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "press Enter to execute it."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Format : `undo`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::Undo0.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The result box will display a success message and you can check that"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Mohamad Ali’s contact information is visible in the list again!"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::AfterUndo0.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing an `undo` command : `redo`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command reverses the most recent `undo` command."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The `redo` command can only be executed immediately after an `undo` command."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Let’s say that you have executed the `undo` command to undo a previous command that you have previously executed."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "You then execute the `list` command to view your list."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Executing the `redo` command now will fail because your previous command was not an `undo` command."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `redo` command reverses previous `undo` commands in reverse chronological order."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Let’s say that you have executed the `clear` command, followed by the `add` command."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Executing the `undo` command now will reverse the `add` command."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Executing the `undo` command again will reverse the `clear` command as well."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Following this, executing the `redo` command will reverse the most recent `undo` command and re-execute the `clear`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "command."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Executing the `redo` command again will reverse the second most recent `undo` command and re-execute the `add` command."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have executed the `delete` command to delete Mohamad Ali from your list."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "You may undo this action and restore Mohamad Ali’s information by executing the `undo` command."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Then, if you decide that you want the contact to remain deleted after all,"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "you may very quickly do so by executing the `redo` command to reverse the `undo` command that you had just executed."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "With Mohamad Ali\u0027s contact information, the current list has 8 people. Type `redo` into the command box, and press"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Enter to execute it."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Format : `redo`"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::Redo0.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The result box will display a success message."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Furthermore, the list now only has 7 people and Mohamad Ali is once again gone from the list!"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "image::AfterRedo0.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//end::undoredo[]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Upcoming features"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Change app theme [coming in v2.0]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Team roster [coming in v2.0]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Performance tracker [coming in v2.0]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Importing data : `import` [coming in v2.0]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting data : `export` [coming in v2.0]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Athletick folder."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "// tag::FAQ[]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*Q*: How do I add my image files to the `images` folder? +"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*A*: Make sure that the `images` folder is in the same directory as the Athletick executable jar file. If the"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`images` folder is not created, the following steps will guide you through the creating of the `images` folder and"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "how to add images into the folder:"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Create a folder named `images` in the same directory as your executable jar file."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::creatingFile.png[width \u003d\"600\"]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Ensure that the file name is correct."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::imageFile.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Add the image files that you want to use into the folder."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::addingPhotos.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//end::FAQ[]"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Add athlete:: `add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]... i/IMAGE`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Check attendance of an athlete:: `attendance INDEX`"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Jump to a specific month and year on calendar:: `calendar MMYYYY`"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "View details for specific date on calendar:: `calendar DDMMYYYY`"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Clear data:: `clear`"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Edit athlete:: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]... i/IMAGE`"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Add event:: `event EVENT_NAME`"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Delete athlete:: `delete INDEX`"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Filter athletes:: `filter TAG`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Find athletes:: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Get help:: `help`"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Record performance:: `performance INDEX e/EVENT_NAME d/DDMMYYYY t/TIMING`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Redo an undone command:: `redo`"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "View athlete details:: `select INDEX`"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Sort athletes:: `sort`"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Record a training (by athletes present):: `training d/DDMMYYYY #/INDEX [INDEX]...`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Record a training (by athletes absent):: `training -a d/DDMMYYYY #/INDEX [INDEX]...`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Edit attendance of a training:: `training` or `training -a`"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Delete a training session:: `delete -t d/DDMMYYYY`"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "View attendance of an athlete:: `attendance INDEX`"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "View team\u0027s attendance:: `view attendance`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Undo a command:: `undo`"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "View calendar:: `view calendar`"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "View all created events:: `view performance`"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 228,
      "ChangUo79": 66,
      "hellodommy": 429,
      "jeunhoe": 179,
      "junhuplim": 53,
      "-": 112
    }
  },
  {
    "path": "docs/diagrams/SelectSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR_T2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":SelectCommandParser\" as SelectCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":SelectCommand\" as SelectCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR_T3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"select 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"select 1\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "create SelectCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "AddressBookParser -\u003e SelectCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate SelectCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "create SelectCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommandParser -\u003e SelectCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate SelectCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand --\u003e SelectCommandParser : s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate SelectCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommandParser --\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate SelectCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "destroy SelectCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager -\u003e SelectCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate SelectCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand -\u003e ModelManager : storePerson(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "ModelManager --\u003e SelectCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate SelectCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager --\u003e MainWindow : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "MainWindow -\u003e LogicManager : getPerson()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager -\u003e ModelManager : selectPerson()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "ModelManager --\u003e LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager --\u003e MainWindow"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[\u003c-- MainWindow"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 82
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Class InformationDisplay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "MainWindow *-right-\u003e InformationDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "InformationDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "InformationDisplay ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 4,
      "-": 60
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a{color:#30336b;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a:hover,a:focus{color:#30336b}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 2,
      "-": 405
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    color: #30336b;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    color: #30336b;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    color: #30336b;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    border-bottom: 2px #30336b solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    a[href]::after {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        content: none !important;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 2,
      "hellodommy": 4,
      "jeunhoe": 3,
      "-": 210
    }
  },
  {
    "path": "docs/team/ChangUo79.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d Erwin Chan Guo Xin - Project Portfolio for Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The purpose of this portfolio is to record my contribution to my software engineering project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d About the team"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This project was done in a group of five, consisting of Shawn, Dominique, Jeun Hoe, Jun Hup and me. We are second-year"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "students in National University of Singapore (NUS), majoring in Computer Science."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This project is part of a software engineering module that I took during my second year. We were tasked to optimize"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "or morph a basic command line interface (CLI) desktop addressbook application for this project. We decided to morph the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "application into a team management application called Athletick which caters to time-based sports."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This application enables coaches or captains to manage their team by recording attendance for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "training sessions as well as track the performances of their athletes. One of the constraints set for this project is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "that the primary input to the application has to be CLI as it is meant for users who can type fast and prefer typing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "over the use of mouse. The duration of this project spanned over a period of 6 weeks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".Main Window of Athletick"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::athletick.png[width\u003d500]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The following is a list of our main features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Recording of attendance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Recording of performance"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Viewing of attendance and performance on calendar"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Viewing of athlete\u0027s profile"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Undoing and redoing of commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "My role was to design and implement the feature that allows users to view the profile of an athlete. The following"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "sections will elaborate more on this feature which includes relevant documentation from the user and developer guides."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "NOTE:: This symbol indicates important information"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`command`:: A grey highlight indicates a command that can be executed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`[green]#component#`:: Green text with grey highlight indicates a component, class, object or method in the architecture of the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This section shows a summary of my contributions to the team project."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*Enhancement added:* I added the ability to view an athlete\u0027s profile."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* What it does: The `select` command allows users to view the profile of an individual athlete."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Justification: There will be occasions when coaches or captains would like to track the progress of an athlete. The"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`select` command allows them to view the athlete\u0027s personal information such as the name, phone number and email"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "address. The attendance rate and performance of the athlete is also displayed so that it is easier to monitor instead"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "of looking at the attendance and performance of all the athletes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** This feature works with other features such as `find` or `filter` which reduces the need to"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " go through the list when looking for a specific athlete. For this feature, there were many design alternatives to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " consider as there are many ways it could be implemented. The current choice of design was used because it was"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "in line with the other features my group mates had implemented."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** I felt that the implementation was quite challenging because it requires a certain knowledge on how to use tools"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "such as JavaFX and SceneBuilder which were used to design the graphical user interface (GUI). With no prior experience, the learning"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "curve was steep which required more effort to learn about these tools."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*Code contributed:* Please click these links to see a sample of my code:[https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dchanguo79\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dChangUo79\u0026tabRepo\u003dAY1920S1-CS2103T-T12-3%2Fmain%5Bmaster%5D[RepoSense Code Dashboard]][https://github.com/ChangUo79/main[GitHub Repository]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*Other contributions*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Project management"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Managed release version 1.4 of Athletick on GitHub [https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v.1.4[v1.4]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Served as the team\u0027s test engineer, ensuring that classes and methods generated by my team has been covered by"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "test cases."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//link"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Enhancements to existing features"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Updated `add` and `edit` command to allow addition of images for an athlete\u0027s profile by adding a prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "`i/FILENAME.png`. (Pull request: https://github.com/AY1920S1-CS2103T-T12-3/main/pull/75[#75])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Documentation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Updated developer guide to standardise the style and formatting. (Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/225[#225])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//link to green changes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Added documentation for `select` feature in the User Guide."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "(Pull request: https://github.com/AY1920S1-CS2103T-T12-3/main/pull/118[#118]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ", https://github.com/AY1920S1-CS2103T-T12-3/main/pull/119[#119]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ", https://github.com/AY1920S1-CS2103T-T12-3/main/pull/134[#134]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ", https://github.com/AY1920S1-CS2103T-T12-3/main/pull/203[#203]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//link to pr"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Added documentation for `select` feature in the Developer Guide."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "(Pull request: https://github.com/AY1920S1-CS2103T-T12-3/main/pull/203[#203]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ", https://github.com/AY1920S1-CS2103T-T12-3/main/pull/225[#225]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ", https://github.com/AY1920S1-CS2103T-T12-3/main/pull/256[#256]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "* Community"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Tested other team\u0027s application and reported bugs with some feedback on what could be improved (example:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "https://github.com/ChangUo79/ped/issues/4[4],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "https://github.com/ChangUo79/ped/issues/5[5],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "https://github.com/ChangUo79/ped/issues/6[6])"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Reviewed pull requests (With non-trivial review comments):"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/69[#69],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/75[#75]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d Contributions to the user guide"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Given below are sections I contributed to the user guide. They showcase my ability to write documentation targeting"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end-users."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "{Start of extract}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "include::..\\UserGuide.adoc[tag\u003dselect]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d FAQ"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "include::..\\UserGuide.adoc[tag\u003dFAQ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "{End of extract}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d Contributions to the developer guide"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "{Start of extract}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "include::..\\DeveloperGuide.adoc[tag\u003dselect]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "include::..\\DeveloperGuide.adoc[tag\u003dphoto]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "{End of extract}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 140
    }
  },
  {
    "path": "docs/team/hellodommy.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d Dominique Ng Wenyi - Project Portfolio for Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":site-section: dominique"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This project portfolio details my key contributions to the team software engineering project, *Athletick*."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The team consists of five Year 2 Computer Science undergraduates in the National University of Singapore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "(NUS), including myself."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The project was completed as part of a CS2103T Software Engineering module offered by the NUS School of Computing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "We were given six weeks to to either _morph_ or _enhance_ an existing Java project,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book (Level 3)]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "We chose to morph the project into *Athletick*, a tool for coaches and captains to use to keep track of their"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "team\u0027s attendance and performance. *Athletick* also features a calendar for coaches and captains to plan"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "ahead, and supports the sorting, filtering, and finding of athletes in their database."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Like Address Book, *Athletick* uses the command-line as its main method of input and a JavaFX Graphical User"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Interface for display. Some constraints of the project were that it should have a command-line input, and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "it should be used by a single user only. The full list of constraints can be found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://nus-cs2103-ay1920s1.github.io/website/admin/project-constraints.html[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "My role was to build the _Performance_ feature, which encompasses the adding, deleting and viewing of"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "events and records."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsymbol]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to *Athletick*."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*Enhancement addded (major):*  I added the ability to _add_, _delete_, and _view_ events and records."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* What it does: It allows coaches and captains to log records that an athlete completed for a certain"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "event, on a certain day, into *Athletick*. An event can store multiple records over time for the same athlete in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "order to track their progress, which can be visualised with a line chart provided."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Justification: It is crucial for coaches and captains to track the progress of their team over time,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "hence the ability to add records. There are also different types of recordings to take in a sports team --"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "2.4km run, static jump, etc. --  hence the ability to add records _under different events_."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "+"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The ability to delete records and events was also necessary, as teams may no longer participate in certain"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "events, or records can be entered incorrectly."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The presentation of record progress over a line chart was meant to give coaches and captains a quick"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "overview on their athlete\u0027s fitness status."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Highlights: This enhancement works well with future extensions to further analyse and present the records"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "data as the required framework has been built."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "An in-depth analysis of design alternatives was necessary due to complex structure of the records data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "which required efficient storage and retrieval. There was up to 4 levels of nesting  - a list of events,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "each event with a list of athletes paired with their own list of records, each record having a date and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "timing. This also made the implementation exceptionally challenging."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*Enhancement added (minor):* I added the ability to _filter_ athletes by their tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* What it does: It allows captains and coaches to find athletes through their tags. Filtering by multiple"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "tags is supported."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Justification: When there are many athletes in a team, tags are a useful way of remembering certain"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "details about a particular athlete. This function enhances the existing tag feature by allowing users with"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "certain tags to be filtered out of the general athlete list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Highlights: This enhancement provides the necessary framework for further types of filtering, such as by"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "gender or location."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*Code contributed:* The links provided are a compilation of my code contributed to the project:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/commits?author\u003dhellodommy[[GitHub repository]]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dhellodommy\u0026tabRepo\u003dAY1920S1-CS2103T-T12-3%2Fmain%5Bmaster%5D[[RepoSense]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*Other contributions*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Project management"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Acted as the Team Lead and assigned GitHub issues to team members"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Managed the deliverables for all 4 milestones -"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/milestone/1[v1.1],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/milestone/2[v1.2],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/milestone/3[v1.3],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/milestone/4[v1.4]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Released https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.3.3[v1.3.3]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "of the product, prior to the final v1.4 release"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Enhancement to existing feature"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Extended the existing _find by name_ feature to allow users to _find by tags_ (Pull requests"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/64[#64],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/84[#84])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Documentation"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Modified the colour scheme of the documentation for consistency with *Athletick*\u0027s signature dark blue"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "(Pull request"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/79/files[#79])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Added Developer Guide documentation for `filter`, `[green]#Performance#` and `[green]#Storage#` (Pull requests"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/83[#83],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/226[#226],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/232[#232],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/238[#238])"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Added User Guide documentation for `filter`, `find`, `delete` and `[green]#Performance#`-related"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "commands (Pull"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "requests"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/79[#79],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/117[#117],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/206[#206],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/239[#239],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/241[#241])"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Community"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Created helper methods for team members to integrate `[green]#Performance#` into their respective"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "features (Pull requests"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/98[#98],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/128[#128])"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Reviewed Pull Requests with non-trivial review comments (Pull requests"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/65[#65],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/91[#91],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/188[#188])"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Reported bugs and offered suggestions to other teams in the class (Issues"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/issues/129[#129],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/issues/131[#131])"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Tools"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "** Integrated a new GitHub plugin (Coveralls) to the team repo"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|_Given below are extracts of sections I contributed to in the User Guide."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The full User Guide can be found https://ay1920s1-cs2103t-t12-3.github.io/main/UserGuide.html[here]._"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "_[Start of extract from User Guide]_"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../UserGuide.adoc[tag\u003dperformance_addrecord]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../UserGuide.adoc[tag\u003dperformance_viewrecord]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "_[End of extract from User Guide]_"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|_Given below are extracts of sections I contributed to in the Developer Guide."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "_[Start of extract from Developer Guide]_"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformance_intro]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformance_overview]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformance_event]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformance_record]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformance_view]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformance_designconsiderations]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "_[End of extract from Developer Guide]_"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 170
    }
  },
  {
    "path": "docs/team/jeunhoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d Poon Jeun Hoe – Project Portfolio for Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This project portfolio details my key contributions to the software engineering project *Athletick*."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Athletick* is a desktop team-management application designed for coaches and captains who manage time-based sports"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(e.g. swimming, racing) teams. *Athletick* allows users to manage athlete information, record training sessions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "save competition results. *Athletick* also allows users to monitor their training schedule and track an athlete’s"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "attendance, performance and sporting progress. This enables users to better manage their team, plan for trainings and prepare for upcoming"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "competitions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d\u003d About the team"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Athletick* was designed by a team of student athletes who were passionate about making team-management hassle-free for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "captains and coaches. Our team comprises of five second-year computer science undergraduates from the National"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "University of Singapore (NUS) and we created *Athletick* as part of a requirement for our second-year software"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "engineering module. We were tasked with morphing a desktop address book application with the constraint that it had"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "to be a command line interface application. This project was completed over six weeks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsymbol]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This section contains a summary of my contributions to the project. This includes code, documentation and other helpful"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "contributions to the team project."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Enhancement added:* I added the ability to add and delete training information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* What it does:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** The `training` command adds training information to *Athletick*. Users store the date of training and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "players attended, allowing them to view, edit and delete past training data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Justification:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Coaches and captains keep records of past trainings so they can use the information to manage their team."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Allowing them to store training dates helps them to monitor their training schedule and plan for future training"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "programs. We also allow storage of attendance information as a coach or captain would want to know attendance for that"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "training"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "session."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** The training feature was designed to function as a standalone unit and does not rely on any other"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "components. This allows for easy extension of the feature to cater to different users. We have plans to extend the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "training feature to include more information, like type of training (e.g. gym training, sprints training) and athlete"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "performance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** There are 2 variations of the `training` command. This allows users to indicate attendance of a training"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "by listing members present, or by members absent. We understand that keying player attendance can be very tedious for"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "big teams. Giving the option to coaches and captains to mark attendance by entering players absent will reduce the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "amount of typing which will save time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Credits:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Saving of training data into .json files is done with the use of the Jackson library."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Enhancement added:* I added the ability to monitor an athlete’s attendance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* What it does:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** A built-in attendance tracker allows users to track their team’s attendance using the `attendance`, `select`,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`view attendance` and `calendar` commands."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Justification:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Coaches and captains are concerned about their team’s overall attendance rate as it is a good indicator an"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "athlete’s commitment and how prepared an athlete is for a competition. Providing an automatic attendance tracker"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "removes the need for manual calculation as it can be tedious for them, especially if they have to go"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "through many training sessions."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Highlight:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Attendance of a particular training is used in the `calendar` command and attendance rate is used in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`select` command. A TrainingManager was implemented to provide other components use with important information from"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "training information and attendance rate."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Code contributed:* The links provided show my code contribution for the project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003djeunhoe[(RepoSense)]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/commits?author\u003djeunhoe[(All commits)]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Other contributions:*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Managed release version 1.3 of *Athletick* on GitHub."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.3[(v1.3)]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Performed manual testing of application before every release to detect bugs that were not covered by test classes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Served as the team\u0027s Quality Assurance Engineer -- reviewed code quality and documentation of every pull request"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "before merging."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Enhancement to existing features:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Extended the existing `delete` command to support deletion of trainings."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(Pull request"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/194[#194])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Tweaked the `edit` person command to work with training information."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/195[#195])"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Tweaked the `clear` command to clear training information."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(Pull request"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/194[#194])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Created the general framework for the Developer Guide."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/19[#19])"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Added documentation for the `training`, `attendance` and `view attendance` commands in the User Guide."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(Pull requests"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/121[#121],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/131[#131],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/227[#227]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Added documentation for training feature in the Developer Guide."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(Pull requests"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/131[#131],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/227[#227])"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Standardised product screenshots for training, attendance, select features and FAQ in User Guide to make it more"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "reader friendly. (Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/227[#227])"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Reviewed other team’s PRs to give suggestions and comments."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Stress tested applications from other teams, reported bugs and gave suggestions."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(https://github.com/jeunhoe/ped/issues?q\u003dis%3Aissue+is%3Aopen[Bug reports and suggestions])"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** Reviewed and commented on pull requests. (Pull requests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/28[#28],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/30[#30],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/63[#63],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/64[#64],"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/187[#187])"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d Contributions to the user guide"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This section displays excerpts of my contributions to the user guide for the training and attendance features. They"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "showcase my ability to write documentation targeting end-users of our application."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "You can view the entire document https://ay1920s1-cs2103t-t12-3.github.io/main/UserGuide.html[here]."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "{Start of extract from User Guide}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtraining_intro]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtraining_absent]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "include::../UserGuide.adoc[tag\u003dview_attendance_command]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "{End of extract from User Guide}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d\u003d Contributions to the developer guide"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "This section displays excerpts of my contributions to the developer guide for the training feature. They showcase my"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "ability to write technical documentation to developers, as well as the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "You can view the entire document https://ay1920s1-cs2103t-t12-3.github.io/main/DeveloperGuide.html[here]."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "{Start of extract from Developer Guide}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dentire_training]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "{End of extract from Developer Guide}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 165
    }
  },
  {
    "path": "docs/team/junhuplim.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d Lim Jun Hup - Project Portfolio for Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The purpose of this portfolio showcases my contribution to the Athletick project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d\u003d About the team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Our team comprises of five year 2 computing undergraduates from"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "the National University of Singapore."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "This project is a 6 weeks long project for our software engineering module."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "We were tasked to either enhance or morph a command line interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Address Book application and one of the main constraints for this project is that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "it has to remain as a command line interface application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "What we decided to do was to morph the existing address book application to a team"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "management application called Athletick. Athletick is designed for captains and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "coaches of timing-based performance sports to help take and keep track of attendance"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "and performance of their teams. Other main features of Athletick include viewing of the training calendar"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "and performance graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "My role was to design and implement the code for the `undo` and `redo` features."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "The following sections illustrate these enhancements in more detail, as"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "well as the relevant documentation I have added to the user and developer guides"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "in relation to these enhancements."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "NOTE: This symbol indicates important information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`command`:: A grey highlight (called a mark-up) indicates that this is a command that can be typed into the command line and executed by the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "`[green]#component#`:: Green text with grey highlight indicates a component, class, object or method in the architecture of the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "*Enhancement added*: I added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * What it does"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** The `undo` command allows the user to undo a previous command. The user may"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "reverse this `undo` command with the `redo` command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Justification"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** In the event that users have made a mistake or changed their minds about executing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "a command, the `undo` command enables them to revert to a version immediately before the mistaken command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "was executed. If they change their minds again and decide to execute the command after all,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "then the `redo` command enables them to do so easily."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Highlights"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** This enhancement works with existing as well as future commands."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** An in-depth analysis of design"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "alternatives was necessary to weigh the different alternatives and decide on the implementation for this enhancement."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** The implementation was challenging as it required a full understanding of"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "the major components of the application and the existing features implementations."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Also, as the enhancement is able to work with future commands, the implementation of"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "this enhancement has to be considerable of the future features implementations so as to"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "allow the future enhancement for such features to be easily integrated into the current implementation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "*Code contributed*: The links provided show my code contribution for the project."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "(https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003djunhup\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dfalse[Reposense], https://github.com/junhuplim/main[Github Repository])"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "*Other contributions*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Project management"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Managed version release v1.3.4 of Athletick to prepare for final"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "production release on GitHub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "(https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v.1.3.4[v1.3.4])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Introduced Trello for tasks and deadlines management"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Served as the team\u0027s Backend Engineer and assisted in the logic of the program whenever needed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Existing features enhancement"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Implemented Training and Attendance classes (Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/63[#63])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Added the Gender attribute (Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/130[#130])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Documentation"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Added documentation for `undo` and `redo` for both User Guide and Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "(Pull requests https://github.com/AY1920S1-CS2103T-T12-3/main/pull/188[#188],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/219[#219])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Standardised product screenshots for `clear` and `help` in User Guide to make it more reader-friendly"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "(Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/223[#223])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Fixed icons bugs and improved on alignment in User Guide and Developer Guide"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "(Pull requests https://github.com/AY1920S1-CS2103T-T12-3/main/pull/242[#242],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/243[#243])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Community"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Reviewed PRs with non-trivial review comments (Pull requests"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/210[#210],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/pull/225[#225])"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Commented and provided suggestions on other team\u0027s PR"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "(https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/29[Review])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "** Reported bugs and suggestions for other teams (Bug reports and suggestions: https://github.com/junhuplim/ped/issues/5[1], https://github.com/junhuplim/ped/issues/8[2],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "https://github.com/junhuplim/ped/issues/9[3])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "This section showcases my contribution to the User Guide. They showcase my ability to write"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "documentation targeting end-users."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "{Start of extract from User Guide}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "{End of extract from User Guide}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "This section showcases my contribution to the Developer Guide. They showcase my ability to write technical"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "{Start of extract from Developer Guide}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "{End of extract from Developer Guide}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 126
    }
  },
  {
    "path": "docs/team/shawnlsj97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d Shawn Lee Shi Jie - Project Portfolio for Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This document details my contribution to the team project, **Athletick**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d About the team"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Athletick** was completed by 4 other students and myself. We are second-year computer science undergraduates from the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Athletick** is a team management desktop application for coaches and team captains of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "timing-based performance sports. **Athletick** provides them with athlete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "information managing, attendance tracking and performance monitoring. This enables them to better manage their team, plan for trainings and prepare for upcoming competitions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Athletick** was developed as part of a requirement for our second-year software engineering"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "module, https://nusmods.com/modules/CS2103T/software-engineering[CS2103T]. The project was completed over a period of  six weeks. We were tasked to morph an https://se-education.org/addressbook-level3/[application] that manages contacts into an application that manages something else. As part of the project constraints, the input to **Athletick** needs to be primarily Command-Line Interface (CLI), where the user interacts with **Athletick** by issuing lines of commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "NOTE: This symbol indicates important information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`command`:: A grey highlight (called a mark-up) indicates that this is a command that can be typed into the command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "line and executed by the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`[green]#component#`:: Green text with grey highlight indicates a component, class, object or method in the architecture of the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section contains a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "**Enhancement Added**: I added the ability to display training and performance records in the form of a calendar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* What it does"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** The `view calendar` and `calendar MMYYYY` commands allow users display a monthly calendar indicating which days contain training and performance records."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** The `calendar DDMMYYYY` command allows users to display training and performance records recorded on a specific date in the form of tables. The overall team attendance rate is displayed in the form of a pie chart as well."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Justification"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Being able to keep track of when training and performance records were recorded is important for coaches and captains as it allows them to find out what happened on a specific date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** The use of a calendar to display this information is neat and easy to navigate, which makes the feature more user-friendly."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Highlights"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** This enhancement provides a platform for further development of date-related features, such as"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "the planning of training programmes in advance. The implementation was also challenging because it required the `[green]#Training#` and `[green]#Performance#` features to incorporate a date for the calendar to utilise and the construction of a calendar is complex."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dshawnlsj97\u0026tabRepo\u003dAY1920S1-CS2103T-T12-3%2Fmain%5Bmaster%5D[RepoSense]] [https://github.com/AY1920S1-CS2103T-T12-3/main[GitHub repository]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*Other contributions*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Project management"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Managed releases https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.1[v1.1], https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.2[v1.2], https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.2.5[v1.2.5], https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.3.1[v1.3.1] and https://github.com/AY1920S1-CS2103T-T12-3/main/releases/tag/v1.3.2[v1.3.2] (5 releases) on GitHub."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Served as the team\u0027s Integration Engineer, ensuring all features are integrated together smoothly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "for each project milestone submission."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Enhancements to existing features"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Implemented sorting of team list. (Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/62[#62])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Updated the GUI layout and color scheme. (Pull request https://github.com/AY1920S1-CS2103T-T12-3/main/pull/68[#68], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/87[#87], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/201[#201])"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Documentation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Added documentation for the `calendar`, `sort` and `view` commands in the User Guide. (Pull requests https://github.com/AY1920S1-CS2103T-T12-3/main/pull/124[#123], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/138[#138], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/214[#214])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Added documentation for the `calendar`, `sort` and `view` commands in the Developer Guide. (Pull requests https://github.com/AY1920S1-CS2103T-T12-3/main/pull/111[#111], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/220[#220])"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Came up with style guide for diagrams for team to adhere to. (https://docs.google.com/presentation/d/1JprrBR5HnnOQio1M9YEgheEYldplHqL18q4IQCGqyMk/edit#slide\u003did.p[Link])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S1-CS2103T-T12-3/main/pull/63[#63], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/64[#64], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/65[#65], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/81[#81], https://github.com/AY1920S1-CS2103T-T12-3/main/pull/91[#91]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Reported bugs and suggestions for other teams in the class: https://github.com/shawnlsj97/ped/issues?q\u003dis%3Aopen+is%3Aissue+label%3Atype.FunctionalityBug[Bug reports], https://github.com/shawnlsj97/ped/issues?q\u003dis%3Aopen+is%3Aissue+-label%3Atype.FunctionalityBug[Suggestions]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section displays my contributions to the user guide for the calendar feature. They showcase my ability to write documentation targeting end-users of our application."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[blue]#_Start of extract from User Guide_#"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar1]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar2]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar3]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[blue]#_End of extract from User Guide_#"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section displays my contributions to the developer guide for the calendar feature. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[blue]#_Start of extract from Developer Guide_#"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "[blue]#_End of extract from Developer Guide_#"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.storage.AthletickStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.storage.ImageStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.storage.JsonAthletickStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.storage.JsonPerformanceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.storage.JsonTrainingManagerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.storage.PerformanceStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.storage.TrainingManagerStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 3, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Athletick ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickStorage athletickStorage \u003d new JsonAthletickStorage(userPrefs.getAthletickFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        PerformanceStorage performanceStorage \u003d new JsonPerformanceStorage(userPrefs.getPerformanceFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManagerStorage trainingManagerStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new JsonTrainingManagerStorage(userPrefs.getAttendanceFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        ImageStorage imageStorage \u003d new ImageStorage(userPrefs.getImageFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        storage \u003d new StorageManager(athletickStorage, performanceStorage, trainingManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        imageStorage.createImageFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s athletick data"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * The data from the sample athletick will be used instead if"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * {@code storage}\u0027s athletick data is not found, or an empty athletick will be"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * used instead if errors occur when reading {@code storage}\u0027s athletick data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Optional\u003cReadOnlyAthletick\u003e athletickOptional;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ReadOnlyAthletick initialAthletick;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ReadOnlyAthletick initialData;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            athletickOptional \u003d storage.readAthletick();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (!athletickOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                logger.info(\"Data file for Athletick not found. Will be starting with a sample \" + \"team list\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            initialAthletick \u003d athletickOptional.orElseGet(SampleDataUtil::getSampleAthletick);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            initialData \u003d athletickOptional.orElseGet(SampleDataUtil::getSampleAthletick);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"Data file for Athletick not in the correct format. Will be starting with an \" + \"empty team list\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            initialAthletick \u003d new Athletick();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            logger.warning(\"Problem while reading from Athletick file. Will be starting with an empty \" + \"team list\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            initialAthletick \u003d new Athletick();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Optional\u003cReadOnlyPerformance\u003e performanceOptional;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ReadOnlyPerformance initialEventsList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            performanceOptional \u003d storage.readEvents();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (!performanceOptional.isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                logger.info(\"Data file for EventList not found. Will be starting with a sample EventList\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialEventsList \u003d performanceOptional.orElseGet(SampleDataUtil::getSamplePerformance);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    \"Data file for EventList not in the correct format. Will be starting with empty EventList\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialEventsList \u003d new Performance();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.warning(\"Problem while reading from EventList file. Will be starting with an empty EventList\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialEventsList \u003d new Performance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Optional\u003cTrainingManager\u003e attendanceOptional;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager initialTrainingManager;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendanceOptional \u003d storage.readTrainingManager();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (!attendanceOptional.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Attendance\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            initialTrainingManager \u003d attendanceOptional.orElse(new TrainingManager());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Attendance\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            initialTrainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Attendance\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            initialTrainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new ModelManager(initialAthletick, initialEventsList, initialTrainingManager, userPrefs, history);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * file path, or a new {@code UserPrefs} with default configuration if errors"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * occur when reading from the file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty team list\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        logger.info(\"Starting Athletick \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Athletick ] \" + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 37,
      "ChangUo79": 3,
      "hellodommy": 19,
      "jeunhoe": 24,
      "junhuplim": 2,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String LOG_FILE \u003d \"athletick.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @see seedu.address.model.Model#getAthletick()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ReadOnlyAthletick getAthletick();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    Person getPerson();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    String getPersonAttendance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    ArrayList\u003cEvent\u003e getAthleteEvents();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "ChangUo79": 8,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.AthletickParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final AthletickParser athletickParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletickParser \u003d new AthletickParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Command command \u003d athletickParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d model.getHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (model.commandUnderTraining(command) || command instanceof EditCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            history.pushTrainingList(model.getTrainingsDeepCopy(model.getTrainingManager().getTrainings()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            history.pushPerformances(model.getPerformanceDeepCopy(model.getPerformance()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (model.commandUnderPerformance(command)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            history.pushPerformances(model.getPerformanceDeepCopy(model.getPerformance()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (command instanceof ClearCommand) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            history.pushPerformances(model.getPerformanceDeepCopy(model.getPerformance()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            history.pushTrainingList(model.getTrainingsDeepCopy(model.getTrainingManager().getTrainings()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        history.pushCommand(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        history.pushAthletick(model.getAthletickDeepCopy());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            storage.saveAthletick(model.getAthletick());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            storage.saveEvents(model.getPerformance());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            storage.saveTrainingManager(model.getTrainingManager());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ReadOnlyAthletick getAthletick() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model.getAthletick();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return model.selectPerson();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public String getPersonAttendance() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return model.getTrainingManager().getPersonAttendanceRateString(getPerson());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAthleteEvents() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return model.getAthleteEvents(getPerson());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model.getAthletickFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 9,
      "ChangUo79": 16,
      "jeunhoe": 4,
      "hellodommy": 1,
      "junhuplim": 15,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the athlete \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"[\" + PREFIX_IMAGE + \"IMAGE]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TAG + \"captain \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TAG + \"freestyle \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + PREFIX_IMAGE + \"profile_pic.png\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Add \" + toAdd + \"\u0027 Command\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "ChangUo79": 2,
      "hellodommy": 4,
      "junhuplim": 10,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Shows attendance of a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendance\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \": Checks attendance of person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance shown.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Index of person identified."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of AttendanceCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param index Sets Index of person identified to {@code index}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes AttendanceCommand. Displays the attendance of Person specified by the index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Outcome of executed command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws CommandException Thrown when specified index is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Person person \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(person.getName().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(\": \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(model.getPersonAttendanceRateString(person));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new CommandResult(result.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Indicates whether an AttendanceCommand can be undone."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Returns false as a AttendanceCommand is not undoable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Attendance Command\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 70,
      "junhuplim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Allows user to navigate the date of the calendar and view training and performance details on a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * specified date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"calendar\" + \": Navigates the calendar feature. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"The calendar command has 2 possible variations.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"1) Specify month and year to view calendar for particular month.\\nParameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"MMYYYY\\nExample: calendar 062019\\n2) Specify day, month and year to view details for \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"particular date.\\nParameters: DDMMYYYY\\nExample: calendar 09062019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_1 \u003d \"Viewing details for: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_2 \u003d \"Viewing calendar for: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"You have provided an invalid date.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final AthletickDate date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarCommand(AthletickDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        switch (date.getType()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String resultMsg \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    MESSAGE_SUCCESS_1 + date.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CommandResult(resultMsg, new Feature(\"calendar\"), date, model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String resultMsg2 \u003d MESSAGE_SUCCESS_2 + date.getMth() + \" \" + date.getYear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CommandResult(resultMsg2, new Feature(\"calendar\"), date, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof CalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 date.equals(((CalendarCommand) other).date));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Calendar Command\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 62,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Clears the address book and attendance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book and attendance has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.setAthletick(new Athletick());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model.resetTrainingManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.setPerformance(new Performance());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Clear Command\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "hellodommy": 2,
      "jeunhoe": 3,
      "junhuplim": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * An undoable command is a command that can be undone"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return a boolean value of whether the command is undoable"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public abstract boolean isUndoable();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Feature feature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /** All data in application should be cleared and calendar should refresh. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final boolean clear;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean clear) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.clear \u003d clear;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * showHelp}, {@code exit}, {@code clear} and {@code model}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param feedbackToUser String to display to user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param showHelp Boolean indicating if command is a help command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param exit Boolean indicating if command is an exit command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param clear Boolean indicating if command is a clear command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Model representing state of Athletick"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean clear,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                         Model model) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, showHelp, exit, clear);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * featureToDisplay} and {@code model}, and other fields set to their default value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, Feature featureToDisplay, Model model) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.feature \u003d featureToDisplay;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code date}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and {@code model}, and other fields set to their default value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param feedbackToUser String to display to user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Model representing state of Athletick"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, Feature feature, AthletickDate date, Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.feature \u003d feature;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * featureToDisplay}, {@code model}, {@code eventName}, and other fields set to their default value."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * For use in viewing records command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult(String feedbackToUser, Feature featureToDisplay, Model model, String eventName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.feature \u003d featureToDisplay;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * selectedPerson}, and other fields set to their default value."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, Person selectedPerson) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.person \u003d selectedPerson;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Feature getFeature() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return feature;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean isClear() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return clear;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 clear \u003d\u003d otherCommandResult.clear;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, clear);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 86,
      "hellodommy": 15,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Deletes a person, event, or training."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\nTo delete a person,\\n\" + DeletePersonCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"\\nTo delete an event,\\n\" + DeleteEventCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"\\nTo delete a trainng,\\n\" + DeleteTrainingCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"\\nTo delete a record, \\n\" + DeleteRecordCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Delete Command\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 7,
      "junhuplim": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Deletes a event identified using its name in performance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DeleteEventCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + FLAG_EVENT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \": Deletes the event identified by the event name as seen in the performance view.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Parameters: EVENT_NAME (must exist in performance)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + FLAG_EVENT + \" freestyle 50m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted event: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Event targetEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeleteEventCommand(Event targetEvent) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.targetEvent \u003d targetEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!model.hasEvent(targetEvent)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(Event.MESSAGE_NO_SUCH_EVENT, targetEvent.getName()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.deleteEvent(targetEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, targetEvent.getName()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Feature(\"performance\"), model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u0026\u0026 targetEvent.equals(((DeleteEventCommand) other).targetEvent)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Delete \" + targetEvent + \"\u0027 Command\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "hellodommy": 44,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DeletePersonCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + FLAG_PERSON"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + FLAG_PERSON + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeletePersonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.personToDelete \u003d personToDelete;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof DeletePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Delete \" + personToDelete + \"\u0027 Command\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 50,
      "junhuplim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRecordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Deletes a record of an event from a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DeleteRecordCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + FLAG_RECORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \": Deletes the performance record of a certain event, on a certain day for the person identified by the \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Parameters: INDEX \" + PREFIX_EVENT + \"EVENT_NAME \" + PREFIX_DATE + \"DDMMYYYY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + FLAG_RECORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + PREFIX_EVENT + \"freestyle 50m \" + PREFIX_DATE + \"02102019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_NO_RECORDS_ON_DAY \u003d \"%1$s has no records on %2$s.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Please make sure you have typed in the date correctly.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Record for %1$s on %2$s under %3$s event has been successfully \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"deleted.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Person athlete;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeleteRecordCommand(Index index, String eventName, AthletickDate date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if the event exists, and if there are any records to be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void checkEvent(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!model.hasEvent(new Event(eventName))) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(Event.MESSAGE_NO_SUCH_EVENT, eventName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!model.getEvent(eventName).doesAthleteHavePerformanceOn(date, athlete)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_RECORDS_ON_DAY, athlete.getName().fullName, date));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        athlete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        checkEvent(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.deleteRecord(eventName, athlete, date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, athlete.getName().fullName, date, eventName));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(other instanceof DeleteRecordCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteRecordCommand d \u003d (DeleteRecordCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return eventName.equals(d.eventName)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u0026\u0026 date.equals(d.date)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u0026\u0026 index.equals(d.index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Delete Performance \" + this.eventName + \" \" + this.date + \"\u0027 Command\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 96,
      "junhuplim": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTrainingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_TRAINING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.model.date.AthletickDate.DATE_FORMAT_TYPE_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Deletes a training identified by the {@code date}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DeleteTrainingCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + FLAG_TRAINING"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \": Deletes the training identified by the date.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Parameters: \" + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Date must be in the format: \" + DATE_FORMAT_TYPE_ONE + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + FLAG_TRAINING + \" \" + PREFIX_DATE + \"20102019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_DELETE_TRAINING_SUCCESS \u003d \"Deleted training on %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_NO_TRAINING_ON_DATE \u003d \"No training found on %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final AthletickDate date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Training trainingToBeDeleted;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public DeleteTrainingCommand(AthletickDate date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (model.hasTrainingOn(date)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Training trainingToBeDeleted \u003d model.deleteTrainingOnDate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.trainingToBeDeleted \u003d trainingToBeDeleted;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_TRAINING_ON_DATE, date));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        date.setType(2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRAINING_SUCCESS, date),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new Feature(\"calendar\"), date, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                || (other instanceof DeleteTrainingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                \u0026\u0026 date.equals(((DeleteTrainingCommand) other).date)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Delete \" + trainingToBeDeleted + \"\u0027 Command\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "jeunhoe": 43,
      "hellodommy": 2,
      "junhuplim": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"[\" + PREFIX_IMAGE + \"IMAGE]\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.editedPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model.editPersonTrainingRecords(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.editPersonPerformanceRecords(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Photo updatedPhoto \u003d editPersonDescriptor.getPhoto().orElse(personToEdit.getPhoto());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedGender, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            updatedPhoto);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        private Photo photo;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            setPhoto(toCopy.photo);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, gender, address, tags, photo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        public void setPhoto(Photo photo) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            this.photo \u003d photo;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        public Optional\u003cPhoto\u003e getPhoto() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return Optional.ofNullable(photo);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Edit \" + editedPerson + \"\u0027 Command\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 14,
      "hellodommy": 2,
      "jeunhoe": 1,
      "junhuplim": 27,
      "-": 221
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Adds an event for the performance recording."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new event with the specified name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Event Created: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"%1$s event already exists in Athletick.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates an EventCommand to add the specified event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public EventCommand(Event event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_EVENT, toAdd.getName()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Feature(\"performance\"), model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            || (other instanceof EventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Add Event \" + toAdd + \"\u0027 Command\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "hellodommy": 53,
      "junhuplim": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Exit Command\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "junhuplim": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Finds and lists all persons in address book whose tag matches the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who has tags matching the searched \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" friends\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final TagMatchesPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public FilterCommand(TagMatchesPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates the message in the event that no tag has been found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @return Suggestion of tags that exist which the user can search instead."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getNoMatchMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        StringBuilder message \u003d new StringBuilder(\"There are no tags found matching your query.\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        message.append(\"Try these tags instead: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Set\u003cString\u003e uniqueTags \u003d new HashSet\u003cString\u003e(Tag.getAllTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (String tagName : uniqueTags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            message.append(tagName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(getNoMatchMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Filter Command\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 62,
      "junhuplim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Find Command\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 8,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Help Command\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "junhuplim": 7,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"List Command\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PerformanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Records a player\u0027s performance under a certain event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"performance\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Performance record added for %1$s under %2$s event, on \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"%3$s with a timing of %4$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a player performance for an event to Athletick.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_EVENT + \"EVENT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_DATE + \"DDMMYYYY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TIMING + \"SECONDS\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_EVENT + \"freestyle 50m \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_DATE + \"02102019 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TIMING + \"30.32\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String event;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final AthletickDate date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Timing time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a PerformanceCommand to add the record under the event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public PerformanceCommand(Index index, String event, AthletickDate date, Timing time) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event createdEvent \u003d new Event(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // if event does not exist"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!model.hasEvent(createdEvent)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(Event.MESSAGE_NO_SUCH_EVENT, event));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Person athlete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // if record already exists (same athlete, same event, same day)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (model.getEvent(event).doesAthleteHavePerformanceOn(date, athlete)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                Event.MESSAGE_RECORD_EXISTS, athlete.getName().fullName, date, event));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Record record \u003d new Record(date, time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        date.setType(2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.addRecord(event, athlete, record);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String.format(MESSAGE_SUCCESS, athlete.getName().fullName, event, date, time),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new Feature(\"calendar\"), date, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Add Performance \" + this.event + \" \" + this.date + \" \" + this.time + \"\u0027 Command\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "hellodommy": 85,
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Redo the previous undone Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String MESSAGE_FAILURE_EMPTY_STACK \u003d \"Redo Command Failure: No available \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \"commands to redo.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Redo Command Failure:\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \" Redo command can only be executed after a undo Command.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d model.getHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (history.isRedoneEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE_EMPTY_STACK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (!(history.getLatestCommand() instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Command redoneCommand \u003d model.redo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (redoneCommand instanceof TrainingCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + redoneCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                            (TrainingCommand) redoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else if (redoneCommand instanceof DeleteTrainingCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + redoneCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                            (DeleteTrainingCommand) redoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else if (redoneCommand instanceof PerformanceCommand) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + redoneCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                            (PerformanceCommand) redoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else if (redoneCommand instanceof ClearCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + redoneCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    + \" Success!\", new Feature(\"calendar\"), model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + redoneCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    + \" Success!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Redo Command\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "junhuplim": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * Selects a person identified using its displayed index and displaying the personal information of the person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Selects a person by their position in the list\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"and displays their personal information.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"Parameters : NAME\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Person selected!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Person selectedPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        selectedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        model.storePerson(selectedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model.getTrainingManager().getPersonAttendanceRateString(selectedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(MESSAGE_SELECT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                selectedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Select Command\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "ChangUo79": 50,
      "jeunhoe": 1,
      "junhuplim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Sorts all persons in the team list according to alphabetical order. Sorting is case insensitive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted your team list in alphabetical order.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.sortAthletickByName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Sort Command\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 24,
      "junhuplim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrainingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Adds a training session of players specified by the indexes on the specified date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public abstract class TrainingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"training\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String TRAINING_ADD_SUCCESS \u003d \"Training successfully added on %s.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String TRAINING_REPLACE_SUCCESS \u003d \"Training successfully replaced on %s.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Creates a TrainingCommand to add a training session on {@code date} using the {@code indexList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date Date of training."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param indexList List on indexes used to indicate people who were present/absent."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommand(AthletickDate date, List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(indexList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.indexList \u003d indexList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Getter method of date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Date used to create Training."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Getter method of indexList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return List of Index used to create Training."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cIndex\u003e getIndexList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return indexList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes the TrainingCommand which adds a training to the TrainingManger in model."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param model {@code Model} where Training is saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Outcome of executed command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws CommandException Thrown when specified indexes are invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Indicates whether a TrainingCommand can be undone."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Returns true as a TrainingCommand is undoable."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Add Training Command\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Checks with the model if person indexes are valid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    protected static void checkIndexesValid(List\u003cIndex\u003e indexes, Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 79,
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrainingCommandAbsent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.model.date.AthletickDate.DATE_FORMAT_TYPE_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Adds a training session of everyone except players specified by the indexes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * on the specified date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingCommandAbsent extends TrainingCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String ABSENT_FLAG \u003d \"-a\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + ABSENT_FLAG"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \": Adds training session of everyone except people identified by the index numbers used in the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"displayed person \" + \"list at\" + \" the specified date.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"If no date is specified, the current date is used.\\nParameters: \" + \"#/INDEX [INDEX] [INDEX] [d/DATE]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Date must be in the format: \" + DATE_FORMAT_TYPE_ONE + \"\\nIndex must be a positive integer\\nExample: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + COMMAND_WORD + \" \" + ABSENT_FLAG + \" \" + PREFIX_DATE + \"20102019 \" + PREFIX_INDEXES + \" 1 4 5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Training trainingToAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a TrainingCommandAbsent to add a training session on {@code date}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * using the {@code indexList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param date      of training."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param indexList List of index indicating absentees."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommandAbsent(AthletickDate date, List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(date, indexList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Executes the TrainingCommandAbsent which adds a training to the Attendance in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * model. People in indexList are marked as absent while everyone else is marked"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * as present."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param model {@code Model} where Training is saved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Outcome of executed command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws CommandException Thrown when specified indexes are invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date \u003d super.getDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cIndex\u003e indexes \u003d super.getIndexList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Check if indexes are valid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        checkIndexesValid(indexes, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Create training"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d createTrainingByAbsent(date, model, indexes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.trainingToAdd \u003d training;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (model.hasTrainingOn(super.getDate())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result \u003d new CommandResult(String.format(TRAINING_REPLACE_SUCCESS, date),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    new Feature(\"calendar\"), date, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result \u003d new CommandResult(String.format(TRAINING_ADD_SUCCESS, date), new Feature("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"calendar\"), date, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model.addTraining(training);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        date.setType(2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Creates a training session using a list of indexes and marks them as absent."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date    Date of training."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param indexes Indexes of absentees."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Created training session."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static Training createTrainingByAbsent(AthletickDate date, Model model, List\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        List\u003cPerson\u003e allPeople \u003d model.getAthletick().getPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e trainingAttendance \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Set all people in the address book to true, indicating that they attended."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person : allPeople) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendance.put(person, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Filter indexes from the lastShownList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e attendedPersons \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Person personWhoAttended \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendedPersons.add(personWhoAttended);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Change the value in trainingAttendance of these people to false, indicating"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // that they attended."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person : attendedPersons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendance.put(person, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new Training(date, trainingAttendance);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Add \" + trainingToAdd + \"\u0027 Command\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 17,
      "jeunhoe": 88,
      "hellodommy": 1,
      "junhuplim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrainingCommandPresent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.model.date.AthletickDate.DATE_FORMAT_TYPE_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Adds a training session of players specified by the indexes on the specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingCommandPresent extends TrainingCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \": Adds training session of people identified by the index numbers used in the displayed person list at\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \" the specified date.\\nIf no date is specified, the current date is used.\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"#/INDEX [INDEX] [INDEX] [d/DATE]\\nDate must be in the format: \" + DATE_FORMAT_TYPE_ONE + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"Index must be a positive integer\\nExample: \" + COMMAND_WORD + \" \" + PREFIX_DATE + \"20102019 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + PREFIX_INDEXES + \" 1 4 5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Training trainingToAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a TrainingCommandPresent to add a training session on {@code date}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * using the {@code indexList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date      Date of training."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param indexList List of index indicating those who were present."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommandPresent(AthletickDate date, List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(date, indexList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Executes the TrainingCommandPresent which adds a training to the Attendance"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * in model. People in indexList are marked as present while everyone else is"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * marked as absent."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param model {@code Model} where Training is saved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Outcome of executed command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws CommandException Thrown when specified indexes are invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date \u003d super.getDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cIndex\u003e indexes \u003d super.getIndexList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Check if indexes are valid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        checkIndexesValid(indexes, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Create training"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d createTrainingByPresent(date, model, indexes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.trainingToAdd \u003d training;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (model.hasTrainingOn(super.getDate())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result \u003d new CommandResult(String.format(TRAINING_REPLACE_SUCCESS, date),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    new Feature(\"calendar\"), date, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result \u003d new CommandResult(String.format(TRAINING_ADD_SUCCESS, date), new Feature("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"calendar\"), date, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model.addTraining(training);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        date.setType(2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Creates a training session using a list of indexes and marks them as present."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date    Date of training."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param indexes Indexes of those who attended."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Created training session."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static Training createTrainingByPresent(AthletickDate date, Model model, List\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        List\u003cPerson\u003e allPeople \u003d model.getAthletick().getPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e trainingAttendance \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Set all people in the address book to did not attend"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person : allPeople) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendance.put(person, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Filter indexes from the lastShownList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e attendedPersons \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Person personWhoAttended \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendedPersons.add(personWhoAttended);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Change the value in trainingAttendance of these people to true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person : attendedPersons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendance.put(person, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new Training(date, trainingAttendance);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"\u0027Add \" + trainingToAdd + \"\u0027 Command\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 18,
      "jeunhoe": 87,
      "junhuplim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Undo the most recent undoable Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Undo Command Failure:\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \" No available commands to be undone. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \" Commands that can be undone is as follows: add, delete, edit, clear and training.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d model.getHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (history.isUndoneEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        while (!history.getLatestCommand().isUndoable()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (history.isUndoneEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                history.getCommands().pop();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                history.getAddressBooks().pop();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (history.isUndoneEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Command undoneCommand \u003d model.undo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (undoneCommand instanceof TrainingCommand) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + undoneCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        (TrainingCommand) undoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (undoneCommand instanceof DeleteTrainingCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + undoneCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        (DeleteTrainingCommand) undoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (undoneCommand instanceof PerformanceCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + undoneCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        (PerformanceCommand) undoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (undoneCommand instanceof DeleteRecordCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + undoneCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                + \" Success!\", new Feature(\"calendar\"), ("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        (DeleteRecordCommand) undoneCommand).getDate(), model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (undoneCommand instanceof ClearCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + undoneCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \" Success!\", new Feature(\"calendar\"), model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + undoneCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \" Success!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Undo Command\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "junhuplim": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Allows user to view calendar, attendance or performance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: 1) \" + COMMAND_WORD + \" calendar 2) \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + COMMAND_WORD + \" attendance 3) \" + COMMAND_WORD + \" performance 4)\" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"records EVENT_NAME\\n\" + \"Example: \" + COMMAND_WORD + \" calendar\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + COMMAND_WORD + \" records freestyle 50m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CALENDAR \u003d \"Viewing your calendar\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ATTENDANCE \u003d \"Viewing your team\u0027s attendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PERFORMANCE \u003d \"Here are your events stored Athletick.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"To view the performance for an event, type in the command: records EVENT_NAME\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_RECORDS \u003d \"Here are the records for %1$s event.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_INVALID_FEATURE \u003d \"You have provided an invalid feature.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final Feature feature;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ViewCommand(Feature feature) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.feature \u003d feature;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        switch (feature.getName()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_CALENDAR, feature, model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"attendance\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ATTENDANCE, feature, model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"performance\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_PERFORMANCE, feature, model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case \"records\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            boolean hasEvent \u003d model.hasEvent(new Event(feature.getEventName()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (!hasEvent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                throw new CommandException(String.format(Event.MESSAGE_NO_SUCH_EVENT, feature.getEventName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_RECORDS, feature.getEventName()), feature, model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    feature.getEventName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FEATURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u0026\u0026 feature.equals(((ViewCommand) other).feature));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"View Command\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 43,
      "hellodommy": 16,
      "jeunhoe": 2,
      "junhuplim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    PREFIX_TAG, PREFIX_IMAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Photo photo;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IMAGE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            photo \u003d new Photo();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            photo \u003d ParserUtil.parsePhoto(argMultimap.getValue(PREFIX_IMAGE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Person person \u003d new Person(name, phone, email, gender, address, tagList, photo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 8,
      "junhuplim": 7,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AthletickParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AthletickParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case TrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new TrainingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case AttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new AttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case PerformanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new PerformanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 13,
      "ChangUo79": 4,
      "jeunhoe": 8,
      "hellodommy": 14,
      "junhuplim": 7,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Parses input arguments and creates a new AttendanceCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceCommandParser implements Parser\u003cAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Parses the input arguments and returns an AttendanceCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param userInput Parsed user arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return AttendanceCommand with index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws ParseException Thrown when command format is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new AttendanceCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalendarCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Parses input arguments and creates a new CalendarCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommandParser implements Parser\u003cCalendarCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalendarCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and returns a CalendarCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (trimmedArgs.length() \u003d\u003d 6 || trimmedArgs.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            AthletickDate date \u003d ParserUtil.parseDate(trimmedArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CalendarCommand(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final Prefix PREFIX_IMAGE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Prefix PREFIX_INDEXES \u003d new Prefix(\"#/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /* Flag definitions */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Flag FLAG_PERSON \u003d new Flag(\"-p\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Flag FLAG_EVENT \u003d new Flag(\"-e\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Flag FLAG_TRAINING \u003d new Flag(\"-t\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Flag FLAG_ABSENT \u003d new Flag(\"-a\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Flag FLAG_RECORD \u003d new Flag(\"-r\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 1,
      "jeunhoe": 3,
      "hellodommy": 5,
      "junhuplim": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_EVENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_TRAINING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeleteRecordCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.DeleteTrainingCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parses input arguments and creates a new appropriate DeleteCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteCommand deleteCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String flag \u003d getFlag(trimmedArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (flag.equals(FLAG_PERSON.getFlag())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            deleteCommand \u003d parsePerson(trimmedArgs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (flag.equals(FLAG_EVENT.getFlag())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            deleteCommand \u003d parseEvent(trimmedArgs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (flag.equals(FLAG_TRAINING.getFlag())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            deleteCommand \u003d parseTraining(trimmedArgs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (flag.equals(FLAG_RECORD.getFlag())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            deleteCommand \u003d parseRecord(trimmedArgs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a DeletePersonCommand object if the flag given is for a person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeletePersonCommand parsePerson(String args) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        args \u003d removeFlag(args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new DeletePersonCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a DeleteRecordCommand object if the flag given is for a record."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeleteRecordCommand parseRecord(String args) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        args \u003d args.substring(2).trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EVENT, PREFIX_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index index \u003d parseIndex(argMultimap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String eventName \u003d ParserUtil.parseEvent(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        AthletickDate athletickDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new DeleteRecordCommand(index, eventName, athletickDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses the index of the athlete for DeleteRecordCommand."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Index parseIndex(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a DeleteEventCommand object if the flag given is for an event."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeleteEventCommand parseEvent(String args) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        args \u003d removeFlag(args);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String eventName \u003d ParserUtil.parseEvent(args);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            Event event \u003d new Event(eventName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new DeleteEventCommand(event);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a DeleteTrainingCommand object if the flag given is for a training."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DeleteTrainingCommand parseTraining(String args) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        args \u003d removeFlag(args);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_DATE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                DeleteTrainingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        AthletickDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new DeleteTrainingCommand(date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Extracts the valid flag from the argument string."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getFlag(String args) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String[] stringArray \u003d args.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String flag \u003d stringArray[0].trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (flag.length() \u003c 2) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!Flag.isValidFlag(flag)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Removes the flag (-p, -e, or -t) from the argument string."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String removeFlag(String args) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return args.substring(2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true if prefixes doesn\u0027t contains empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 142,
      "jeunhoe": 13,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    PREFIX_TAG, PREFIX_IMAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            editPersonDescriptor.setPhoto(ParserUtil.parsePhoto(argMultimap.getValue(PREFIX_IMAGE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 4,
      "junhuplim": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parse input arguments and creates a new EventCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event event \u003d new Event(trimmedArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new EventCommand(event);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String[] tagQueries \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new FilterCommand(new TagMatchesPredicate(Arrays.asList(tagQueries)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_TRAINING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A flag that marks the beginning of a type that the command is applied to."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * E.g. \u0027-p\u0027 in \u0027delete -p 1\u0027."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(flag);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if the flag is either for person, event or training."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static boolean isValidFlag(String args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return args.equals(FLAG_PERSON.toString())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            || args.equals(FLAG_EVENT.toString())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            || args.equals(FLAG_TRAINING.toString())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            || args.equals(FLAG_RECORD.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Flag otherFlag \u003d (Flag) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return otherFlag.getFlag().equals(flag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code oneBasedIndexes} into a {@code List\u003cIndex\u003e} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if any index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String[] indexes \u003d oneBasedIndexes.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cIndex\u003e listOfIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (String indexString : indexes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Index parsedIndex \u003d parseIndex(indexString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            listOfIndexes.add(parsedIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return listOfIndexes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code featureName} into a {@code Feature} and returns it. Leading and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws ParseException if the specified feature name is invalid (not calendar/attendance/performance/records)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static Feature parseFeature(String input) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String[] inputArray \u003d input.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(inputArray[0].equals(\"calendar\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            | inputArray[0].equals(\"attendance\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            | inputArray[0].equals(\"performance\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            | inputArray[0].equals(\"records\"))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException(Feature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (inputArray[0].equals(\"records\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (inputArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                throw new ParseException(Feature.MESSAGE_NO_EVENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new Feature(inputArray[0], parseEvent(inputArray[1]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Feature(inputArray[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code date} into a {@code AthletickDate} and returns it. Leading and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the specified date is invalid (not length of 6 or 8)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static AthletickDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        switch (trimmedDate.length()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return parseDateTypeTwo(trimmedDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return parseDateTypeOne(trimmedDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String.format(AthletickDate.MESSAGE_CONSTRAINTS, AthletickDate.DATE_FORMAT_GENERAL));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code date} into a {@code AthletickDate} and returns it. Leading and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * trailing whitespaces will be trimmed. Used when date is in format DDMMYYYY."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws ParseException if the specified date is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static AthletickDate parseDateTypeOne(String date) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            date \u003d date.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (date.length() !\u003d 8) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                throw new java.text.ParseException(\"Incorrect date length\", 8);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return constructAthletickDateTypeOne(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException(AthletickDate.WRONG_DATE_FORMAT + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + String.format(AthletickDate.MESSAGE_CONSTRAINTS, AthletickDate.DATE_FORMAT_TYPE_ONE) + \"\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + AthletickDate.MONTH_CONSTRAINTS + \"\\n\" + AthletickDate.YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs an {@code AthletickDate} of type 1 from {@code date}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date Specified date"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return AthletickDate Date used by application"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws java.text.ParseException if specified date is invalid"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static AthletickDate constructAthletickDateTypeOne(String date) throws java.text.ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        SimpleDateFormat fullDate \u003d new SimpleDateFormat(\"ddMMyyyy\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        fullDate.setLenient(false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Date d \u003d fullDate.parse(date);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(d));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int month \u003d Integer.parseInt(new SimpleDateFormat(\"M\").format(d));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int year \u003d Integer.parseInt(new SimpleDateFormat(\"yyyy\").format(d));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String mth \u003d new SimpleDateFormat(\"MMMM\").format(d);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new AthletickDate(day, month, year, 1, mth);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code date} into a {@code AthletickDate} and returns it. Leading and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * trailing whitespaces will be trimmed. Used when date is in format MMYYYY."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws ParseException if the specified date is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static AthletickDate parseDateTypeTwo(String date) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            date \u003d date.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (date.length() !\u003d 6) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                throw new java.text.ParseException(\"Incorrect date length\", 6);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return constructAthletickDateTypeTwo(date);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new ParseException(AthletickDate.WRONG_DATE_FORMAT + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + String.format(AthletickDate.MESSAGE_CONSTRAINTS, AthletickDate.DATE_FORMAT_TYPE_TWO) + \"\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + AthletickDate.MONTH_CONSTRAINTS + \"\\n\" + AthletickDate.YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs an {@code AthletickDate} of type 2 from {@code date}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date Specified date"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return AthletickDate Date used by application"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws java.text.ParseException if specified date is invalid"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static AthletickDate constructAthletickDateTypeTwo(String date) throws java.text.ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        SimpleDateFormat monthYear \u003d new SimpleDateFormat(\"MMyyyy\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        monthYear.setLenient(false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Date d \u003d monthYear.parse(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int month \u003d Integer.parseInt(new SimpleDateFormat(\"M\").format(d));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int year \u003d Integer.parseInt(new SimpleDateFormat(\"yyyy\").format(d));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String mth \u003d new SimpleDateFormat(\"MMMM\").format(d);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new AthletickDate(0, month, year, 2, mth);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}. Leading and trailing"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses {@code String event} into a {@code Event}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static String parseEvent(String event) throws ParseException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedEvent \u003d event.trim().toLowerCase();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!Event.isValidName(trimmedEvent)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(Event.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return trimmedEvent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses {@code String timing} into a {@code Timing}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static Timing parseTiming(String timing) throws ParseException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedTiming \u003d timing.trim();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!Timing.isValidTiming(trimmedTiming)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(Timing.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Timing(trimmedTiming);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses a {@code String photo} into an {@code Photo}. Leading and trailing"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * @throws ParseException if the given {@code photo} is invalid."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static Photo parsePhoto(String imageFilePath) throws ParseException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(imageFilePath);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String trimmedPath \u003d imageFilePath.trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!Photo.isValidFilePath(trimmedPath)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new ParseException(Photo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!Photo.isFileExist(trimmedPath)) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new ParseException(Photo.NO_FILE_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new Photo(trimmedPath);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 98,
      "ChangUo79": 16,
      "jeunhoe": 40,
      "hellodommy": 43,
      "junhuplim": 12,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PerformanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommandParser implements Parser\u003cPerformanceCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public PerformanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT, PREFIX_DATE, PREFIX_TIMING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT, PREFIX_DATE, PREFIX_TIMING)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PerformanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index index \u003d parseIndex(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String event \u003d ParserUtil.parseEvent(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date \u003d ParserUtil.parseDateTypeOne(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Timing timing \u003d ParserUtil.parseTiming(argMultimap.getValue(PREFIX_TIMING).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new PerformanceCommand(index, event, date, timing);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses the index of the athlete whom the performance is added for."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Index parseIndex(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PerformanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 64,
      "jeunhoe": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PerformanceSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Prefix PREFIX_TIMING \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * Parses input arguments and creates a new SelectCommand Object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * and returns a SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrainingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_ABSENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommandAbsent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommandPresent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Parses input arguments and creates a new TrainingCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingCommandParser implements Parser\u003cTrainingCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Parses the input arguments and returns a TrainingCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param args Parsed user arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return TrainingCommandPresent or TrainingCommandAbsent."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws ParseException Thrown when indexes are not present or unrecognised arguments found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        boolean byAbsent \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String parsed;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (args.contains(FLAG_ABSENT.toString())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            byAbsent \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            parsed \u003d args.replaceAll(\"-a\", \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            parsed \u003d args;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(parsed, PREFIX_DATE, PREFIX_INDEXES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEXES) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (byAbsent) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                        TrainingCommandAbsent.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                        TrainingCommandPresent.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        indexList \u003d ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_INDEXES).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            date \u003d ParserUtil.parseDateTypeOne(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"ddMMyyyy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            date \u003d ParserUtil.parseDateTypeOne(dateFormat.format(new Date()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (byAbsent) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new TrainingCommandAbsent(date, indexList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new TrainingCommandPresent(date, indexList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Stream\u003cPrefix\u003e stream \u003d Stream.of(prefixes);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return stream.allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Feature feature \u003d ParserUtil.parseFeature(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new ViewCommand(feature);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Athletick.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.PersonNameComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Athletick implements ReadOnlyAthletick {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Athletick() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Athletick(ReadOnlyAthletick toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void resetData(ReadOnlyAthletick newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public UniquePersonList getPersons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.persons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sorts list of persons by name in alphabetical order ignoring case."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        persons.sortByName(new PersonNameComparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof Athletick // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 persons.equals(((Athletick) other).persons));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 14,
      "junhuplim": 3,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AttendanceRateEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Wrapper for attendance record that will be displayed in the Calendar. Each entry has a person and a string that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * indicates a person\u0027s attendance rate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceRateEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String attendanceRateString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceRateEntry(Person person, String attendanceRateString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendanceRateString \u003d attendanceRateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getAttendanceRateString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attendanceRateString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (other instanceof AttendanceRateEntry) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            AttendanceRateEntry casted \u003d (AttendanceRateEntry) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return this.person.equals(casted.getPerson())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    \u0026\u0026 this.attendanceRateString.equals(casted.getAttendanceRateString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns the user prefs\u0027 Athletick file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Path getAthletickFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the user prefs\u0027 Athletick file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void setAthletickFilePath(Path athletickFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Replaces Athletick data with the data in {@code athletick}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void setAthletick(ReadOnlyAthletick athletick);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns Athletick"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ReadOnlyAthletick getAthletick();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns HistoryManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    HistoryManager getHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of Athletick"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ReadOnlyAthletick getAthletickDeepCopy();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of Trainings under Attendance"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    List\u003cTraining\u003e getTrainingsDeepCopy(List\u003cTraining\u003e trainingsList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of HashMap under Training"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    HashMap\u003cPerson, Boolean\u003e deepCopyHashMap(HashMap\u003cPerson, Boolean\u003e mapToCopy);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of Performance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    ReadOnlyPerformance getPerformanceDeepCopy(ReadOnlyPerformance originalPerformance);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of Events under Performance"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    List\u003cEvent\u003e getEventsDeepCopy(List\u003cEvent\u003e originalEvents);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of HashMap under Event"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    Event getEventDeepCopy(Event originalEvent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of List of Record under Event"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    List\u003cRecord\u003e getRecordsDeepCopy(List\u003cRecord\u003e originalRecords);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns deep copy of Record under Event"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    Record getRecordDeepCopy(Record originalRecord);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns whether command is instanceof TrainingCommand or DeleteTrainingCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    boolean commandUnderTraining(Command command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns whether command is instanceof EventCommand/PerformanceCommand/DeleteEventCommand or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * DeleteRecordCommand"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    boolean commandUnderPerformance(Command command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns Command that is being undone"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    Command undo();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns Command that is being redone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    Command redo();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in Athletick."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * The person must exist in Athletick."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * {@code person} must not already exist in Athletick."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    Person selectPerson();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    void storePerson(Person person);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * {@code target} must exist in Athletick."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * person in Athletick."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Reorders Athletick in alphabetical order according to person\u0027s name."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void sortAthletickByName();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Adds {@code training} to the TrainingManager class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void addTraining(Training training);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Replaces all occurrences of person at {@code target} with {@code editedPerson} in training records."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void editPersonTrainingRecords(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Removes training on {@code date} from the TrainingManager."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    Training deleteTrainingOnDate(AthletickDate date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Gets a list of AttendanceEntry on {@code date}, where each entry indicates whether a person was present."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date Date of training."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return List of AttendanceEntry, where each entry indicates whether a person was present for training on date."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    List\u003cAttendanceEntry\u003e getTrainingAttendanceListOnDate(AthletickDate date);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns String representation of {@code person} attendance rate."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    String getPersonAttendanceRateString(Person person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns a list of AttendanceRateEntry, where each entry indicates the attendance rate of a person."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    List\u003cAttendanceRateEntry\u003e getAttendanceRateOfAll();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns the Training Manager."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    TrainingManager getTrainingManager();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Resets all data in the TrainingManager."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void resetTrainingManager();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Checks with Attendance if there was a Training on {@code date}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date Date of training."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean indicating if there was a training on {@code date}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    boolean hasTrainingOn(AthletickDate date);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Replaces performance data with the data in {@code performance}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void setPerformance(ReadOnlyPerformance performance);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Event getEvent(String eventName);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must exist in performance."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    ReadOnlyPerformance getPerformance();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void addRecord(String eventName, Person person, Record record);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void deleteRecord(String eventName, Person person, AthletickDate date);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    boolean hasPerformanceOn(AthletickDate date);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    ArrayList\u003cEvent\u003e getAthleteEvents(Person athlete);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void editPersonPerformanceRecords(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 20,
      "ChangUo79": 7,
      "hellodommy": 34,
      "jeunhoe": 51,
      "junhuplim": 57,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.DeleteRecordCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.DeleteTrainingCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents the in-memory model of Athletick data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final Athletick athletick;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final TrainingManager trainingManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Performance performance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private final HistoryManager history;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ReadOnlyAthletick readOnlyAthletick;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Person selectedPerson;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Initializes a ModelManager with the given athletick, performance, attendance and userPrefs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ModelManager(ReadOnlyAthletick athletick, ReadOnlyPerformance performance,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                        TrainingManager trainingManager, ReadOnlyUserPrefs userPrefs, HistoryManager history) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireAllNonNull(athletick, userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        logger.fine(\"Initializing with athletick: \" + athletick + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.athletick \u003d new Athletick(athletick);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performance \u003d new Performance(performance);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingManager \u003d trainingManager;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.athletick.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.history.init(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this(new Athletick(), new Performance(), new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return userPrefs.getAthletickFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setAthletickFilePath(Path athletickFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(athletickFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        userPrefs.setAthletickFilePath(athletickFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Athletick \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setAthletick(ReadOnlyAthletick athletick) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.athletick.resetData(athletick);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ReadOnlyAthletick getAthletick() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletick;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return athletick.hasPerson(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        athletick.removePerson(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        athletick.addPerson(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        athletick.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Person selectPerson() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void storePerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        selectedPerson \u003d person;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void sortAthletickByName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.athletick.sortByName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HistoryManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public HistoryManager getHistory() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.history;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ReadOnlyAthletick getAthletickDeepCopy() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        UniquePersonList persons \u003d athletick.getPersons();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick deepCopy \u003d new Athletick();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        deepCopy.getPersons().setPersons(persons);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return deepCopy;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cTraining\u003e getTrainingsDeepCopy(List\u003cTraining\u003e trainingsList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cTraining\u003e trainingsDeepCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Training training: trainingsList) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Training trainingDeepCopy \u003d new Training(training.getDate(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                deepCopyHashMap(training.getTrainingAttendance()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            trainingsDeepCopy.add(trainingDeepCopy);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return trainingsDeepCopy;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public HashMap\u003cPerson, Boolean\u003e deepCopyHashMap(HashMap\u003cPerson, Boolean\u003e mapToCopy) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e deepCopy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Map.Entry\u003cPerson, Boolean\u003e entry: mapToCopy.entrySet()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            deepCopy.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return deepCopy;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ReadOnlyPerformance getPerformanceDeepCopy(ReadOnlyPerformance originalPerformance) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cEvent\u003e originalEvents \u003d originalPerformance.getPerformance();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cEvent\u003e eventsCopy \u003d getEventsDeepCopy(originalEvents);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Performance performanceCopy \u003d new Performance();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        performanceCopy.setEvents(eventsCopy);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return performanceCopy;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cEvent\u003e getEventsDeepCopy(List\u003cEvent\u003e originalEvents) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cEvent\u003e eventsCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Event originalEvent: originalEvents) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            eventsCopy.add(getEventDeepCopy(originalEvent));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return eventsCopy;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Event getEventDeepCopy(Event originalEvent) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HashMap\u003cPerson, List\u003cRecord\u003e\u003e hashMapCopy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Map.Entry\u003cPerson, List\u003cRecord\u003e\u003e entry: originalEvent.getRecords().entrySet()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            hashMapCopy.put(entry.getKey(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                getRecordsDeepCopy(entry.getValue()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Event eventCopy \u003d new Event(originalEvent.getName(), hashMapCopy);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return eventCopy;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cRecord\u003e getRecordsDeepCopy(List\u003cRecord\u003e originalRecords) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cRecord\u003e recordsCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Record record: originalRecords) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            recordsCopy.add(getRecordDeepCopy(record));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return recordsCopy;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Record getRecordDeepCopy(Record originalRecord) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Record recordCopy \u003d new Record(originalRecord.getDate(), originalRecord.getTiming());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return recordCopy;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean commandUnderTraining(Command command) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return command instanceof TrainingCommand || command instanceof DeleteTrainingCommand;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean commandUnderPerformance(Command command) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return command instanceof EventCommand || command instanceof PerformanceCommand"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            || command instanceof DeleteEventCommand || command instanceof DeleteRecordCommand;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Command undo() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Command undoneCommand \u003d this.history.popLatestCommand();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyAthletick undoneAthletick \u003d this.history.popLatestAthletick();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.history.pushUndoneCommand(undoneCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.history.pushUndoneAthletick(undoneAthletick);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (commandUnderTraining(undoneCommand)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            this.history.undoTrainingStack(trainingManager, this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (commandUnderPerformance(undoneCommand)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.history.undoPerformanceStack(performance, this);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (undoneCommand instanceof EditCommand || undoneCommand instanceof ClearCommand) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.history.undoAthletickStack(athletick);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            this.history.undoTrainingStack(trainingManager, this);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.history.undoPerformanceStack(performance, this);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.history.undoAthletickStack(athletick);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneCommand;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Command redo() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Command redoneCommand \u003d this.history.popLatestUndoneCommand();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyAthletick redoneAthletick \u003d this.history.popLatestUndoneAthletick();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.history.getCommands().push(redoneCommand);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.history.getAddressBooks().push(redoneAthletick);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (commandUnderTraining(redoneCommand)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            this.history.redoTrainingStack(trainingManager, this);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (commandUnderPerformance(redoneCommand)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.history.redoPerformanceStack(performance, this);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (redoneCommand instanceof EditCommand || redoneCommand instanceof ClearCommand) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            this.history.redoTrainingStack(trainingManager, this);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.history.redoPerformanceStack(performance, this);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            athletick.resetData(redoneAthletick);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            athletick.resetData(redoneAthletick);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return redoneCommand;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletick.equals(other.athletick)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Training  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void addTraining(Training training) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingManager.addTraining(training);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void editPersonTrainingRecords(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingManager.editPersonTrainingRecords(target, editedPerson);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean hasTrainingOn(AthletickDate date) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.trainingManager.hasTrainingOnDate(date);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Training deleteTrainingOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.trainingManager.deleteTrainingOnDate(date);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cAttendanceEntry\u003e getTrainingAttendanceListOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return trainingManager.getTrainingAttendanceListOnDate(date);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getPersonAttendanceRateString(Person person) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return trainingManager.getPersonAttendanceRateString(person);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cAttendanceRateEntry\u003e getAttendanceRateOfAll() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        List\u003cPerson\u003e allPeople \u003d getAthletick().getPersonList();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return trainingManager.getAttendanceRateOfAll(allPeople);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingManager getTrainingManager() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.trainingManager;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void resetTrainingManager() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingManager.resetTrainingManager();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Performance \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void setPerformance(ReadOnlyPerformance performance) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performance.resetData(performance);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.addEvent(event);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.hasEvent(event);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event getEvent(String eventName) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.getEvent(eventName);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.removeEvent(target);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addRecord(String eventName, Person person, Record record) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.addRecord(eventName, person, record);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void deleteRecord(String eventName, Person person, AthletickDate date) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.deleteRecord(eventName, person, date);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.hasPerformanceOn(date);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAthleteEvents(Person athlete) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return performance.getAthleteEvent(athlete);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void editPersonPerformanceRecords(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.editPersonPerformanceRecords(target, editedPerson);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 27,
      "ChangUo79": 6,
      "jeunhoe": 55,
      "hellodommy": 68,
      "junhuplim": 139,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Performance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.UniqueEventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Wraps Performance-related data at an EventList level."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Performance implements ReadOnlyPerformance {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Performance() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a Performance using the Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Performance(ReadOnlyPerformance toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Replaces the contents of the events list with {@code events}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Resets the existing data of this {@code EventList} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void resetData(ReadOnlyPerformance newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        setEvents(newData.getPerformance());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves Calendar-compatible records for all events."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAthleteEvent(Person athlete) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(athlete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return events.getAthleteEvent(athlete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if there are any recorded performances on a specified date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.hasPerformanceOn(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if an event with the same name as {@code event} exists in the events list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves an instance of an event by the event name."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event getEvent(String eventName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.getEvent(eventName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds an event to the events list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must not already exist in the events list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(e);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Removes an event from the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must already exist in the events list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void removeEvent(Event e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.remove(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a performance record under a specific event."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param e Event name of event where performance is recorded under."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param p Person who completed the performance record."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param r Record to be added."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addRecord(String e, Person p, Record r) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(e, p, r);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.getEvent(e).addRecord(p, r);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Removes an athlete\u0027s record for a certain event, on a certain day."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void deleteRecord(String e, Person p, AthletickDate d) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(e, p, d);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.getEvent(e).deleteRecord(p, d);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Edits an athlete\u0027s record details accordingly when the EditCommand is executed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void editPersonPerformanceRecords(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ObservableList\u003cEvent\u003e getPerformance() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof Performance // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 events.equals(((Performance) other).events));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 6,
      "hellodommy": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAthletick.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Unmodifiable view of Athletick"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public interface ReadOnlyAthletick {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPerformance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Unmodifiable view of events"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public interface ReadOnlyPerformance {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns an unmodifiable view of performances."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    ObservableList\u003cEvent\u003e getPerformance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Path getAthletickFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Path getPerformanceFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Path getAttendanceFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "hellodommy": 1,
      "jeunhoe": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TrainingManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents the TrainingManager of Athletick."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final List\u003cTraining\u003e trainings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingManager(List\u003cTraining\u003e trainings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings \u003d trainings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Resets all data in the TrainingManager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void resetTrainingManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Add a training to the AttendanceManager."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param training Training to add."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void addTraining(Training training) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (this.hasTrainingOnDate(training.getDate())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            this.deleteTrainingOnDate(training.getDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings.add(training);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings.sort(new Comparator\u003cTraining\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            public int compare(Training first, Training second) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                AthletickDate firstDate \u003d first.getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                AthletickDate secondDate \u003d second.getDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return AthletickDate.compareDate(firstDate, secondDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Replaces all occurences of person at {@code target} with {@code editedPerson} in training records."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void editPersonTrainingRecords(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Training training: trainings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (training.hasPerson(target)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                training.editPersonDetails(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Checks if there has been a Training at input date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date Date used to check for training"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return boolean indicating whether there has been a Training at the date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean hasTrainingOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Training recordedTraining : trainings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (recordedTraining.getDate().equals(date)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Removes a training on the specified date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param date Training that occurred on this date will be removed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Training deleteTrainingOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assert(hasTrainingOnDate(date));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        while (index \u003c trainings.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Training training \u003d trainings.get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (training.getDate().equals(date)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Training trainingToBeDeleted \u003d trainings.remove(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return trainingToBeDeleted;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cTraining\u003e getTrainings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.trainings;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public int getPersonAttendedTrainings(Person person) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        int attended \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Training training : trainings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (training.hasPerson(person)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                if (training.hasPersonAttended(person)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    attended++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attended;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public int getPersonAbsentTrainings(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int absent \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Training training : trainings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (training.hasPerson(person)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                if (!training.hasPersonAttended(person)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    absent++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return absent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public int getPersonTotalTrainings(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int total \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Training training : trainings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (training.hasPerson(person)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                total++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public double getPersonAttendanceRate(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return ((double) getPersonAttendedTrainings(person) / getPersonTotalTrainings(person));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns the attendance rate of a given person name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getPersonAttendanceRateString(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int attended \u003d getPersonAttendedTrainings(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int total \u003d getPersonTotalTrainings(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (total \u003d\u003d 0) { // Has not had the opportunity to go for any trainings yet"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return \"No training records\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            double result \u003d getPersonAttendanceRate(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return String.format(\"%d/%d (%.2f%%)\", attended, total, result * 100);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cAttendanceRateEntry\u003e getAttendanceRateOfAll(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceRateEntry\u003e attendanceRateEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendanceRateEntries.add(new AttendanceRateEntry(person, getPersonAttendanceRateString(person)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attendanceRateEntries;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cAttendanceEntry\u003e getTrainingAttendanceListOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assert(this.hasTrainingOnDate(date));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Training training : trainings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (date.equals(training.getDate())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return training.getTrainingAttendanceList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return null; // With assertion, code should not reach here."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Resets trainings in TrainingManager to the {@code newTrainingList}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void resetTrainingList(List\u003cTraining\u003e newTrainingList) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.resetTrainingManager();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings.addAll(newTrainingList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 145,
      "hellodommy": 1,
      "junhuplim": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Path athletickFilePath \u003d Paths.get(\"data\" , \"athletick.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Path performanceFilePath \u003d Paths.get(\"data\", \"events.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Path attendanceFilePath \u003d Paths.get(\"data\", \"attendance.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Path imageFilePath \u003d Paths.get(\"images\", \"text.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setAthletickFilePath(newUserPrefs.getAthletickFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletickFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setAthletickFilePath(Path athletickFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(athletickFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.athletickFilePath \u003d athletickFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path getPerformanceFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return performanceFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setPerformanceFilePath(Path performanceFilePath) { // for tests, not implemented yet"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(performanceFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.performanceFilePath \u003d performanceFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Path getAttendanceFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attendanceFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Path getImageFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return imageFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void setAttendanceFilePath(Path attendanceFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(attendanceFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendanceFilePath \u003d attendanceFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 athletickFilePath.equals(o.athletickFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return Objects.hash(guiSettings, athletickFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + athletickFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 16,
      "ChangUo79": 5,
      "jeunhoe": 8,
      "hellodommy": 4,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/date/AthletickDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents date used in attendance and performance recording."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class AthletickDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String DATE_FORMAT_TYPE_ONE \u003d \"DDMMYYYY\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String DATE_FORMAT_TYPE_TWO \u003d \"MMYYYY\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String DATE_FORMAT_GENERAL \u003d DATE_FORMAT_TYPE_ONE + \" or \" + DATE_FORMAT_TYPE_TWO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please specify date in %s format.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String WRONG_DATE_FORMAT \u003d \"Invalid date specified.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d WRONG_DATE_FORMAT + \" \" + MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MONTH_CONSTRAINTS \u003d \"MM has to be from 01 to 12.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String YEAR_CONSTRAINTS \u003d \"YYYY has to be from 0001 to 9999.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String mth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDate(int day, int month, int year, int type, String mth) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(mth);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.mth \u003d mth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getMth() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return mth;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setType(int type) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Determines the order of dates by comparing their individual elements (day, month, year)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static int compareDate(AthletickDate firstDate, AthletickDate secondDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(firstDate.getYear() \u003d\u003d secondDate.getYear())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return firstDate.getYear() - secondDate.getYear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (!(firstDate.getMonth() \u003d\u003d secondDate.getMonth())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return firstDate.getMonth() - secondDate.getMonth();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return firstDate.getDay() - secondDate.getDay();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the suffix of this day."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String getDaySuffix() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the date in the format before it was parsed - for Json use."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getUnparsed() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return String.format(\"%02d\", day) + String.format(\"%02d\", month) + year;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return day + getDaySuffix() + \" \" + mth + \" \" + year;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof AthletickDate"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 day \u003d\u003d ((AthletickDate) other).day"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 month \u003d\u003d ((AthletickDate) other).month"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((AthletickDate) other).year);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 56,
      "hellodommy": 37,
      "jeunhoe": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/history/HistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Represents the history of commands and states of address books."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cCommand\u003e commands \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cReadOnlyAthletick\u003e addressBooks \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cCommand\u003e undoneCommands \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cReadOnlyAthletick\u003e undoneAddressBooks \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cList\u003cTraining\u003e\u003e trainingLists \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cList\u003cTraining\u003e\u003e undoneTrainingLists \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cReadOnlyPerformance\u003e performances \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Stack\u003cReadOnlyPerformance\u003e undonePerformances \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public HistoryManager() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This initialises the HistoryManager, populating the stacks with the initial states"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * when the application starts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param model model class of the application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void init(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.addressBooks.push(model.getAthletickDeepCopy());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingLists.push(model.getTrainingsDeepCopy(model.getTrainingManager().getTrainings()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.performances.push(model.getPerformanceDeepCopy(model.getPerformance()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Stack\u003cCommand\u003e getCommands() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Stack\u003cReadOnlyAthletick\u003e getAddressBooks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.addressBooks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Command getLatestCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return commands.peek();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Command popLatestCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return commands.pop();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Command popLatestUndoneCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneCommands.pop();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void pushCommand(Command command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        commands.push(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void pushUndoneCommand(Command undoneCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        undoneCommands.push(undoneCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ReadOnlyAthletick popLatestAthletick() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return addressBooks.pop();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ReadOnlyAthletick popLatestUndoneAthletick() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneAddressBooks.pop();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void pushAthletick(ReadOnlyAthletick athletick) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        addressBooks.push(athletick);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void pushUndoneAthletick(ReadOnlyAthletick undoneAthletick) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        undoneAddressBooks.push(undoneAthletick);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void pushTrainingList(List\u003cTraining\u003e trainingList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        trainingLists.push(trainingList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void pushPerformances(ReadOnlyPerformance performance) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        performances.push(performance);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoneEmpty() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.commands.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isRedoneEmpty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.undoneCommands.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * reset the athletick state to the state after undo command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param athletick single athletick class of the application"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void undoAthletickStack(Athletick athletick) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyAthletick afterUndoneState \u003d this.addressBooks.peek();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        athletick.resetData(afterUndoneState);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * After undo, pops the latest training list from the stack of training lists"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * and push it to the undone stack of training list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Then, resets the state of attendance from the latest training list after undone."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param trainingManager single attendance class of the application"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param model single model class of the application"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void undoTrainingStack(TrainingManager trainingManager, Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cTraining\u003e undoneTrainingList \u003d this.trainingLists.pop();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.undoneTrainingLists.push(undoneTrainingList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cTraining\u003e afterUndoneTrainingList \u003d this.trainingLists.peek();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.resetTrainingList(model.getTrainingsDeepCopy(afterUndoneTrainingList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * After undo, pops the latest performance from the stack of performance"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * and push it to the undone stack of performance."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Then, resets the state of performance from the latest performance after undone."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param performance single performance class of the application"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param model single model class of application"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void undoPerformanceStack(Performance performance, Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyPerformance undonePerformance \u003d this.performances.pop();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.undonePerformances.push(undonePerformance);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyPerformance afterUndonePerformance \u003d this.performances.peek();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        performance.resetData(model.getPerformanceDeepCopy(afterUndonePerformance));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * After redo, pops the latest undone training lists from the stack"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * of undone training lists and push it to the stack of training lists."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Then, resets the state of attendance from the latest training list after redo."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param trainingManager single attendance class of the application"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param model single model class of application"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void redoTrainingStack(TrainingManager trainingManager, Model model) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cTraining\u003e redoneTrainingLists \u003d model.getTrainingsDeepCopy(this.undoneTrainingLists.pop());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.trainingLists.push(redoneTrainingLists);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.resetTrainingList(model.getTrainingsDeepCopy(redoneTrainingLists));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * After redo, pops the latest undone performance from the stack"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * of undone performance and push it to the stack of performance."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Then, resets the state of performance from the latest performance after redo."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param performance single performance class of the application"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param model single model class of the application"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void redoPerformanceStack(Performance performance, Model model) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyPerformance redonePerformance \u003d this.undonePerformances.pop();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.performances.push(redonePerformance);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        performance.resetData(model.getPerformanceDeepCopy(redonePerformance));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "jeunhoe": 8,
      "junhuplim": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/CalendarCompatibleRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Wrapper for performance record that will be displayed in the Calendar."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Differs from Record class in that the attributes are athlete and timing, instead of date and timing since"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * the date for a CalendarCompatibleRecord is fixed already."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class CalendarCompatibleRecord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Person athlete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String timing;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CalendarCompatibleRecord(Person athlete, String timing) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.athlete \u003d athlete;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Person getAthlete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athlete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 7,
      "hellodommy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Events are types of activities that can measure performance. Examples include \u002750m breaststroke\u0027 or \u0027100m freestyle\u0027."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_EVENT \u003d \"%1$s event has not been created.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Please use the event command to create the event first.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Event name should not begin with a space.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_RECORD_EXISTS \u003d \"%1$s already has a record on %2$s for %3$s event.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private HashMap\u003cPerson, List\u003cRecord\u003e\u003e records;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a type of event that stores the members and their respective timings (performance) for this event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param name of this event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.records \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a type of event with the performances initialised already."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param name of this event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param records to be included in this event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event(String name, HashMap\u003cPerson, List\u003cRecord\u003e\u003e records) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(name, records);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name.trim().toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if the event has the same name as this event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return otherEvent !\u003d null \u0026\u0026 otherEvent.getName().equals(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cPerson, List\u003cRecord\u003e\u003e getRecords() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if the athlete already has a record on the given day for this event."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * This prevents an athlete from having 2 records on the same day, under the same event."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean doesAthleteHavePerformanceOn(AthletickDate athletickDate, Person athlete) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(athletickDate, athlete);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecords \u003d getAthleteRecords(athlete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (athleteRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Record record : athleteRecords) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (record.getDate().equals(athletickDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if the athlete has any record under this event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerson(Person athlete) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(athlete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        AtomicBoolean hasPerson \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.forEach((person, recordList) -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (person.equals(athlete)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                hasPerson.set(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return hasPerson.get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Sorts records based on AthletickDate."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private void sortAthleteRecords(Person athlete) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(athlete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecords \u003d getAthleteRecords(athlete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        athleteRecords.sort(new Comparator\u003cRecord\u003e() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            public int compare(Record first, Record second) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return AthletickDate.compareDate(first.getDate(), second.getDate());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if both events have the same names."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return otherEvent.getName().equals(name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// Adding record functions"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a player\u0027s record to this event."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addRecord(Person athlete, Record record) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(athlete, record);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!records.containsKey(athlete)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            addRecordNew(athlete, record);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            addRecordExisting(athlete, record);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        sortAthleteRecords(athlete);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a player\u0027s record to this event when the player has no existing records."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private void addRecordNew(Person athlete, Record record) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(athlete, record);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ArrayList\u003cRecord\u003e initialisedPerformanceEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        initialisedPerformanceEntries.add(record);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.put(athlete, initialisedPerformanceEntries);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a player\u0027s record to this event when the player already has existing records."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private void addRecordExisting(Person athlete, Record record) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(athlete, record);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ArrayList\u003cRecord\u003e currentPerformanceEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        currentPerformanceEntries.addAll(records.get(athlete));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        currentPerformanceEntries.add(record);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.remove(athlete);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.put(athlete, currentPerformanceEntries);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// Deleting record functions"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Removes a player\u0027s record from this event."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Since there can only be one record per day, only the date needs to be specified."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void deleteRecord(Person athlete, AthletickDate date) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(athlete, date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assert(doesAthleteHavePerformanceOn(date, athlete));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecords \u003d getAthleteRecords(athlete);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        int i \u003d getIndexToDelete(athleteRecords, date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        athleteRecords.remove(i);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // delete athlete from HashMap if they have no records"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (athleteRecords.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            records.remove(athlete);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Find the index of the record to be deleted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public int getIndexToDelete(List\u003cRecord\u003e athleteRecords, AthletickDate date) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(athleteRecords, date);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Record record : athleteRecords) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (record.getDate().equals(date)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// Editing person functions"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Updates the person details for this event with the edited person details."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assert(hasPerson(target));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e recordsCopy \u003d copyAthleteRecords(target);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.remove(target);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.put(editedPerson, recordsCopy);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Makes a copy of the athlete\u0027s records."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private List\u003cRecord\u003e copyAthleteRecords(Person target) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecordsToCopy \u003d getAthleteRecords(target);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecordsCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Record record : athleteRecordsToCopy) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            Record recordCopy \u003d new Record(record.getDate(), record.getTiming());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            athleteRecordsCopy.add(recordCopy);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assert(athleteRecordsCopy.size() \u003d\u003d athleteRecordsToCopy.size());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return athleteRecordsCopy;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// Analysis helper functions"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public List\u003cRecord\u003e getAthleteRecords(Person athlete) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(athlete);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecords \u003d records.get(athlete);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assert(!athleteRecords.isEmpty());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return athleteRecords;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the athlete\u0027s fastest timing for this event."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public String[] getPersonalBest(Person athlete) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(athlete);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        double personalBest \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String personalBestDate \u003d \"\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Record record : getAthleteRecords(athlete)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            double timing \u003d record.getTiming().getValue();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (timing \u003c personalBest) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                personalBest \u003d timing;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                personalBestDate \u003d record.getDate().toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assert(personalBest \u003c Double.MAX_VALUE);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new String[]{personalBest + \" seconds\", personalBestDate};"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the athlete\u0027s latest timing for this event."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @return String array with the first index being the date and second index being the timing."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String[] getLatestTiming(Person athlete) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(athlete);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cRecord\u003e athleteRecords \u003d getAthleteRecords(athlete);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Record latestRecord \u003d athleteRecords.get(athleteRecords.size() - 1);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new String[]{latestRecord.getDate().toString(), latestRecord.getTiming().toString()};"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// Calendar helper functions"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves a list of Calendar-compatible records for the Calendar."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param date of Calendar-compatible records."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public List\u003cCalendarCompatibleRecord\u003e getCalendarCompatibleRecords(AthletickDate date) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cCalendarCompatibleRecord\u003e ccrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.forEach((person, recordList) -\u003e {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String timing \u003d \"\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (Record record : recordList) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                if (record.getDate().equals(date)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    timing \u003d record.getTiming().toString();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    CalendarCompatibleRecord ccr \u003d new CalendarCompatibleRecord(person, timing);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    ccrList.add(ccr);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return ccrList;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if this event has a recorded performance on the given date."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        AtomicBoolean answer \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.forEach((person, recordList) -\u003e {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (Record record : recordList) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                if (record.getDate().equals(date)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    answer.set(true);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return answer.get();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 4,
      "hellodommy": 318
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/Record.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Under each event, each member will have a PerformanceEntry that contains their performance timing and the date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * that they took"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Timing timing;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a Record for a member under an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param date this entry was taken."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param timing of this entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Record(AthletickDate date, Timing timing) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the timing of this PerformanceEntry."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @return Timing of this PerformanceEntry."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Timing getTiming() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return otherRecord.getTiming().equals(timing) \u0026\u0026 otherRecord.getDate().equals(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/Timing.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Timing {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Timing should only contain numbers in seconds.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String REGEX_DECIMAL \u003d \"^-?\\\\d*\\\\.\\\\d+$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String REGEX_INTEGER \u003d \"^-?\\\\d+$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d REGEX_DECIMAL + \"|\" + REGEX_INTEGER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code Timing}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param timing A valid timing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Timing(String timing) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        checkArgument(isValidTiming(timing), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        value \u003d Double.parseDouble(timing);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if a given string is a valid timing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static boolean isValidTiming(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 (Double.parseDouble(test) \u003e 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getUnparsed() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return value + \" seconds\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/UniqueEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.exceptions.NoEventException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds an event to this list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must not already exist in this list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Removes an event from this list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must already exist in this list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new NoEventException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event getEvent(String eventName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (event.getName().equals(eventName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAthleteEvent(Person person) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        ArrayList\u003cEvent\u003e athleteEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            if (event.getRecords().containsKey(person)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                athleteEventList.add(event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return athleteEventList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Method for Shawn to retrieve performance records on a particular day for the Calendar feature."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e hm \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            hm.put(event, event.getCalendarCompatibleRecords(date));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return hm;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if there are any recorded performances on the specified date."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (event.hasPerformanceOn(date)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Edits an athlete\u0027s record details accordingly when the EditCommand is executed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (event.hasPerson(target)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                event.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 12,
      "hellodommy": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/exceptions/DuplicateEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/exceptions/NoEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Signals that the operation cannot proceed as the Event to be deleted does not exist (Events are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * the same if they have the same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class NoEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public NoEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(\"Operation cannot proceed as event to be deleted does not exist\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender can only be Male, Female or Others, and it should not be \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \"blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public final String genderOfPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Constructs an {@code Gender}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        genderOfPerson \u003d gender.substring(0, 1).toUpperCase() + gender.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return (test.toLowerCase().equals(\"male\") || test.toLowerCase().equals(\"female\") || test.toLowerCase().equals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            \"others\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return genderOfPerson;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            \u0026\u0026 genderOfPerson.equals(((Gender) other).genderOfPerson)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return genderOfPerson.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final Photo photo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Gender gender, Address address, Set\u003cTag\u003e tags, Photo photo) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Photo getPhoto() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return photo;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return Objects.hash(name, phone, email, gender, address, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 10,
      "junhuplim": 10,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonNameComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Comparator that enables us to sort a list of Persons in alphabetical order ignoring case."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PersonNameComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Compares a person to another using name. Case is ignored."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param p1 Name of person 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param p2 Name of person 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Value of zero if (x\u003d\u003dy), if (x \u003c y) then value less than zero, and if (x \u003e y)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * then value greater than zero."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int compare(Person p1, Person p2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String person1Name \u003d p1.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String person2Name \u003d p2.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return person1Name.compareToIgnoreCase(person2Name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Photo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " *  Represents a Person\u0027s photo in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " *  Guarantees: immutable; is valid as declared in {@link #isValidFilePath(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class Photo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Image filepath should be of the format local-part.png \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and underscores.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"2. This is followed by a \u0027.\u0027 and only the image extension \u0027png\u0027 is allowed. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String NO_FILE_EXIST_MESSAGE \u003d \"Image file does not exist. Make sure image file is in the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"`images` folder.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\w]+(\\\\.(?i)(png))$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String IMAGE_DIRECTORY \u003d \"images/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final File imageFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Photo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        value \u003d \"default.png\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        imageFile \u003d new File(IMAGE_DIRECTORY + value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        filePath \u003d \"file://\" + imageFile.toURI().getPath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Photo(String image) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(image);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        checkArgument(isValidFilePath(image), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        value \u003d image;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        imageFile \u003d new File(IMAGE_DIRECTORY + value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        filePath \u003d \"file://\" + imageFile.toURI().getPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Checks whether image file exists in image folder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * @param test file name of image file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static boolean isFileExist(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        File filePath \u003d new File(IMAGE_DIRECTORY + test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return filePath.exists();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagMatchesPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Tests that any of a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class TagMatchesPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final List\u003cString\u003e tagQueries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public TagMatchesPredicate(List\u003cString\u003e tagQueries) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.tagQueries \u003d tagQueries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String allTags \u003d person.getTags().toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                .replaceAll(\"\\\\[|\\\\]\", \"\").replaceAll(\",\", \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return tagQueries.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(allTags, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof TagMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 tagQueries.equals(((TagMatchesPredicate) other).tagQueries)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return internalList.get(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sorts contents of this list in alphabetical order using {@code personComparator}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param personNameComparator Compares one person to another using name. Case is ignored."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortByName(PersonNameComparator personNameComparator) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        internalList.sort(personNameComparator);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "ChangUo79": 5,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        tags.add(tagName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves a list of all the tags of all the people entries."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static List\u003cString\u003e getAllTags() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/training/AttendanceEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.model.training;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Wrapper for attendance record that will be displayed in the Calendar. Each entry has a person and a boolean and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * indicates whether a person attended the training."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Boolean isPresent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceEntry(Person person, Boolean isPresent) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Boolean getIsPresent() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (other instanceof AttendanceEntry) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            AttendanceEntry casted \u003d (AttendanceEntry) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return this.person.equals(casted.getPerson()) \u0026\u0026 this.isPresent.equals(casted.getIsPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/training/Training.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.model.training;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Training session in Athletick."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Training {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents the date of Training."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents the attendance record of the training session. Each person is a key and a boolean value indicates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * whether they attended or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private HashMap\u003cPerson, Boolean\u003e trainingAttendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Training(AthletickDate date, HashMap\u003cPerson, Boolean\u003e trainingAttendance) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.trainingAttendance \u003d trainingAttendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public HashMap\u003cPerson, Boolean\u003e getTrainingAttendance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.trainingAttendance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns a list of {@code AttendanceEntry} to show attendance of a team in that training. Used in the calendar"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * function."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cAttendanceEntry\u003e getTrainingAttendanceList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceEntry\u003e trainingAttendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingAttendance.forEach((person, isPresent) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendanceList.add(new AttendanceEntry(person, isPresent));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingAttendanceList.sort((firstEntry, secondEntry) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return firstEntry.getPerson().getName().toString().compareTo(secondEntry.getPerson().getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return trainingAttendanceList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.trainingAttendance.containsKey(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean hasPersonAttended(Person person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.trainingAttendance.get(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Training on \" + date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Replaces person data in the training record. Called when a person\u0027s details are edited."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void editPersonDetails(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assert(this.hasPerson(target)); // done in other calls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        boolean hasAttended \u003d this.hasPersonAttended(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance.remove(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance.put(editedPerson, hasAttended);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 51,
      "junhuplim": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Event(\"freestyle 50m\"), new Event(\"freestyle 100m\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Event(\"breaststroke 100m\"), new Event(\"butterfly 100m\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Event(\"backstroke 100m\"), new Event(\"medley 200m\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static ReadOnlyPerformance getSamplePerformance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance samplePerformance \u003d new Performance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            samplePerformance.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return samplePerformance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Person(new Name(\"Amanda Lim\"), new Phone(\"87438807\"), new Email(\"amandalim@gmail.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Gender(\"female\"), new Address(\"180 Paya Lebar Road, #07-06, Singapore 409032\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                getTagSet(\"freestyle\", \"medley\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Person(new Name(\"Michael Phelps\"), new Phone(\"3856289119\"), new Email(\"mike@hotmail.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Gender(\"Male\"), new Address(\"3045 Hickory Heights Drive, Linthicum Heights, Maryland 21090\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                getTagSet(\"freestyle\", \"olympics\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Person(new Name(\"Tao Li\"), new Phone(\"13092646433\"), new Email(\"tao@yahoo.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Gender(\"Female\"), new Address(\"16号楼中单元401, 青岛市-城阳区, 山东省 266109\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                getTagSet(\"backstroke\", \"butterfly\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Person(new Name(\"Joseph Schooling\"), new Phone(\"91031282\"), new Email(\"jojo@outlook.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Gender(\"Male\"), new Address(\"Blk 216 Bedok North Street 1, #16-43, Singapore 460216\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                getTagSet(\"butterfly\", \"olympics\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Person(new Name(\"Sun Yang\"), new Phone(\"12740154825\"), new Email(\"sunyang@gmail.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Gender(\"Male\"), new Address(\"伟业路1号高新软件园9号楼9楼, 杭州 310000, 浙江\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                getTagSet(\"freestyle\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Person(new Name(\"Chad le Clos\"), new Phone(\"0855590053\"), new Email(\"chad@gmail.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Gender(\"Male\"), new Address(\"1769 Wattle St, Maclear, Eastern Cape 5481\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                getTagSet(\"butterfly\"), new Photo(\"default.png\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static ReadOnlyAthletick getSampleAthletick() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick sampleA \u003d new Athletick();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            sampleA.addPerson(samplePerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return sampleA;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "ChangUo79": 1,
      "hellodommy": 38,
      "junhuplim": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AthletickStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Athletick}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public interface AthletickStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Path getAthletickFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns Athletick data as a {@link ReadOnlyAthletick}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Optional\u003cReadOnlyAthletick\u003e readAthletick() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @see #getAthletickFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Optional\u003cReadOnlyAthletick\u003e readAthletick(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Saves the given {@link ReadOnlyAthletick} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param athletick cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void saveAthletick(ReadOnlyAthletick athletick) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @see #saveAthletick(ReadOnlyAthletick)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void saveAthletick(ReadOnlyAthletick athletick, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ImageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * Stores images used for profiles"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class ImageStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public ImageStorage(Path path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Path getImagePath() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void createImageFile() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        FileUtil.createIfMissing(this.path);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event name is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final HashMap\u003cString, List\u003cJsonAdaptedRecord\u003e\u003e performances \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                            @JsonProperty(\"performances\") HashMap\u003cString, List\u003cJsonAdaptedRecord\u003e\u003e performances) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (performances !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            this.performances.putAll(performances);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cString, List\u003cJsonAdaptedRecord\u003e\u003e tempPerformances \u003d new HashMap\u003c\u003e(); // for json"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cPerson, List\u003cRecord\u003e\u003e sourcePerformances \u003d source.getRecords(); // actual performances"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        sourcePerformances.forEach((person, records) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            JsonAdaptedPerson newPerson \u003d new JsonAdaptedPerson(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            List\u003cJsonAdaptedRecord\u003e tempRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            tempRecords.addAll(records.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    .map(JsonAdaptedRecord::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String personJsonString \u003d JsonUtil.toJsonString(newPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                tempPerformances.put(personJsonString, tempRecords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performances.putAll(tempPerformances);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!Event.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(Event.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final String modelName \u003d name.trim().toLowerCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cPerson, List\u003cRecord\u003e\u003e initialisedPerformances \u003d new HashMap\u003c\u003e(); // actual performances"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performances.forEach((jsonAdaptedPerson, jsonAdaptedRecords) -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            List\u003cRecord\u003e tempRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (JsonAdaptedRecord jsonAdaptedRecord : jsonAdaptedRecords) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    tempRecords.add(jsonAdaptedRecord.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                Person person \u003d JsonUtil.fromJsonString(jsonAdaptedPerson, JsonAdaptedPerson.class).toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                initialisedPerformances.put(person, tempRecords);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            } catch (IllegalValueException | IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final HashMap\u003cPerson, List\u003cRecord\u003e\u003e modelPerformances \u003d initialisedPerformances;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Event(modelName, modelPerformances);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final String photo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"photo\") String photo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        gender \u003d source.getGender().genderOfPerson;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d source.getPhoto().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (photo \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Photo.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!Photo.isValidFilePath(photo)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new IllegalValueException(Photo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        final Photo modelPhoto \u003d new Photo(photo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelGender, modelAddress, modelTags, modelPhoto);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 13,
      "junhuplim": 14,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecord} with the given record details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"date\") String date, @JsonProperty(\"timing\") String timing) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts a given {@code Record} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        date \u003d source.getDate().getUnparsed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        timing \u003d source.getTiming().getUnparsed();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts this Jackson-friendly adapted record object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final AthletickDate modelDate \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (timing \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"timing\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final Timing modelTiming \u003d ParserUtil.parseTiming(timing);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Record(modelDate, modelTiming);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTraining.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Jackson-friendly version of {@link Training}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class JsonAdaptedTraining {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final HashMap\u003cString, Boolean\u003e trainingAttendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructs a {@code JsonAdaptedTraining} with the given training details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAdaptedTraining(@JsonProperty(\"date\") String date, @JsonProperty(\"trainingAttendance\") HashMap\u003cString,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Boolean\u003e trainingAttendance) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance \u003d trainingAttendance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts a given {@code Training} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAdaptedTraining(Training training) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d training.getDate().getUnparsed();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cString, Boolean\u003e tempHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e trainingAttendance \u003d training.getTrainingAttendance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingAttendance.forEach((person, hasAttended) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            JsonAdaptedPerson newPerson \u003d new JsonAdaptedPerson(person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                String personJsonString \u003d JsonUtil.toJsonString(newPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                tempHash.put(personJsonString, hasAttended);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance \u003d tempHash;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts this Jackson-friendly adapted training object into the model\u0027s {@code Training} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the converting jackson adapted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * person to Person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Training toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date \u003d ParserUtil.parseDate(this.date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e tempHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance.forEach((jsonPerson, hasAttended) -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                Person person \u003d JsonUtil.fromJsonString(jsonPerson, JsonAdaptedPerson.class).toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                tempHash.put(person, hasAttended);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } catch (IllegalValueException | IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new Training(date, tempHash);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAthletickStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A class to access Athletick data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class JsonAthletickStorage implements AthletickStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAthletickStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public JsonAthletickStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Optional\u003cReadOnlyAthletick\u003e readAthletick() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return readAthletick(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Similar to {@link #readAthletick()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Optional\u003cReadOnlyAthletick\u003e readAthletick(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Optional\u003cJsonSerializableAthletick\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                filePath, JsonSerializableAthletick.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void saveAthletick(ReadOnlyAthletick athletick) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        saveAthletick(athletick, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Similar to {@link #saveAthletick(ReadOnlyAthletick)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void saveAthletick(ReadOnlyAthletick athletick, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(athletick);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAthletick(athletick), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPerformanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A class to access EventList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonPerformanceStorage implements PerformanceStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPerformanceStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonPerformanceStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Path getEventFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return readEvents(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Similar to {@link #readEvents()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Optional\u003cJsonSerializablePerformance\u003e jsonEventList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                filePath, JsonSerializablePerformance.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!jsonEventList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return Optional.of(jsonEventList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        saveEvents(events, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePerformance(events), filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAthletick.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "@JsonRootName(value \u003d \"athletick\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "class JsonSerializableAthletick {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public JsonSerializableAthletick(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public JsonSerializableAthletick(ReadOnlyAthletick source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Athletick toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick athletick \u003d new Athletick();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (athletick.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            athletick.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletick;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 11,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePerformance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * An Immutable EventList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonSerializablePerformance {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code JsonSerializableEvents} with the given events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonSerializablePerformance(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts a given {@code stream} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEvents}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonSerializablePerformance(ReadOnlyPerformance source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.addAll(source.getPerformance().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts this event list into the model\u0027s {@code EventList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Performance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance eventList \u003d new Performance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (eventList.hasEvent(event)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            eventList.addEvent(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTrainingManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Jackson-friendly version of {@link TrainingManager}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class JsonTrainingManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final List\u003cJsonAdaptedTraining\u003e jsonTrainings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructs a {@code JsonTrainingManager} with the given training manager details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonTrainingManager(@JsonProperty(\"jsonTrainings\") List\u003cJsonAdaptedTraining\u003e jsonTrainings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.jsonTrainings \u003d jsonTrainings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts a given {@code TrainingManger} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonTrainingManager(TrainingManager trainingManager) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cJsonAdaptedTraining\u003e jsonTrainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e normalTrainings \u003d trainingManager.getTrainings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Training training: normalTrainings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            JsonAdaptedTraining toAdd \u003d new JsonAdaptedTraining(training);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            jsonTrainings.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.jsonTrainings \u003d jsonTrainings;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts this Jackson-friendly adapted training object into the model\u0027s {@code Training} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the converting jackson adapted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * person to Person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (JsonAdaptedTraining jsonTraining: jsonTrainings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainings.add(jsonTraining.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new TrainingManager(trainings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTrainingManagerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A class to access Attendance data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class JsonTrainingManagerStorage implements TrainingManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAthletickStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonTrainingManagerStorage(Path path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cTrainingManager\u003e readTrainingManager() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return readTrainingManager(this.path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cTrainingManager\u003e readTrainingManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Optional\u003cJsonTrainingManager\u003e jsonAttendance \u003d JsonUtil.readJsonFile(filePath, JsonTrainingManager.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (!jsonAttendance.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return Optional.of(jsonAttendance.get().toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveTrainingManager(TrainingManager trainingManager) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        saveTrainingManager(trainingManager, this.path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveTrainingManager(TrainingManager trainingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(trainingManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonTrainingManager(trainingManager), filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "jeunhoe": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PerformanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Represents a storage for {@link seedu.address.model.performance}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public interface PerformanceStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Path getEventFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cReadOnlyPerformance\u003e readEvents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveEvents(ReadOnlyPerformance events) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public interface Storage extends AthletickStorage, PerformanceStorage, TrainingManagerStorage,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Path getAthletickFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Optional\u003cReadOnlyAthletick\u003e readAthletick() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void saveAthletick(ReadOnlyAthletick athletick) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Optional\u003cTrainingManager\u003e readTrainingManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void saveTrainingManager(TrainingManager trainingManager) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "hellodommy": 9,
      "jeunhoe": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Manages storage of Athletick data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private AthletickStorage athletickStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private PerformanceStorage performanceStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private TrainingManagerStorage trainingManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public StorageManager(AthletickStorage athletickStorage, PerformanceStorage performanceStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                          TrainingManagerStorage trainingManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.athletickStorage \u003d athletickStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performanceStorage \u003d performanceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingManagerStorage \u003d trainingManagerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Athletick methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletickStorage.getAthletickFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Optional\u003cReadOnlyAthletick\u003e readAthletick() throws DataConversionException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return readAthletick(athletickStorage.getAthletickFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Optional\u003cReadOnlyAthletick\u003e readAthletick(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletickStorage.readAthletick(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void saveAthletick(ReadOnlyAthletick athletick) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        saveAthletick(athletick, athletickStorage.getAthletickFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void saveAthletick(ReadOnlyAthletick athletick, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletickStorage.saveAthletick(athletick, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Performance methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Path getEventFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performanceStorage.getEventFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return readEvents(performanceStorage.getEventFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performanceStorage.readEvents(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        saveEvents(events, performanceStorage.getEventFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performanceStorage.saveEvents(events, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attendance methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cTrainingManager\u003e readTrainingManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return trainingManagerStorage.readTrainingManager();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cTrainingManager\u003e readTrainingManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return trainingManagerStorage.readTrainingManager(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveTrainingManager(TrainingManager trainingManager) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManagerStorage.saveTrainingManager(trainingManager);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveTrainingManager(TrainingManager trainingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManagerStorage.saveTrainingManager(trainingManager, filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 16,
      "hellodommy": 32,
      "jeunhoe": 26,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TrainingManagerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a storage for {@link TrainingManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public interface TrainingManagerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns the file path of the TrainingManager data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    Path getAthletickFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Loads TrainingManger from a JSON file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Optional\u003cTrainingManager\u003e readTrainingManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Optional\u003cTrainingManager\u003e readTrainingManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Saves TrainingManager to a JSON file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void saveTrainingManager(TrainingManager trainingManager) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void saveTrainingManager(TrainingManager trainingManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "jeunhoe": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AthleteRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Constructs the athlete\u0027s record component outline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class AthleteRecords extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String FXML \u003d \"AthleteRecords.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final List\u003cRecord\u003e records;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Label athleteName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private VBox athleteStatBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public AthleteRecords(Person athlete, List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        person \u003d athlete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.athleteName.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        getChart();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the chart from RecordDetails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private void getChart() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        RecordLineChart recordLineChart \u003d new RecordLineChart(person.getName().fullName, records);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        athleteStatBox.getChildren().add(recordLineChart.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendanceChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that displays a piechart of the attendance percentage for the team on a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * specific training date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AttendanceChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"AttendanceChart.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int present;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int absent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label chartTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AttendanceChart(int present, int absent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.present \u003d present;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.absent \u003d absent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseChartData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void initialiseChartData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setChartContent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setChartTitle();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setChartContent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        new PieChart.Data(\"Absent: \" + absent, absent),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        new PieChart.Data(\"Present: \" + present, present));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        pieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setChartTitle() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        chartTitle.setText(\"Team Attendance: \" + calculateAttendancePercentage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String calculateAttendancePercentage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        double percentage \u003d ((double) present / (present + absent)) * 100;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        percentage \u003d Math.round(percentage * 10) / 10.0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return percentage + \"%\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendancePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.AttendanceRateEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view attendance is issued."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AttendancePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"AttendancePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private VBox attendanceBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendancePanel(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        initialiseAttendanceData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Retrieves attendance data from model. Creates a row for each person and displays their"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * name and attendance in the same row."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private void initialiseAttendanceData() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceBox.getChildren().add(new AttendanceRateTableHeader().getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceRateEntry\u003e attendanceRates \u003d model.getAttendanceRateOfAll();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (AttendanceRateEntry entry : attendanceRates) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String name \u003d entry.getPerson().getName().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String attendanceRate \u003d entry.getAttendanceRateString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            AttendanceRateTableContent content \u003d new AttendanceRateTableContent(name, attendanceRate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendanceBox.getChildren().add(content.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 14,
      "jeunhoe": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendanceRateTableContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * The UI component that displays a attendance for a person."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceRateTableContent extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final String FXML \u003d \"AttendanceRateTableContent.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Label attendanceRate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceRateTableContent(String personName, String attendanceRate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.name.setText(personName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendanceRate.setText(attendanceRate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendanceRateTableHeader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * The UI component that displays the table headers for attendance rate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceRateTableHeader extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final String FXML \u003d \"AttendanceRateTableHeader.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceRateTableHeader() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendanceTableContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays a training record for a person. A training record includes a name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " *  and an tick or cross indicating attendance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AttendanceTableContent extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"AttendanceTableContent.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image tickIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/tick.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image crossIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/cross.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView indicator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AttendanceTableContent(String personName, boolean isPresent) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        name.setText(personName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (isPresent) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            indicator.setImage(tickIcon);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            indicator.setImage(crossIcon);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendanceTableHeader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays the title of a training record."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AttendanceTableHeader extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"AttendanceTableHeader.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AttendanceTableHeader() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarDetailPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view trainings and performance on a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * specified date is issued."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarDetailPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"CalendarDetailPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox attendanceBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox performanceBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarDetailPanel(AthletickDate date, Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseAttendanceData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialisePerformanceData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieves attendance data from model. Creates a row for each person and displays their"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * name and attendance in the same row."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void initialiseAttendanceData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (model.hasTrainingOn(date)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayAttendanceChart();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayAttendanceTable();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayNoAttendanceError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds a piechart indicating overall team attendance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayAttendanceChart() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        List\u003cAttendanceEntry\u003e attendanceData \u003d model.getTrainingAttendanceListOnDate(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addAttendancePieChart(attendanceData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds attendance pie chart to the panel."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param attendanceData List of {@code AttendanceEntry}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void addAttendancePieChart(List\u003cAttendanceEntry\u003e attendanceData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int total \u003d attendanceData.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int present \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (AttendanceEntry entry: attendanceData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (entry.getIsPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                present++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AttendanceChart chart \u003d new AttendanceChart(present, total - present);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        attendanceBox.getChildren().add(chart.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds table containing list of athletes and their attendance."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayAttendanceTable() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addAttendanceTableHeader();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveAttendanceTableContent();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds header for attendance table."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void addAttendanceTableHeader() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        attendanceBox.getChildren().add(new AttendanceTableHeader().getRoot());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieves content for attendance table."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void retrieveAttendanceTableContent() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceEntry\u003e attendanceData \u003d model.getTrainingAttendanceListOnDate(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addAttendanceTableContent(attendanceData);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds content for attendance table."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void addAttendanceTableContent(List\u003cAttendanceEntry\u003e attendanceData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (AttendanceEntry entry: attendanceData) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String name \u003d entry.getPerson().getName().toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            boolean isPresent \u003d entry.getIsPresent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            AttendanceTableContent content \u003d new AttendanceTableContent(name, isPresent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            attendanceBox.getChildren().add(content.getRoot());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays message informing user that there is no attendance data on the specified date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayNoAttendanceError() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String errorMsg \u003d \"No Training Record on \" + date.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ErrorMessageLabel error \u003d new ErrorMessageLabel(errorMsg);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        attendanceBox.getChildren().add(error.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieves performance data from model. Creates a header for each event and lists records for"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * the event taken on the particular date."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void initialisePerformanceData() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (model.hasPerformanceOn(date)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayPerformanceStats();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayPerformanceTable();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayNoPerformanceError();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds a header indicating total number of performance records on a specified date."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayPerformanceStats() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AtomicInteger counter \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e performanceData \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                model.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        performanceData.forEach((event, recordList) -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            counter.addAndGet(recordList.size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        PerformanceStats stats \u003d new PerformanceStats(counter.get());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        performanceBox.getChildren().add(stats.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds performance data in the form of a table to {@code CalendarDetailPanel}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayPerformanceTable() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e performanceData \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                model.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addPerformanceTable(performanceData);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds performance data in the form of a table to {@code CalendarDetailPanel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void addPerformanceTable(HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e performanceData) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addPerformanceTable(performanceData);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        performanceData.forEach((event, recordList) -\u003e {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            int numRecords \u003d recordList.size();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (numRecords \u003e 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                PerformanceTableHeader header \u003d new PerformanceTableHeader(event.getName());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                performanceBox.getChildren().add(header.getRoot());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                for (int i \u003d 0; i \u003c numRecords; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    CalendarCompatibleRecord record \u003d recordList.get(i);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    addPerformanceRecord(record);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds performance {@code record} for a particular event."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param record Record of a particular event"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void addPerformanceRecord(CalendarCompatibleRecord record) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Person athlete \u003d record.getAthlete();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String name \u003d athlete.getName().toString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String timing \u003d record.getTiming();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        PerformanceTableContent content \u003d new PerformanceTableContent(name, timing);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        performanceBox.getChildren().add(content.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays message informing user that there is no performance data on the specified date."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayNoPerformanceError() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String errorMsg \u003d \"No Performance Record on \" + date.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ErrorMessageLabel error \u003d new ErrorMessageLabel(errorMsg);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        performanceBox.getChildren().add(error.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 191,
      "jeunhoe": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view calendar is issued."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String[] DAYS \u003d {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \"Fri\", \"Sat\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String[] MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int[] DAYS_IN_MONTH \u003d {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int dayOfWeek;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int dayOfMonth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image leftArrowIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/left_arrow.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image rightArrowIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/right_arrow.png\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image trainingIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/green_dot.png\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image performanceIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/purple_dot.png\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label currYear;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label currDayAndDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label selectedDateMessage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Button prevButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Button nextButton;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private GridPane calendarGridPane;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that constructs calendar for current month when no date is provided."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Represents memory of Athletick"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarPanel(Model model) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setButtonImage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveCurrentDate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setCurrentDateTitle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that constructs calendar for provided {@code date}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Represents memory of Athletick"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarPanel(AthletickDate date, Model model) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setButtonImage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveCurrentDate();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setCurrentDateTitle();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveProvidedDate(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets image of buttons to left and right arrows to navigate calendar."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setButtonImage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView leftArrow \u003d createButtonImage(leftArrowIcon);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView rightArrow \u003d createButtonImage(rightArrowIcon);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        prevButton.setGraphic(leftArrow);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        nextButton.setGraphic(rightArrow);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        prevButton.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        nextButton.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates image for button in desired dimensions."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param image Image to be used"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return ImageView in desired dimensions"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView createButtonImage(Image image) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView imageView \u003d new ImageView(image);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        imageView.setFitHeight(32);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        imageView.setFitWidth(32);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return imageView;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieve details of today\u0027s date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void retrieveCurrentDate() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dayOfWeek \u003d calendar.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the title of the calendar feature to today\u0027s date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setCurrentDateTitle() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String day \u003d DAYS[dayOfWeek - 1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String currMonth \u003d MONTHS[month];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        currYear.setText(Integer.toString(year));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        currDayAndDate.setText(day + \", \" + currMonth + \" \" + dayOfMonth);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Assigns month and year using the provided {@code date}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void retrieveProvidedDate(AthletickDate date) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d date.getMonth() - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d date.getYear();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar.set(year, month, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets title of selected date and fills up the calendar grid with the appropriate days in"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * the month."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void initialiseSelectedDate(int monthChange) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        updateDateVariables(monthChange);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setSelectedDateTitle();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        fillUpDays();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Updates month and year variables based on the provided monthChange."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void updateDateVariables(int monthChange) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar.add(Calendar.MONTH, monthChange);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the text of the selected date label to display to the user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setSelectedDateTitle() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String selectedMonth \u003d MONTHS[month];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        selectedDateMessage.setText(selectedMonth + \", \" + year);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Fills up calendar grid with days of selected month using provide year and month. Excess grid"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * boxes at start and end of calendar filled up with days from previous and next month with"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * respect to the selected month."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void fillUpDays() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        GregorianCalendar gregorianCalendar \u003d new GregorianCalendar(year, month, 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int leadGap \u003d calculateLeadGap(gregorianCalendar);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d calculateDaysInMonth(gregorianCalendar);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int tailGap \u003d calculateTailGap(daysInMonth + leadGap);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] before \u003d previousMonth(month, leadGap);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] current \u003d currMonth(daysInMonth);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] after \u003d nextMonth(month, tailGap);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] combined \u003d combine(before, current, after);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        fillUpGrid(before.length, current.length, combined);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calculates excess grid boxes at the front of the calendar."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param gc Calendar containing selected date"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Number of excess grid boxes."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int calculateLeadGap(GregorianCalendar gc) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int result \u003d gc.get(Calendar.DAY_OF_WEEK) - 1;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (result \u003d\u003d 0) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result \u003d 7;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calculates number of days in selected date."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param gc Calendar containing selected date"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Number of days in selected date."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int calculateDaysInMonth(GregorianCalendar gc) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int result \u003d DAYS_IN_MONTH[month];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (gc.isLeapYear(gc.get(Calendar.YEAR)) \u0026\u0026 month \u003d\u003d 1) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result++;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calculates excess grid boxes at the end of the calendar."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currFilledGrids Number of days of calendar already filled up"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Number of excess grid boxes."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int calculateTailGap(int currFilledGrids) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return 42 - currFilledGrids;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Generates array containing days from previous month."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currMonth Current selected month"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param leadGap Number of days needed from previous month"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String array containing days from previous month."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] previousMonth(int currMonth, int leadGap) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d calendarConstructor(currMonth, -1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d checkLeapYear(c);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d daysInMonth; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            sb.append(i).append(\" \");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] allDays \u003d sb.toString().split(\"\\\\s\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] neededDays \u003d Arrays.copyOfRange(allDays, 0, leadGap);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        neededDays \u003d reverse(neededDays);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return neededDays;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Reverses a String array."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param s String array to be reversed"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Reversed String array."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] reverse(String[] s) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d 0; i \u003c (s.length - (i + 1)); i++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String temp \u003d s[s.length - (i + 1)];"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            s[s.length - (i + 1)] \u003d s[i];"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            s[i] \u003d temp;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Generates array containing days from selected month."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param numDays Number of days in selected month"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String array containing days from selected month."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] currMonth(int numDays) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] result \u003d new String[numDays];"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result[i] \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Generates array containing days from next month."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currMonth Current selected month"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tailGap Number of days needed from next month"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String array containing days from next month."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] nextMonth(int currMonth, int tailGap) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d calendarConstructor(currMonth, 1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d checkLeapYear(c);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d daysInMonth; i++) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            sb.append(i).append(\" \");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] allDays \u003d sb.toString().split(\"\\\\s\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] neededDays \u003d Arrays.copyOfRange(allDays, 0, tailGap);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return neededDays;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a calendar with the given month. Year will be updated as well if required."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currMonth Current month"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Calendar with desired month and year."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Calendar calendarConstructor(int currMonth, int monthChange) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.MONTH, currMonth);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.add(Calendar.MONTH, monthChange);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if the year is a leap year and increments the number of days in month if leap year"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and month is February."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param c Calendar with month and year"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Number of days in month"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int checkLeapYear(Calendar c) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int year \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int month \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        GregorianCalendar gc \u003d new GregorianCalendar(year, month, 1);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d DAYS_IN_MONTH[month];"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (gc.isLeapYear(gc.get(Calendar.YEAR)) \u0026\u0026 month \u003d\u003d 1) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            daysInMonth++;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return daysInMonth;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Combines 3 string arrays together, with array {@code a}\u0027s elements coming in front, array"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * {@code b}\u0027s elements coming in the middle and array {@code c}\u0027s elements coming at the back."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param prev String array whose elements are to be in front"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param curr String array whose elements are to be in the middle"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param next String array whose elements are to be behind"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String[] Combined String array."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] combine(String[] prev, String[] curr, String[] next) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int length \u003d prev.length + curr.length + next.length;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] result \u003d new String[length];"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        System.arraycopy(prev, 0, result, 0, prev.length);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        System.arraycopy(curr, 0, result, prev.length, curr.length);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        System.arraycopy(next, 0, result, prev.length + curr.length, next.length);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds date numbers and dot indicators inside each grid of the 42 cell grid pane."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param numBefore Number of days from month before"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param numCurr Number of days from selected month"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param days String array containing all 42 days to be used to fill up the 7 * 6 grid pane"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void fillUpGrid(int numBefore, int numCurr, String[] days) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int beforeCount \u003d numBefore;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int currentCount \u003d numCurr;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                String day \u003d days[counter];"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Label l \u003d createDayLabel(day);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                boolean havePerformanceEntry;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                boolean haveTrainingEntry;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                boolean setColour \u003d false;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (beforeCount \u003e 0) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    // fills up leading days from previous month"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    l.setTextFill(Paint.valueOf(\"#999999\"));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    havePerformanceEntry \u003d checkPerformanceEntryExists(day, -1);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    haveTrainingEntry \u003d checkTrainingEntryExists(day, -1);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    beforeCount--;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else if (currentCount \u003e 0) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    // fills up days for current month"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    // marks today\u0027s date in a blue circle and bold white text"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    if (isToday(days[counter])) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        l.setTextFill(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        l.setStyle(\"-fx-font-weight:bold\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        // setColour results in a blue circle around the number and indicators"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        setColour \u003d true;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    havePerformanceEntry \u003d checkPerformanceEntryExists(day, 0);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    haveTrainingEntry \u003d checkTrainingEntryExists(day, 0);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    currentCount--;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    // fills up days for next month"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    havePerformanceEntry \u003d checkPerformanceEntryExists(day, 1);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    haveTrainingEntry \u003d checkTrainingEntryExists(day, 1);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    l.setTextFill(Paint.valueOf(\"#999999\"));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                addContentToGrid(col, row, l, haveTrainingEntry, havePerformanceEntry, setColour);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds label to the provided coordinates of the grid."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param col Column"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param row Row"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param l Label"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param haveTrainingEntry Indicates if there is a training entry on the date"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param havePerformanceEntry Indicates if there is a performance entry on the date"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param setColour Indicates if the date corresponds to today\u0027s date"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void addContentToGrid(int col, int row, Label l, boolean haveTrainingEntry,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                                  boolean havePerformanceEntry, boolean setColour) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView performanceIndicator \u003d createPerformanceIndicator();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView trainingIndicator \u003d createTrainingIndicator();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (havePerformanceEntry \u0026\u0026 haveTrainingEntry) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            calendarGridPane.add(gridContent(setColour, l,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    combineIndicators(trainingIndicator, performanceIndicator)), col, row);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else if (havePerformanceEntry) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            calendarGridPane.add(gridContent(setColour, l, performanceIndicator), col, row);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else if (haveTrainingEntry) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            calendarGridPane.add(gridContent(setColour, l, trainingIndicator), col, row);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            calendarGridPane.add(gridContent(setColour, l), col, row);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if there is a performance entry on a particular AthletickDate constructed using the"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * visible calendar dates."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return boolean True if there is a performance entry on that date, false otherwise."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private boolean checkPerformanceEntryExists(String day, int monthChange) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad \u003d dateConstructor(day, monthChange);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model.hasPerformanceOn(ad);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a performance dot indicator."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return ImageView with set image and desired dimensions."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView createPerformanceIndicator() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView i \u003d new ImageView(performanceIcon);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        i.setFitHeight(6);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        i.setFitWidth(6);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if there is a training entry on a particular AthletickDate constructed using the"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * visible calendar dates."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return boolean True if there is a training entry on that date, false otherwise."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private boolean checkTrainingEntryExists(String day, int monthChange) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad \u003d dateConstructor(day, monthChange);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model.hasTrainingOn(ad);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs AthletickDate using provided day and monthChange for methods"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * checkTrainingEntryExists() and checkPerformanceEntryExists()."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return AthletickDate with desired day, month and year."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private AthletickDate dateConstructor(String day, int monthChange) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.MONTH, month);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.add(Calendar.MONTH, monthChange);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int y \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int m \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad \u003d new AthletickDate(Integer.parseInt(day), m + 1, y, 1,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                MONTHS[m]);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return ad;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a training dot indicator."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return ImageView with set image and desired dimensions."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView createTrainingIndicator() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView i \u003d new ImageView(trainingIcon);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        i.setFitHeight(6);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        i.setFitWidth(6);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a label with the provided {@code labelText}."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param labelText String to be used as text"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Label with text set as {@code labelText}."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label createDayLabel(String labelText) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Label l \u003d new Label();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setText(labelText);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setPadding(new Insets(5, 0, 0, 0));"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setFont(new Font(\"System\", 11));"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setTextFill(Paint.valueOf(\"#000000\"));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return l;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if date on calendar corresponds with today\u0027s date."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return True if date is today\u0027s date, false otherwise."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private boolean isToday(String day) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int y \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int m \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return (Integer.parseInt(day) \u003d\u003d dayOfMonth \u0026\u0026 y \u003d\u003d year \u0026\u0026 m \u003d\u003d month);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Wraps {@code items} inside a {@code VBox} and returns it."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param items Items to be wrapped"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return VBox containing item."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox gridContent(boolean setColor, Node ... items) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        VBox v \u003d createGridContentHolder();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (Node item : items) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            v.getChildren().add(item);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (setColor) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            v.setStyle(\"-fx-background-color:  #30336B; -fx-background-radius: 180\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return v;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates {@code VBox} with desired settings that will contain all items for each"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * individual grid."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return VBox with desired settings."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox createGridContentHolder() {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        VBox v \u003d new VBox();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setFillWidth(false);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setPrefHeight(30);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setPrefHeight(30);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setMaxSize(30, 30);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setAlignment(Pos.TOP_CENTER);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return v;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Combines training and performance indicators together when a date has both training and"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * performance records."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param items Dot indicators"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return HBox with indicators placed inside with appropriate margins between indicators."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private HBox combineIndicators(Node ... items) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        HBox h \u003d createCombineIndicatorHolder();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (Node item : items) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            VBox v \u003d createIndicatorHolder();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            v.getChildren().add(item);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            h.getChildren().add(v);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return h;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a {@code HBox} with the desired settings to contain the 2 indicators beside each"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * other."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return HBox with desired settings"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private HBox createCombineIndicatorHolder() {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        HBox h \u003d new HBox();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        h.setFillHeight(false);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        h.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        h.setPrefWidth(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        h.setAlignment(Pos.TOP_CENTER);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return h;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a {@VBox} with the desired settings to contain a single indicator."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return VBox with desired settings"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox createIndicatorHolder() {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        VBox v \u003d new VBox();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setPrefSize(Region.USE_COMPUTED_SIZE, Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setPadding(new Insets(0, 3, 0, 3));"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return v;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Initialise calendar to previous month data when the previous button is clicked."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void handlePrevClick() {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendarGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(-1);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Initialise calendar to previous month data when the next button is clicked."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void handleNextClick() {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendarGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(1);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 610
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ErrorMessageLabel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays an error message when no training or performance record is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * found on a particular date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ErrorMessageLabel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"ErrorMessage.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ErrorMessageLabel(String text) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        message.setText(text);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventRow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * The UI component that displays the name of an event when \"view performance\" command is called."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String FXML \u003d \"EventRow.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public EventRow(String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventName.setText(eventName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t12-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InformationDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * An UI component that displays information of a {@code Person} when selected."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class InformationDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String NO_PERSON_SELECTED_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String FXML \u003d \"InformationDisplay.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final String attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final ArrayList\u003cEvent\u003e athleteEvents;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private GridPane informationBlock;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private ImageView photo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label attendanceRate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private VBox imageHolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private VBox informationBox;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private VBox performanceDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public InformationDisplay(Person person, String attendance, ArrayList\u003cEvent\u003e athleteEvents) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.athleteEvents \u003d athleteEvents;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        displayPersonalInfo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        performanceDisplay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Resize the image when window size changes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void resizeImage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.fitHeightProperty().bind(imageHolder.heightProperty().subtract(40));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.fitWidthProperty().bind(imageHolder.widthProperty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Displays the personal information of the selected person"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void displayPersonalInfo() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        name.setText(this.person.getName().fullName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        phone.setText(this.person.getPhone().value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        address.setText(this.person.getAddress().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        address.setPrefWidth(150);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        address.setWrapText(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        email.setText(this.person.getEmail().value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        gender.setText(this.person.getGender().genderOfPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.setImage(new Image(this.person.getPhoto().filePath));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.setPreserveRatio(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.setSmooth(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add((new TagLayout(tag.tagName)).getRoot()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        attendanceRate.setText(attendance);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Displays the performance of the selected person."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void performanceDisplay() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!athleteEvents.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            for (Event event : athleteEvents) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                String eventName \u003d event.getName();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                String mostRecentDate \u003d event.getLatestTiming(person)[0];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                String mostRecentTiming \u003d event.getLatestTiming(person)[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                String personalBest \u003d event.getPersonalBest(person)[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                String personalBestDate \u003d event.getPersonalBest(person)[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                PersonPerformanceDisplay athletePerformance \u003d new PersonPerformanceDisplay(eventName, personalBestDate,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                                                           personalBest,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                                                           mostRecentDate,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                                                           mostRecentTiming);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                performanceDisplay.getChildren().add(athletePerformance.getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            PersonPerformanceDisplay athletePerformance \u003d new PersonPerformanceDisplay(\"-\", \"-\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                                                       \"-\", \"-\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                                                       \"-\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            performanceDisplay.getChildren().add(athletePerformance.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 118,
      "jeunhoe": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private StackPane featureBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void fillInnerParts(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarPanel calendarPanel \u003d new CalendarPanel(model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            updateMainWindow(commandResult);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Updates the view of {@code MainWindow}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param commandResult Command result from executing user command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void updateMainWindow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (!(commandResult.getFeature() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            updateFeatureBox(commandResult);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (!(commandResult.getPerson() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayInformationDisplay();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (commandResult.isClear()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayCalendar(commandResult.getModel());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Updates the view of the feature box."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param commandResult Command result from executing user command"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void updateFeatureBox(CommandResult commandResult) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        switch (commandResult.getFeature().getName()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (!(commandResult.getDate() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                displayCalendarWithDate(commandResult);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                displayCalendar(commandResult.getModel());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"attendance\":"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            showAttendancePanel(commandResult.getModel());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"performance\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            showPerformancePanel(commandResult.getModel());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case \"records\":"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            showRecordsPanel(commandResult.getModel(), commandResult.getEventName());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code CalendarPanel} in the feature box."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Represents state of data in Athletick"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayCalendar(Model model) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarPanel calendarPanel \u003d new CalendarPanel(model);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code AttendancePanel} in the feature box."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Represents state of data in Athletick"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void showAttendancePanel(Model model) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AttendancePanel attendance \u003d new AttendancePanel(model);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(attendance.getRoot());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code PerformancePanel} in the feature box."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Represents state of data in Athletick"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void showPerformancePanel(Model model) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        PerformancePanel performance \u003d new PerformancePanel(model);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(performance.getRoot());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code RecordsPanel} for particular event in the feature box."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Represents state of data in Athletick"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param eventName Name of event."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void showRecordsPanel(Model model, String eventName) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        RecordsPanel recordsPanel \u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new RecordsPanel(model, eventName);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(recordsPanel.getRoot());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code InformationDisplay} when user selects a person."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayInformationDisplay() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        InformationDisplay informationDisplay \u003d new InformationDisplay(logic.getPerson(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                logic.getPersonAttendance(),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                logic.getAthleteEvents());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(informationDisplay.getRoot());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code CalendarPanel} or {@code CalendarDetailPanel} depending on type of date"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * provided in {@code commandResult}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param commandResult Command result from executing user command"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayCalendarWithDate(CommandResult commandResult) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model model \u003d commandResult.getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        switch (commandResult.getDate().getType()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            displayCalendarDetailPanel(commandResult, model);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            CalendarPanel calendarPanel \u003d new CalendarPanel(commandResult.getDate(), model);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            featureBoxPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Displays {@code CalendarDetailPanel} in featureBoxPlaceHolder."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param commandResult Command result from execution of calendar DDMMYYYY"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param model Model"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void displayCalendarDetailPanel(CommandResult commandResult, Model model) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarDetailPanel calendarDetailPanel \u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new CalendarDetailPanel(commandResult.getDate(), model);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(calendarDetailPanel.getRoot());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 133,
      "ChangUo79": 6,
      "hellodommy": 3,
      "jeunhoe": 1,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformancePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view performance is issued."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformancePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformancePanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private ReadOnlyPerformance performance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private VBox eventList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public PerformancePanel(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performance \u003d model.getPerformance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        populateEventList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Fills up the VBox with events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void populateEventList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : performance.getPerformance()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            EventRow eventRow \u003d new EventRow(event.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            eventList.getChildren().add(eventRow.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 14,
      "hellodommy": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that displays total number of records on a specified date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformanceStats extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformanceStats.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label totalRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public PerformanceStats(int numRecords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        totalRecords.setText(\"Total Records: \" + numRecords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceTableContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays a record for an event. A record includes a name and a timing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformanceTableContent extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformanceTableContent.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label timing;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public PerformanceTableContent(String personName, String personTiming) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        name.setText(personName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        timing.setText(personTiming);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceTableHeader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays event names."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformanceTableHeader extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformanceTableHeader.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label tableHeader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public PerformanceTableHeader(String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tableHeader.setText(eventName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        gender.setText(person.getGender().genderOfPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add((new TagLayout(tag.tagName)).getRoot()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "junhuplim": 3,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonPerformanceDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * The Ui component for SelectCommand that displays the performance of the selected person. The performance include"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class PersonPerformanceDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String FXML \u003d \"PersonPerformanceDisplay.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label bestPerformance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label bestPerformanceDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label recentPerformanceDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label mostRecent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public PersonPerformanceDisplay(String eventName, String bestDate, String performance, String recentDate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    String recent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        event.setText(eventName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        bestPerformanceDate.setText(bestDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        bestPerformance.setText(performance);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        recentPerformanceDate.setText(recentDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        mostRecent.setText(recent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordLineChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Contains details of an athlete\u0027s record for a certain event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class RecordLineChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String FXML \u003d \"RecordLineChart.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private List\u003cRecord\u003e records;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private LineChart lineChart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public RecordLineChart(String name, List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        populateChart();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Populates the LineChart that is used to present athlete performance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private void populateChart() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Record record : records) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String date \u003d record.getDate().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            double timing \u003d record.getTiming().getValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            series.getData().add(new XYChart.Data(date, timing));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        series.setName(name + \"\u0027s Progress\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        lineChart.getData().addAll(series);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * UI component that is displayed when the command to view records is issued."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class RecordsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String FXML \u003d \"RecordsPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private ReadOnlyPerformance performance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private VBox recordContents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Label noContent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public RecordsPanel(Model model, String eventName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performance \u003d model.getPerformance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : performance.getPerformance()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (event.getName().equals(eventName.toLowerCase())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                this.event \u003d event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventName.setText(event.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        populateRecords();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Fills up the RecordsPanel for each athlete with a record under this event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void populateRecords() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cPerson, List\u003cRecord\u003e\u003e hm \u003d event.getRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (hm.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            noContent.setText(\"There are no records for \" + event.getName() + \".\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                + \"Use \\\"performance INDEX e/EVENT_NAME d/DDMMYYYY t/SECONDS\\\" to start adding records under \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                + event.getName() + \"!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            noContent.setText(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            hm.forEach((person, recordList) -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                AthleteRecords ar \u003d new AthleteRecords(person, recordList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                recordContents.getChildren().add(ar.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a tag for an athlete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class TagLayout extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"TagLayout.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView tagIcon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public TagLayout(String labelText) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tagName.setText(labelText);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tagIcon.setImage(new Image(\"/images/tag_icon.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/athletick_logo_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            mainWindow.fillInnerParts(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 7,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/feature/Feature.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui.feature;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a feature shown in the feature box. Possible features include: 1) calendar, 2)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * attendance and 3) performance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Feature {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"You have provided an invalid feature. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"Please indicate one of the following features to view: 1) calendar, 2) attendance, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"3) performance, 4) records.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_NO_EVENT \u003d \"Please provide an event name to view the records for.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"Example: view records freestyle 50m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a Feature for viewing calendar, attendance, or performance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Feature(String featureName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(featureName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        checkArgument(isValidFeatureName(featureName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.name \u003d featureName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a Feature for viewing performance records."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Feature(String featureName, String eventName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(featureName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        checkArgument(isValidFeatureName(featureName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d featureName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if the feature name provided by the user is valid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param featureName String provided by user following the view command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return boolean indicating whether the feature name is valid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static boolean isValidFeatureName(String featureName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return featureName.equals(\"calendar\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                | featureName.equals(\"attendance\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                | featureName.equals(\"performance\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                | featureName.equals(\"records\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof Feature"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 name.equals(((Feature) other).name));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 44,
      "hellodommy": 28
    }
  },
  {
    "path": "src/main/resources/view/AthleteRecords.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cLabel fx:id\u003d\"athleteName\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #c7ecee;\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" textFill\u003d\"#130f40\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cInsets top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cVBox fx:id\u003d\"athleteStatBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: ffffff;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 23
    }
  },
  {
    "path": "src/main/resources/view/AttendanceChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"chartTitle\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Team Attendance Percentage\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cPieChart fx:id\u003d\"pieChart\" animated\u003d\"false\" labelLineLength\u003d\"10.0\" legendVisible\u003d\"false\" maxHeight\u003d\"100.0\" maxWidth\u003d\"250.0\" minHeight\u003d\"100.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"250.0\" startAngle\u003d\"90.0\" style\u003d\"-fx-padding: 0; -fx-background-color: #ffffff;\" titleSide\u003d\"LEFT\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cString fx:value\u003d\"chart-content\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cString fx:value\u003d\"default-color0.chart-pie\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cString fx:value\u003d\"default-color1.chart-pie\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cString fx:value\u003d\"chart-pie-label-line\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cString fx:value\u003d\"chart-pie-label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 26
    }
  },
  {
    "path": "src/main/resources/view/AttendancePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"400.0\" style\u003d\"-fx-background-color: #ffffff;\" styleClass\u003d\"edge-to-edge\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Attendance of all athletes\" textFill\u003d\"#badc58\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"32.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cVBox fx:id\u003d\"attendanceBox\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 14,
      "jeunhoe": 18
    }
  },
  {
    "path": "src/main/resources/view/AttendanceRateTableContent.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cGridPane maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Name\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cLabel fx:id\u003d\"attendanceRate\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Attendance Rate\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 34
    }
  },
  {
    "path": "src/main/resources/view/AttendanceRateTableHeader.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cGridPane maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Attendance Rate\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 41
    }
  },
  {
    "path": "src/main/resources/view/AttendanceTableContent.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cGridPane maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Name\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cImageView fx:id\u003d\"indicator\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 32
    }
  },
  {
    "path": "src/main/resources/view/AttendanceTableHeader.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cGridPane maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Attendance\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 42
    }
  },
  {
    "path": "src/main/resources/view/CalendarDetailPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cScrollPane fitToWidth\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"400.0\" styleClass\u003d\"edge-to-edge\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Attendance\" textFill\u003d\"#badc58\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"32.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox fx:id\u003d\"attendanceBox\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Performance\" textFill\u003d\"#e056fd\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"32.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox fx:id\u003d\"performanceBox\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 45
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currYear\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"15.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Current Year\" textFill\u003d\"#ffffffb2\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currDayAndDate\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"20.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Current Day and Date\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cRegion style\u003d\"-fx-background-color: #30336B;\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"22.5\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"9.0\" fitWidth\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cImage url\u003d\"@../images/green_dot.png\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cInsets right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel text\u003d\"Training\" textFill\u003d\"#ffffffb2\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"22.5\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"9.0\" fitWidth\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cImage url\u003d\"@../images/purple_dot.png\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cInsets right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel text\u003d\"Performance\" textFill\u003d\"#ffffffb2\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets right\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cButton fx:id\u003d\"prevButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handlePrevClick\" style\u003d\"-fx-background-color: #FFFFFF;\" styleClass\u003d\"null\" text\u003d\"Prev\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"selectedDateMessage\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"250.0\" text\u003d\"Selected Date and Year\" textFill\u003d\"#30336b\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cButton fx:id\u003d\"nextButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleNextClick\" style\u003d\"-fx-background-color: #FFFFFF;\" styleClass\u003d\"null\" text\u003d\"Next\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets left\u003d\"80.0\" right\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cBorderPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003ccenter\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cGridPane fx:id\u003d\"calendarGridPane\" alignment\u003d\"TOP_CENTER\" BorderPane.alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cRowConstraints prefHeight\u003d\"40.0\" valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cRowConstraints prefHeight\u003d\"40.0\" valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints prefHeight\u003d\"40.0\" valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints prefHeight\u003d\"40.0\" valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints prefHeight\u003d\"40.0\" valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints prefHeight\u003d\"40.0\" valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"16.0\" left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/center\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003ctop\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cGridPane alignment\u003d\"CENTER\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"S\" textFill\u003d\"#00000080\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"M\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"T\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"W\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"T\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"F\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"S\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/top\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 208
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cStackPane alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*.label {*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-size: 11pt;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-family: \"Segoe UI Semibold\";*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-text-fill: #555555;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-opacity: 0.9;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/ErrorMessage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"message\" alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Attendance Not Found\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 19
    }
  },
  {
    "path": "src/main/resources/view/EventRow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003cLabel fx:id\u003d\"eventName\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 10
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #eb4d4b !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background: #ffffff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".chart-content {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: #eb4d4b; }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: #6ab04c; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-stroke: #30336b;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-fill: #30336b;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-fill: #30336b;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 19,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/InformationDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox fx:id\u003d\"informationBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"39.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Profile\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets bottom\u003d\"4.0\" left\u003d\"32.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cVBox fx:id\u003d\"imageHolder\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cImageView fx:id\u003d\"photo\" fitHeight\u003d\"170.0\" fitWidth\u003d\"170.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWrapLength\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel fx:id\u003d\"secondaryTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"12.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Personal Information\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cGridPane fx:id\u003d\"informationBlock\" hgap\u003d\"10.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Name:\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"name\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$name\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Phone:\" wrapText\u003d\"true\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"phone\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$phone\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Email:\" wrapText\u003d\"true\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"email\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$email\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Address:\" wrapText\u003d\"true\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"address\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$address\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Attendance Rate\" wrapText\u003d\"true\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"attendanceRate\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$attendanceRate\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cLabel text\u003d\"Gender:\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"gender\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$gender\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                          \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                    \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"12.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Performance\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"120.0\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Events\" textAlignment\u003d\"CENTER\" textFill\u003d\"#fffdfd\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Best Performance\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Most Recent Timing\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cVBox fx:id\u003d\"performanceDisplay\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 28,
      "ChangUo79": 157,
      "jeunhoe": 8
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    background-color: #ffffff; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*.label {*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-size: 11pt;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-family: \"Segoe UI Semibold\";*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-text-fill: #555555;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-opacity: 0.9;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-prompt-text-fill: #e0e0e0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-base: #ffffff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-control-inner-background: #ffffff;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: transparent transparent transparent #ffffff;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 50%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%) !important;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 2px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu:showing {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 8 8 8 8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #dff9fb;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*.button:focused {*/"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-color: white, white;*/"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-width: 1, 1;*/"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-style: solid, segments(1, 1);*/"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-radius: 0, 0;*/"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-insets: 1 1 1 1, 0;*/"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0 3 0 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #95AFC0 #95AFC0 #95AFC0 #95AFC0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #30336B;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 366
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"740.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Athletick\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    \u003cImage url\u003d\"@/images/athletick_logo_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cHBox minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "              \u003cVBox fx:id\u003d\"personList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"350.0\" minWidth\u003d\"120.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #ffffff;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #95AFC0;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" style\u003d\"-fx-background-color: #FFFFFF;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"featureBoxPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 18,
      "ChangUo79": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PerformancePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #FFFFFF;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Performance\" textFill\u003d\"#e056fd\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cVBox fx:id\u003d\"eventList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 12,
      "hellodommy": 11
    }
  },
  {
    "path": "src/main/resources/view/PerformanceStats.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\" fillHeight\u003d\"false\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalRecords\" alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Total Records: X\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cInsets bottom\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 23
    }
  },
  {
    "path": "src/main/resources/view/PerformanceTableContent.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cGridPane maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Name\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"timing\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Timing\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 41
    }
  },
  {
    "path": "src/main/resources/view/PerformanceTableHeader.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"tableHeader\" alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Event Name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 19
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 13,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/PersonPerformanceDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003cGridPane gridLinesVisible\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"70.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cLabel fx:id\u003d\"event\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Event\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cGridPane gridLinesVisible\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel fx:id\u003d\"bestPerformance\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Best Performance\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel fx:id\u003d\"bestPerformanceDate\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Date\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cGridPane gridLinesVisible\u003d\"true\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel fx:id\u003d\"mostRecent\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"30.0\" prefWidth\u003d\"83.0\" text\u003d\"Most Recent\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel fx:id\u003d\"recentPerformanceDate\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Date\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 72
    }
  },
  {
    "path": "src/main/resources/view/RecordLineChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003cLineChart fx:id\u003d\"lineChart\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "  \u003cxAxis\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    \u003cCategoryAxis side\u003d\"BOTTOM\" style\u003d\"-fx-background-color: ffffff;\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "  \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "  \u003cyAxis\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    \u003cNumberAxis fx:id\u003d\"yAxis\" forceZeroInRange\u003d\"false\" side\u003d\"LEFT\" style\u003d\"-fx-background-color: ffffff;\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "  \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c/LineChart\u003e"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 18
    }
  },
  {
    "path": "src/main/resources/view/RecordsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cLabel fx:id\u003d\"eventName\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"eventName\" textFill\u003d\"#e056fd\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cScrollPane fitToWidth\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u003cVBox fx:id\u003d\"recordContents\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                  \u003cLabel fx:id\u003d\"noContent\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                        \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "               \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "hellodommy": 34
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cGridPane alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TagLayout.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cImageView fx:id\u003d\"tagIcon\" fitHeight\u003d\"13.0\" fitWidth\u003d\"13.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"tagName\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"6.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.storage.JsonAthletickStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.storage.JsonPerformanceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.storage.JsonTrainingManagerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonAthletickStorage athletickStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new JsonAthletickStorage(temporaryFolder.resolve(\"Athletick.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonPerformanceStorage eventStorage \u003d new JsonPerformanceStorage(temporaryFolder.resolve((\"events.json\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonTrainingManagerStorage attendanceStorage \u003d new JsonTrainingManagerStorage(temporaryFolder.resolve("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                \"attendance.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(athletickStorage, eventStorage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String deleteCommand \u003d \"delete -p 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Setup LogicManager with JsonAthletickIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonAthletickStorage athletickStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new JsonAthletickIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAthletick.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonPerformanceStorage eventStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new JsonPerformanceStorage(temporaryFolder.resolve(\"ioException.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonTrainingManagerStorage attendanceStorage \u003d new JsonTrainingManagerStorage(temporaryFolder.resolve("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                \"ioExceptionAttendance.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(athletickStorage, eventStorage,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                + GENDER_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static class JsonAthletickIoExceptionThrowingStub extends JsonAthletickStorage {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        private JsonAthletickIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void saveAthletick(ReadOnlyAthletick athletick, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 13,
      "ChangUo79": 1,
      "hellodommy": 7,
      "jeunhoe": 11,
      "junhuplim": 1,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new HistoryManager());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Person personInList \u003d model.getAthletick().getPersonList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "hellodommy": 2,
      "jeunhoe": 3,
      "junhuplim": 2,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.AttendanceRateEntry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void setAthletickFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public Person selectPerson() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void storePerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void setAthletick(ReadOnlyAthletick newData) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public ReadOnlyAthletick getAthletick() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public HistoryManager getHistory() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void sortAthletickByName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void addTraining(Training training) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void editPersonTrainingRecords(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Training deleteTrainingOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public List\u003cAttendanceEntry\u003e getTrainingAttendanceListOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public String getPersonAttendanceRateString(Person person) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public List\u003cAttendanceRateEntry\u003e getAttendanceRateOfAll() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public ReadOnlyAthletick getAthletickDeepCopy() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public List\u003cTraining\u003e getTrainingsDeepCopy(List\u003cTraining\u003e trainingsList) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public HashMap\u003cPerson, Boolean\u003e deepCopyHashMap(HashMap\u003cPerson, Boolean\u003e mapToCopy) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public ReadOnlyPerformance getPerformanceDeepCopy(ReadOnlyPerformance originalPerformance) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public List\u003cEvent\u003e getEventsDeepCopy(List\u003cEvent\u003e originalEvents) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Event getEventDeepCopy(Event originalEvent) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public List\u003cRecord\u003e getRecordsDeepCopy(List\u003cRecord\u003e originalRecords) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Record getRecordDeepCopy(Record originalRecord) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public boolean commandUnderTraining(Command command) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public boolean commandUnderPerformance(Command command) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Command undo() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Command redo() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public TrainingManager getTrainingManager() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void resetTrainingManager() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public boolean hasTrainingOn(AthletickDate training) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setPerformance(ReadOnlyPerformance performance) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addEvent(Event event) { }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public Event getEvent(String eventName) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void deleteEvent(Event target) { }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addRecord(String eventName, Person person, Record record) { }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void deleteRecord(String eventName, Person person, AthletickDate date) { }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        public ArrayList\u003cEvent\u003e getAthleteEvents(Person person) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void editPersonPerformanceRecords(Person target, Person editedPerson) { }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public ReadOnlyAthletick getAthletick() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new Athletick();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 17,
      "ChangUo79": 5,
      "hellodommy": 49,
      "jeunhoe": 49,
      "junhuplim": 53,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CalendarCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.testutil.AthletickDateBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CalendarCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_validDate_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate validDate \u003d new AthletickDateBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CommandResult commandResult \u003d new CalendarCommand(validDate).execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(CalendarCommand.MESSAGE_SUCCESS_1 + \"1st January 2019\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_invalidDateType_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate invalidDateType \u003d new AthletickDateBuilder().withType(0).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand \u003d new CalendarCommand(invalidDateType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(CommandException.class, CalendarCommand.MESSAGE_INVALID_DATE, ("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            ) -\u003e calendarCommand.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad1 \u003d new AthletickDateBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad2 \u003d new AthletickDateBuilder().withDay(2).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand1 \u003d new CalendarCommand(ad1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand2 \u003d new CalendarCommand(ad2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(calendarCommand1.equals(calendarCommand1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand1Copy \u003d new CalendarCommand(ad1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(calendarCommand1.equals(calendarCommand1Copy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(calendarCommand1.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(calendarCommand1.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        //different command -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(calendarCommand1.equals(calendarCommand2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 70,
      "hellodommy": 1,
      "jeunhoe": 2,
      "junhuplim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ClearCommand.MESSAGE_SUCCESS, false, false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        expectedModel.setAthletick(new Athletick());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 10,
      "hellodommy": 1,
      "jeunhoe": 3,
      "junhuplim": 3,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // different clear value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // different clear value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"Female\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"Male\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String VALID_PHOTO_AMY \u003d \"amy.png\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String VALID_PHOTO_BOB \u003d \"bob.png\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_EVENT \u003d \"freestyle 50m\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_DATE \u003d \"25122019\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_TIMING \u003d \"30.4\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String PHOTO_DESC_AMY \u003d \" \" + PREFIX_IMAGE + VALID_PHOTO_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String PHOTO_DESC_BOB \u003d \" \" + PREFIX_IMAGE + VALID_PHOTO_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String EVENT_DESC \u003d \" \" + PREFIX_EVENT + VALID_EVENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String TIMING_DESC \u003d \" \" + PREFIX_TIMING + VALID_TIMING;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"gay\"; // only are allowed 3 values"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String INVALID_PHOTO_DESC \u003d \" \" + PREFIX_IMAGE + \"@default.png\"; // non-alphanumeric not allowed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2nd Jan 2019\"; // letters not allowed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withPhoto(VALID_PHOTO_AMY).withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                .withPhoto(VALID_PHOTO_BOB).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * - the athletick, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick expectedAthletick \u003d new Athletick(actualModel.getAthletick());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(expectedAthletick, actualModel.getAthletick());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * {@code model}\u0027s athletick."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "ChangUo79": 6,
      "hellodommy": 11,
      "junhuplim": 9,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.EVENT_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.EVENT_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DeleteEventCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d \"freestyle 50m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \"hopscotch\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_validEvent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event eventToDelete \u003d new Event(VALID_EVENT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(eventToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, VALID_EVENT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_invalidEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event eventNotInPerformance \u003d new Event(INVALID_EVENT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(eventNotInPerformance);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, String.format(Event.MESSAGE_NO_SUCH_EVENT, INVALID_EVENT_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteEventCommand deleteEventFirstCommand \u003d new DeleteEventCommand(EVENT_ONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteEventCommand deleteEventSecondCommand \u003d new DeleteEventCommand(EVENT_TWO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(deleteEventFirstCommand.equals(deleteEventFirstCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(EVENT_ONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(deleteEventFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(deleteEventFirstCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(deleteEventFirstCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(deleteEventFirstCommand.equals(deleteEventSecondCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "hellodommy": 66,
      "jeunhoe": 3,
      "junhuplim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DeletePersonCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAthletick().getPersonList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deletePersonFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deletePersonSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(deletePersonFirstCommand.equals(deletePersonFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(deletePersonFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(deletePersonFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(deletePersonFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(deletePersonFirstCommand.equals(deletePersonSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "hellodommy": 20,
      "jeunhoe": 4,
      "junhuplim": 1,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Athletick(model.getAthletick()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new Performance(model.getPerformance()), model.getTrainingManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getHistory());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Athletick(model.getAthletick()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new Performance(model.getPerformance()), model.getTrainingManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getHistory());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Athletick(model.getAthletick()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new Performance(model.getPerformance()), model.getTrainingManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getHistory());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Athletick(model.getAthletick()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new Performance(model.getPerformance()), model.getTrainingManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getHistory());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Person personInList \u003d model.getAthletick().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAthletick().getPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 9,
      "hellodommy": 5,
      "jeunhoe": 10,
      "junhuplim": 1,
      "-": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.AttendanceRateEntry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event validEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        CommandResult commandResult \u003d new EventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(String.format(EventCommand.MESSAGE_SUCCESS, VALID_EVENT), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event validEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(validEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String.format(EventCommand.MESSAGE_DUPLICATE_EVENT, VALID_EVENT), () -\u003e eventCommand.execute(modelStub));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event butterly \u003d new Event(\"butterly\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event freestyle \u003d new Event(\"freestyle\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand addButterflyCommand \u003d new EventCommand(butterly);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand addFreeStyleCommand \u003d new EventCommand(freestyle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(addButterflyCommand.equals(addButterflyCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand addButterflyCommandCopy \u003d new EventCommand(butterly);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(addButterflyCommand.equals(addButterflyCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(addButterflyCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(addButterflyCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(addButterflyCommand.equals(addFreeStyleCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * A Model stub that always accept the event being added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new Performance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public Path getAthletickFilePath() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void setAthletickFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public Person selectPerson() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void storePerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void setAthletick(ReadOnlyAthletick newData) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public ReadOnlyAthletick getAthletick() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public HistoryManager getHistory() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void sortAthletickByName() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addTraining(Training training) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void editPersonTrainingRecords(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Training deleteTrainingOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public List\u003cAttendanceEntry\u003e getTrainingAttendanceListOnDate(AthletickDate date) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public String getPersonAttendanceRateString(Person person) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public List\u003cAttendanceRateEntry\u003e getAttendanceRateOfAll() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public ReadOnlyAthletick getAthletickDeepCopy() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public List\u003cTraining\u003e getTrainingsDeepCopy(List\u003cTraining\u003e trainingsList) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public HashMap\u003cPerson, Boolean\u003e deepCopyHashMap(HashMap\u003cPerson, Boolean\u003e mapToCopy) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public ReadOnlyPerformance getPerformanceDeepCopy(ReadOnlyPerformance originalPerformance) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public List\u003cEvent\u003e getEventsDeepCopy(List\u003cEvent\u003e originalEvents) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Event getEventDeepCopy(Event originalEvent) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public List\u003cRecord\u003e getRecordsDeepCopy(List\u003cRecord\u003e originalRecords) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Record getRecordDeepCopy(Record originalRecord) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public boolean commandUnderTraining(Command command) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public boolean commandUnderPerformance(Command command) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Command undo() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public Command redo() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public TrainingManager getTrainingManager() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void resetTrainingManager() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public boolean hasTrainingOn(AthletickDate training) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setPerformance(ReadOnlyPerformance performance) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public Event getEvent(String eventName) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void addRecord(String eventName, Person person, Record record) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void deleteRecord(String eventName, Person person, AthletickDate date) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        public ArrayList\u003cEvent\u003e getAthleteEvents(Person person) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void editPersonPerformanceRecords(Person target, Person editedPerson) { }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "ChangUo79": 5,
      "hellodommy": 277,
      "jeunhoe": 56,
      "junhuplim": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new TagMatchesPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new TagMatchesPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(filterFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d command.getNoMatchMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d preparePredicate(\"friends colleagues\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses {@code userInput} into a {@code TagMatchesPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private TagMatchesPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new TagMatchesPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "hellodommy": 82,
      "jeunhoe": 4,
      "junhuplim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "hellodommy": 2,
      "jeunhoe": 4,
      "junhuplim": 2,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                 false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "hellodommy": 1,
      "jeunhoe": 3,
      "junhuplim": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PerformanceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final AthletickDate VALID_ATHLETICK_DATE_ONE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new AthletickDate(25, 12, 2019, 2, \"December\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final AthletickDate VALID_ATHLETICK_DATE_TWO \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new AthletickDate(26, 12, 2019, 2, \"December\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final Timing VALID_ATHLETICK_TIMING \u003d new Timing(VALID_TIMING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final Record VALID_RECORD \u003d new Record(VALID_ATHLETICK_DATE_ONE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \"hurdles\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new PerformanceCommand(INDEX_FIRST_PERSON, VALID_EVENT, VALID_ATHLETICK_DATE_TWO,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                        VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d String.format(PerformanceCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                person.getName().fullName, VALID_EVENT, VALID_ATHLETICK_DATE_TWO, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.addRecord(VALID_EVENT, person, VALID_RECORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(performanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new PerformanceCommand(outOfBoundIndex, VALID_EVENT, VALID_ATHLETICK_DATE_ONE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(performanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAthletick().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new PerformanceCommand(outOfBoundIndex, VALID_EVENT, VALID_ATHLETICK_DATE_ONE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(performanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_invalidEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // event does not exist"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d new PerformanceCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                INDEX_FIRST_PERSON, INVALID_EVENT_NAME, VALID_ATHLETICK_DATE_ONE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(performanceCommand, model, String.format(Event.MESSAGE_NO_SUCH_EVENT, INVALID_EVENT_NAME));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_duplicateRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // adding the record first"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Record record \u003d new Record(VALID_ATHLETICK_DATE_ONE, new Timing(VALID_TIMING));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.getEvent(VALID_EVENT).addRecord(person, record);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d new PerformanceCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                INDEX_FIRST_PERSON, VALID_EVENT, VALID_ATHLETICK_DATE_ONE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(performanceCommand, model,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(Event.MESSAGE_RECORD_EXISTS, person.getName().fullName,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                        VALID_ATHLETICK_DATE_ONE, VALID_EVENT));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "hellodommy": 94,
      "jeunhoe": 5,
      "junhuplim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class SelectCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void execute_validIndexUnfliteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Person personToSelect \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, personToSelect);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                model.getTrainingManager(), new UserPrefs(), model.getHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        expectedModel.selectPerson();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertCommandSuccess(selectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandExpection() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAthletick().getPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private void showSelectPerson(Model model) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "ChangUo79": 80,
      "hellodommy": 2,
      "jeunhoe": 3,
      "junhuplim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new HistoryManager());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_listIsAlreadySorted_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(new SortCommand(), model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_listIsUnsorted_showsSortedList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.deletePerson(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.addPerson(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.sortAthletickByName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 39,
      "hellodommy": 1,
      "jeunhoe": 3,
      "junhuplim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TrainingCommandPresentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "class TrainingCommandPresentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date \u003d new AthletickDate(20, 10, 2019, 1, \"October\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TrainingCommandPresent(null, indexList));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TrainingCommandPresent(date, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.TrainingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.testutil.FeatureBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAthletick(), getTypicalPerformance(), new TrainingManager(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getAthletick(), model.getPerformance(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingManager(), new UserPrefs(), new HistoryManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_validFeature_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Feature feature \u003d new FeatureBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(feature);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d viewCommand.MESSAGE_SUCCESS_CALENDAR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_invalidFeature_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                ) -\u003e new FeatureBuilder().withName(\"test\").build());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 33,
      "hellodommy": 2,
      "jeunhoe": 3,
      "junhuplim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        // missing GENDER prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + VALID_GENDER_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + GENDER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + GENDER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + GENDER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + INVALID_GENDER_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + GENDER_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + GENDER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + GENDER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 45,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AthletickParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AthletickParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final AthletickParser parser \u003d new AthletickParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseCommand_deletePerson() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + FLAG_PERSON + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cString\u003e tagQueries \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand command \u003d (FilterCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                FilterCommand.COMMAND_WORD + \" \" + tagQueries.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(new FilterCommand(new TagMatchesPredicate(tagQueries)), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" 3\") instanceof SortCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 9,
      "hellodommy": 15,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CalendarCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private CalendarCommandParser parser \u003d new CalendarCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs1_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs2_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"test\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_validArgs_returnsCalendarCommand() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseSuccess(parser, \"01012019\", new CalendarCommand(new AthletickDate(1, 1, 2019, 1, \"January\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_RECORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_TRAINING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeletePersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.DeleteRecordCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final AthletickDate VALID_DATE \u003d new AthletickDate(25, 12, 2019, 2, \"December\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String FLAG_INVALID \u003d \"-person\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgsPerson_returnsDeletePersonCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, FLAG_PERSON + SPACE + VALID_INDEX, new DeletePersonCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgsEvent_returnsDeleteEventCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, FLAG_EVENT + SPACE + VALID_EVENT, new DeleteEventCommand(new Event(VALID_EVENT)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgsRecord_returnsDeleteRecordCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String userInput \u003d FLAG_RECORD + SPACE + VALID_INDEX + EVENT_DESC + DATE_DESC;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, userInput, new DeleteRecordCommand(INDEX_FIRST_PERSON, VALID_EVENT, VALID_DATE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no space in between flag and argument"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            parser, FLAG_PERSON + VALID_INDEX,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            FLAG_EVENT + VALID_EVENT, String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid flag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            FLAG_INVALID + \" \" + VALID_INDEX,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void getFlag_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null argument"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parser.getFlag(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // short argument"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.getFlag(\"p\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.getFlag(\"-\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid flag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.getFlag(FLAG_INVALID));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void getFlag_validArgs_returnsTrimmedFlag() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // person flag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(FLAG_PERSON.getFlag(), parser.getFlag(\"-p\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // event flag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(FLAG_EVENT.getFlag(), parser.getFlag(\"-e\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // training flag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(FLAG_TRAINING.getFlag(), parser.getFlag(\"-t\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // record flag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(FLAG_RECORD.getFlag(), parser.getFlag(\"-r\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parsePerson_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no argument"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parsePerson(FLAG_PERSON.getFlag()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // non-numeric argument"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parsePerson(FLAG_PERSON.getFlag() + \" John\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parsePerson(FLAG_PERSON.getFlag() + \" 0\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parsePerson(FLAG_PERSON.getFlag() + \" -1\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parsePerson_validPersonArgs_returnsDeletePersonCommand() throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String userInput \u003d FLAG_PERSON + SPACE + targetIndex.getOneBased();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeletePersonCommand expectedCommand \u003d new DeletePersonCommand(targetIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(expectedCommand, parser.parsePerson(userInput));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseEvent_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no argument"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseEvent(FLAG_EVENT.getFlag()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseEvent_validEventArgs_returnsDeleteEventCommand() throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event targetEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String userInput \u003d FLAG_EVENT + SPACE + VALID_EVENT;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteEventCommand expectedCommand \u003d new DeleteEventCommand(targetEvent);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(expectedCommand, parser.parseEvent(userInput));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseRecord_validRecordArgs_returnsDeleteRecordCommand() throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String userInput \u003d FLAG_RECORD + SPACE + VALID_INDEX + EVENT_DESC + DATE_DESC;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        DeleteRecordCommand expectedCommand \u003d new DeleteRecordCommand(targetIndex, VALID_EVENT, VALID_DATE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(expectedCommand, parser.parseRecord(userInput));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseRecord_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no argument"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseRecord(FLAG_RECORD.getFlag()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseRecord(FLAG_RECORD + EVENT_DESC + DATE_DESC));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing event"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseRecord(FLAG_RECORD + SPACE + VALID_INDEX + DATE_DESC));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseRecord(FLAG_RECORD + SPACE + VALID_INDEX + EVENT_DESC));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 121,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 1,
      "-": 210
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EventCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private EventCommandParser parser \u003d new EventCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgs_returnsEventCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, VALID_EVENT, new EventCommand(new Event(VALID_EVENT)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new FilterCommand(new TagMatchesPredicate(Arrays.asList(\"captain\", \"freestyle\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, \"captain freestyle\", expectedFilterCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, \" \\n captain \\n \\t freestyle  \\t\", expectedFilterCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FlagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_EVENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FlagTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Flag(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void isValidFlag() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null flag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Flag.isValidFlag(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid flag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(Flag.isValidFlag(\"\")); // empty string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(Flag.isValidFlag(\" \")); // spaces only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(Flag.isValidFlag(\"-person\")); // should be -p only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(Flag.isValidFlag(\"-event\")); // should be -e only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // valid flag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(Flag.isValidFlag(\"-p\")); // person flag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(Flag.isValidFlag(\"-e\")); // event flag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Flag firstFlag \u003d FLAG_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Flag secondFlag \u003d FLAG_EVENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(firstFlag.equals(firstFlag));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Flag firstFlagCopy \u003d new Flag(\"-p\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(firstFlag.equals(firstFlagCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstFlag.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstFlag.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different flag -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstFlag.equals(secondFlag));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String VALID_EVENT \u003d \"50m backstroke\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseEvent_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEvent(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseEvent_validValueWithoutWhitespace_returnsEvent() throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event expectedEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(expectedEvent, new Event(ParserUtil.parseEvent(VALID_EVENT)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseEvent_validValueWithWhitespace_returnsTrimmedEvent() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event expectedEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(expectedEvent, new Event(ParserUtil.parseEvent(VALID_EVENT + WHITESPACE)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 20,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PerformanceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PerformanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private PerformanceCommandParser parser \u003d new PerformanceCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, EVENT_DESC + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing event prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + VALID_EVENT + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + EVENT_DESC + VALID_DATE + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing timing prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + EVENT_DESC + DATE_DESC + VALID_TIMING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + VALID_EVENT + VALID_DATE + VALID_TIMING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            VALID_INDEX + EVENT_DESC + INVALID_DATE_DESC + TIMING_DESC, String.format(AthletickDate.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        AthletickDate.DATE_FORMAT_TYPE_ONE) + \"\\n\" + AthletickDate.MONTH_CONSTRAINTS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        + \"\\n\" + AthletickDate.YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            PREAMBLE_NON_EMPTY + VALID_INDEX + VALID_EVENT + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EVENT_DESC + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"0\" + EVENT_DESC + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "hellodommy": 78,
      "jeunhoe": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class SelectCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertParseFailure(parser, \"b\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TrainingCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommandAbsent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommandPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "class TrainingCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private TrainingCommandParser parser \u003d new TrainingCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void parseWithoutFlag_noDate_noIndexPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrainingCommandPresent.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertParseFailure(parser, \"1 3 5\", expectedMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void parseWithFlag_noDate_noIndexPrefix() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrainingCommandAbsent.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertParseFailure(parser, \"-a 1 3 5\", expectedMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void parseWithoutFlag_noDate_invalidText() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrainingCommandPresent.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertParseFailure(parser, \"#/1 3 5 haha\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertParseFailure(parser, \"this will definitely fail\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void parseWithoutFlag_invalidDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrainingCommandPresent.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertParseFailure(parser, \"d/1234567890 #/1 3 5\", expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs1_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"1\", Feature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs2_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"string\", Feature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseSuccess(parser, \"calendar\", new ViewCommand(new Feature(\"calendar\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AthletickTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AthletickTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final Athletick athletick \u003d new Athletick();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(Collections.emptyList(), athletick.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e athletick.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick newData \u003d getTypicalAthletick();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(newData, athletick);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickStub newData \u003d new AthletickStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e athletick.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e athletick.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(athletick.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(athletick.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(athletick.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void removePerson_personInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick.addPerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick.removePerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(athletick.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e athletick.getPersonList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static class AthletickStub implements ReadOnlyAthletick {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 24,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AttendanceRateEntryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.FIRST_TRAINING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.FOURTH_TRAINING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.SECOND_TRAINING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.THIRD_TRAINING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "class AttendanceRateEntryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(SECOND_TRAINING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(THIRD_TRAINING);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void constructorTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry entry \u003d new AttendanceRateEntry(ALICE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                trainingManager.getPersonAttendanceRateString(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(entry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getPersonTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry entry \u003d new AttendanceRateEntry(BENSON,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                trainingManager.getPersonAttendanceRateString(BENSON));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(entry.getPerson(), BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(entry.getPerson(), ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getAttendanceRateString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry entry \u003d new AttendanceRateEntry(CARL, trainingManager.getPersonAttendanceRateString(CARL));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(entry.getAttendanceRateString(), trainingManager.getPersonAttendanceRateString(CARL));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry firstEntry \u003d new AttendanceRateEntry(DANIEL,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                trainingManager.getPersonAttendanceRateString(DANIEL));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry firstEntryCopy \u003d new AttendanceRateEntry(DANIEL,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                trainingManager.getPersonAttendanceRateString(DANIEL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry secondEntry \u003d new AttendanceRateEntry(ELLE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                trainingManager.getPersonAttendanceRateString(ELLE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceRateEntry secondEntryInvalid \u003d new AttendanceRateEntry(ELLE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                trainingManager.getPersonAttendanceRateString(GEORGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(firstEntry, firstEntry);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(firstEntry, firstEntryCopy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(firstEntry, secondEntry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(secondEntry, secondEntryInvalid);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.testutil.AthletickBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(new Athletick(), new Athletick(modelManager.getAthletick()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        userPrefs.setAthletickFilePath(Paths.get(\"athletick/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        userPrefs.setAthletickFilePath(Paths.get(\"new/athletick/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setAthletickFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAthletickFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setAthletickFilePath_validPath_setsAthletickFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.setAthletickFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(path, modelManager.getAthletickFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void hasPerson_personNotInAthletick_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void hasPerson_personInAthletick_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setPerson_changePerson_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.setPerson(ALICE, BENSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(modelManager.hasPerson(BENSON));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortAthletickByName_modifyList_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.sortAthletickByName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(modelManager.getAthletick().getPersonList().get(0), ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick athletick \u003d new AthletickBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick differentAthletick \u003d new Athletick();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance performance \u003d new Performance();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        modelManager \u003d new ModelManager(athletick, performance, trainingManager, userPrefs, history);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(athletick, performance, new TrainingManager(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            userPrefs, new HistoryManager());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // different Athletick -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAthletick, performance, trainingManager, userPrefs,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            history)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(athletick, performance, trainingManager,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                userPrefs, history)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        differentUserPrefs.setAthletickFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(athletick, performance, trainingManager,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                differentUserPrefs, history)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 31,
      "hellodommy": 2,
      "jeunhoe": 6,
      "junhuplim": 6,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TrainingManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.FIRST_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.SECOND_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.THIRD_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.FIRST_TRAINING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.FOURTH_TRAINING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.SECOND_TRAINING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.THIRD_TRAINING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.AttendanceEntry;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "class TrainingManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManagerWithoutList \u003d new TrainingManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(trainingManagerWithoutList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(Collections.emptyList(), trainingManagerWithoutList.getTrainings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainings \u003d new ArrayList\u003cTraining\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(FIRST_TRAINING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(SECOND_TRAINING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(THIRD_TRAINING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManagerWithList \u003d new TrainingManager(trainings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(trainingManagerWithList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(trainings, trainingManagerWithList.getTrainings());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void hasTraining_validDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(FIRST_TRAINING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(SECOND_TRAINING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(THIRD_TRAINING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager(trainings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(trainingManager.hasTrainingOnDate(FIRST_DATE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(trainingManager.hasTrainingOnDate(SECOND_DATE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(trainingManager.hasTrainingOnDate(THIRD_DATE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getTrainings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(trainingManager.getTrainings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(FIRST_TRAINING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(trainings, trainingManager.getTrainings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void addTraining_normalAddition() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainings.add(FIRST_TRAINING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(trainingManager.getTrainings(), trainings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void addTraining_trainingWithSortedList_returnTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainingsOrdered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingsOrdered.add(FIRST_TRAINING);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingsOrdered.add(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(trainingManager.getTrainings(), trainingsOrdered);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void addTraining_trainingWithUnsortedList_returnFalse() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainingsUnordered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingsUnordered.add(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingsUnordered.add(FIRST_TRAINING);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(trainingManager.getTrainings(), trainingsUnordered);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getPersonAttendedTrainings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(SECOND_TRAINING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(THIRD_TRAINING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(4, trainingManager.getPersonAttendedTrainings(ALICE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(2, trainingManager.getPersonAttendedTrainings(HOON));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getPersonAbsentTrainings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(SECOND_TRAINING);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(THIRD_TRAINING);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(1, trainingManager.getPersonAbsentTrainings(GEORGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(1, trainingManager.getPersonAbsentTrainings(HOON));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getPersonTotalTrainings() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(SECOND_TRAINING);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(THIRD_TRAINING);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FOURTH_TRAINING);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(4, trainingManager.getPersonTotalTrainings(ALICE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(4, trainingManager.getPersonTotalTrainings(GEORGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(3, trainingManager.getPersonTotalTrainings(HOON));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(2, trainingManager.getPersonTotalTrainings(IDA));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getTrainingAttendanceListOnDate() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        TrainingManager trainingManager \u003d new TrainingManager();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingManager.addTraining(FIRST_TRAINING);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceEntry\u003e firstAttendanceEntries \u003d trainingManager.getTrainingAttendanceListOnDate(FIRST_DATE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceEntry\u003e attendanceEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(ALICE, true));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(BENSON, true));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(CARL, false));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(DANIEL, false));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(ELLE, true));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(FIONA, false));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(GEORGE, false));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(firstAttendanceEntries.containsAll(attendanceEntries));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 4,
      "jeunhoe": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAthletickFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/date/AthletickDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class AthletickDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AthletickDate(1, 1, 1, 0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getDay() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int day \u003d td.getDay();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(1, day);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getMonth() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int month \u003d td.getMonth();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(1, month);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getYear() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int year \u003d td.getYear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(2019, year);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getType() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int type \u003d td.getType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(1, type);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getMth() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String mth \u003d td.getMth();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"January\", mth);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 51,
      "hellodommy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/performance/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.EVENT_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.EVENT_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \" 50m breaststroke\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d \"50m breaststroke\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(EVENT_ONE.isSameEvent(EVENT_ONE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.isSameEvent(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.isSameEvent(EVENT_TWO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event eventCopy \u003d new Event(EVENT_ONE.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(EVENT_ONE.equals(eventCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(EVENT_ONE.equals(EVENT_ONE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.equals(EVENT_TWO));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no leading whitespace -\u003e is valid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(Event.isValidName(VALID_EVENT_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // leading whitespace -\u003e is not valid"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(Event.isValidName(INVALID_EVENT_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/performance/RecordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.DeleteCommandParserTest.VALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // both null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Record(null, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // date null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Record(null, new Timing(VALID_TIMING)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // timing null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Record(VALID_DATE, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        // null Gender"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        // invalid Gender"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertFalse(Gender.isValidGender(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertFalse(Gender.isValidGender(\"gay2\")); // contains alphanumeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        // valid Gender"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertTrue(Gender.isValidGender(\"others\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertTrue(Gender.isValidGender(\"male\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertTrue(Gender.isValidGender(\"female\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhotoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class PhotoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Photo(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void constructor_invalidPhoto_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String invalidPhoto \u003d \"@dummy.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Photo(invalidPhoto));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void isValidPhoto() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Photo.isValidFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"!@#dummy.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"21\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"dummy.jpeg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"Chicken.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"12345.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"Default.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"bobby97.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"986amyBoseman.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TagMatchesPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class TagMatchesPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate firstPredicate \u003d new TagMatchesPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate secondPredicate \u003d new TagMatchesPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate firstPredicateCopy \u003d new TagMatchesPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void test_tagMatchesQuery_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // One tag"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d new TagMatchesPredicate(Collections.singletonList(\"captain\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Multiple tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"captain\", \"freestyle\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\", \"freestyle\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Only one matching tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"captain\", \"freestyle\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\", \"butterfly\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Mixed-case tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"cApTaIn\", \"FrEeStYlE\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\", \"freestyle\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void test_tagDoesNotMatchQuery_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Zero tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d new TagMatchesPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"captain\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Non-matching tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"captain\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"butterfly\", \"injured\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Comparators.NAME_COMPARATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortByName_unorderedList_returnsTrue() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        uniquePersonList.sortByName(NAME_COMPARATOR);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Iterator\u003cPerson\u003e iterator \u003d uniquePersonList.iterator();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(ALICE.isSamePerson(iterator.next()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(BOB.isSamePerson(iterator.next()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 12,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/training/AttendanceEntryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.model.training;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "class AttendanceEntryTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void constructorTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry entry \u003d new AttendanceEntry(ALICE, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(entry);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getPerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry entry \u003d new AttendanceEntry(BENSON, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(entry.getPerson(), BENSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void getIsPresent() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry entryAttended \u003d new AttendanceEntry(CARL, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry entryAbsent \u003d new AttendanceEntry(DANIEL, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(entryAttended.getIsPresent(), true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(entryAbsent.getIsPresent(), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void equalsTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry entry \u003d new AttendanceEntry(ELLE, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry diffPresentEntry \u003d new AttendanceEntry(ELLE, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry diffPersonEntry \u003d new AttendanceEntry(FIONA, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceEntry anotherEntry \u003d new AttendanceEntry(ELLE, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(entry, diffPresentEntry);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotEquals(entry, diffPersonEntry);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(entry, anotherEntry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/training/TrainingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.training;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.FIRST_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalTrainings.FIRST_TRAINING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class TrainingTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d new Training(FIRST_DATE, new HashMap\u003cPerson, Boolean\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(training);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(FIRST_TRAINING.getDate(), FIRST_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void getTrainingAttendance() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(FIRST_TRAINING.getTrainingAttendance());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void test_validDate_returnTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AthletickDate date \u003d FIRST_DATE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(training.getDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(date.equals(training.getDate()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void test_validTrainingAttendance_returnTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertNotNull(training);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void test_personExists() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(BENSON));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(CARL));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(DANIEL));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(ELLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(FIONA));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPerson(GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void test_personDoesNotExists() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(training.hasPerson(HOON));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(training.hasPerson(IDA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void test_personAttended() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPersonAttended(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPersonAttended(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.hasPersonAttended(ELLE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void test_personAbsent() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(training.hasPersonAttended(CARL));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(training.hasPersonAttended(GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(training.hasPersonAttended(FIONA));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertFalse(training.hasPersonAttended(DANIEL));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void test_getTrainingAttendanceList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d FIRST_TRAINING;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cAttendanceEntry\u003e attendanceEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(ALICE, true));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(BENSON, true));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(CARL, false));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(DANIEL, false));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(ELLE, true));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(FIONA, false));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceEntries.add(new AttendanceEntry(GEORGE, false));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertTrue(training.getTrainingAttendanceList().containsAll(attendanceEntries));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 32,
      "jeunhoe": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"Gay\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String INVALID_PHOTO \u003d \"@dummy.png\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String VALID_PHOTO \u003d BENSON.getPhoto().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_GENDER, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    VALID_PHOTO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_GENDER, VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_GENDER, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    VALID_PHOTO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_GENDER, VALID_ADDRESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_GENDER, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    VALID_PHOTO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_GENDER, VALID_ADDRESS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_GENDER, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                VALID_PHOTO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, \"\", VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                VALID_PHOTO);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_GENDER, INVALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    VALID_PHOTO);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_GENDER,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            null, VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_GENDER, VALID_ADDRESS, invalidTags,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    VALID_PHOTO);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void toModelType_invalidPhoto_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_GENDER,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS, INVALID_PHOTO);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String expectedMessage \u003d Photo.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void toModelType_nullPhoto_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_GENDER,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Photo.class.getSimpleName());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 16,
      "junhuplim": 41,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAthletickStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class JsonAthletickStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAthletickStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void readAthletick_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAthletick(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAthletick\u003e readAthletick(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new JsonAthletickStorage(Paths.get(filePath)).readAthletick(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(readAthletick(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAthletick(\"notJsonFormatAthletick.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void readAthletick_invalidPersonAthletick_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAthletick(\"invalidPersonAthletick.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void readAthletick_invalidAndValidPersonAthletick_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAthletick(\"invalidAndValidPersonAthletick.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void readAndSaveAthletick_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAthletick.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick original \u003d getTypicalAthletick();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonAthletickStorage jsonAthletickStorage \u003d new JsonAthletickStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        jsonAthletickStorage.saveAthletick(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ReadOnlyAthletick readBack \u003d jsonAthletickStorage.readAthletick(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(original, new Athletick(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        jsonAthletickStorage.saveAthletick(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        readBack \u003d jsonAthletickStorage.readAthletick(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(original, new Athletick(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        jsonAthletickStorage.saveAthletick(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        readBack \u003d jsonAthletickStorage.readAthletick().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(original, new Athletick(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void saveAthletick_nullAthletick_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAthletick(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Saves {@code Athletick} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void saveAthletick(ReadOnlyAthletick athletick, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            new JsonAthletickStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    .saveAthletick(athletick, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void saveAthletick_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAthletick(new Athletick(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAthletickTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class JsonSerializableAthletickTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAthletickTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAthletick.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAthletick.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAthletick.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonSerializableAthletick dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                JsonSerializableAthletick.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick athletickFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick typicalPersonsAthletick \u003d TypicalPersons.getTypicalAthletick();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(athletickFromFile, typicalPersonsAthletick);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonSerializableAthletick dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                JsonSerializableAthletick.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonSerializableAthletick dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                JsonSerializableAthletick.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAthletick.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 16,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        userPrefs.setAthletickFilePath(Paths.get(\"data\", \"athletick.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAthletick;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ReadOnlyAthletick;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        JsonAthletickStorage addressBookStorage \u003d new JsonAthletickStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonPerformanceStorage eventStorage \u003d new JsonPerformanceStorage(getTempFilePath(\"el\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonTrainingManagerStorage attendanceStorage \u003d new JsonTrainingManagerStorage(getTempFilePath(\"att\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, eventStorage, attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick original \u003d getTypicalAthletick();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        storageManager.saveAthletick(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ReadOnlyAthletick retrieved \u003d storageManager.readAthletick().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(original, new Athletick(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertNotNull(storageManager.getAthletickFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 9,
      "hellodommy": 2,
      "jeunhoe": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AthletickBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A utility class to help with building Athletick objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " *     {@code Athletick a \u003d new AthletickBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AthletickBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Athletick athletick;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick \u003d new Athletick();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickBuilder(Athletick athletick) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.athletick \u003d athletick;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        athletick.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Athletick build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athletick;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AthletickDateBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A utility class to help with building AthletickDate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AthletickDateBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_DAY \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_MONTH \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_YEAR \u003d 2019;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_TYPE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String DEFAULT_MTH \u003d \"January\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String mth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        day \u003d DEFAULT_DAY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d DEFAULT_MONTH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d DEFAULT_YEAR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        mth \u003d DEFAULT_MTH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code day} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withDay(int day) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code month} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withMonth(int month) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code year} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withYear(int year) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code type} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withType(int type) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code mth} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withMth(String mth) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.mth \u003d mth;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDate build() throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new AthletickDate(day, month, year, type, mth);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Comparators.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.PersonNameComparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class containing comparators used for sorting the list of Persons to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Comparators {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final PersonNameComparator NAME_COMPARATOR \u003d new PersonNameComparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Sets the {@code Photo} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public EditPersonDescriptorBuilder withPhoto(String photo) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        descriptor.setPhoto(new Photo(photo));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 9,
      "junhuplim": 9,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FeatureBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.ui.feature.Feature;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A utility class to help with building Feature objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class FeatureBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"calendar\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public FeatureBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code name} of the {@code FeatureBuilder} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public FeatureBuilder withName(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Feature build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new Feature(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String DEFAULT_PHOTO \u003d \"default.png\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Photo photo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d new Photo(DEFAULT_PHOTO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d personToCopy.getPhoto();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Sets the {@code Photo} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public PersonBuilder withPhoto(String photo) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.photo \u003d new Photo(photo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new Person(name, phone, email, gender, address, tags, photo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 12,
      "junhuplim": 13,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().genderOfPerson + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.genderOfPerson).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 3,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TrainingBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A utility class to help with building Training objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private HashMap\u003cPerson, Boolean\u003e attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Initializes the TrainingBuilder with the data of {@code training}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingBuilder(Training training) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d training.getDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendance \u003d training.getTrainingAttendance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Sets the {@code date} of the {@code Training} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingBuilder withDate(AthletickDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Sets the {@code attendance} of the {@code Training} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingBuilder withAttendance(HashMap\u003cPerson, Boolean\u003e attendance) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Training build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new Training(this.date, this.attendance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAthletickDates.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A utility class containing {@code AthletickDate} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TypicalAthletickDates {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final AthletickDate FIRST_DATE \u003d new AthletickDate(20, 10, 2019, 1, \"October\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final AthletickDate SECOND_DATE \u003d new AthletickDate(26, 10, 2019, 1, \"October\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final AthletickDate THIRD_DATE \u003d new AthletickDate(6, 11, 2019, 1, \"November\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final AthletickDate FOURTH_DATE \u003d new AthletickDate(6, 2, 2020, 1, \"February\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private TypicalAthletickDates(){}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPerformance.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class TypicalPerformance {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Event EVENT_ONE \u003d new Event(\"freestyle 50m\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Event EVENT_TWO \u003d new Event(\"backstroke 100m\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private TypicalPerformance() {} // prevents instantiation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns an {@code Performance} with all the typical events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static Performance getTypicalPerformance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance performance \u003d new Performance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            performance.addEvent(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EVENT_ONE, EVENT_TWO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTO_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTO_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Athletick;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withPhone(\"94351253\").withGender(\"Female\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            .withTags(\"colleagues\").withPhoto(\"alice.png\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withGender(\"Male\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"heinz@example.com\").withGender(\"Male\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"wall street\").withPhoto(\"carl.png\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withGender(\"Male\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withPhoto(\"daniel.png\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"werner@example.com\").withGender(\"Others\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"michegan ave\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"lydia@example.com\").withGender(\"Female\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"little tokyo\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"anna@example.com\").withGender(\"Male\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"4th street\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"stefan@example.com\").withGender(\"Female\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"little india\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(\"hans@example.com\").withGender(\"Female\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(\"chicago ave\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withPhoto(VALID_PHOTO_AMY).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withPhoto(VALID_PHOTO_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static Athletick getTypicalAthletick() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Athletick a \u003d new Athletick();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            a.addPerson(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return a;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "ChangUo79": 7,
      "hellodommy": 1,
      "junhuplim": 22,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTrainings.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.FIRST_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.FOURTH_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.SECOND_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalAthletickDates.THIRD_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A sample class of a Hashmap consisting of players and their attendance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TypicalTrainings {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final HashMap\u003cPerson, Boolean\u003e firstAttendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e hashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ALICE, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(BENSON, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(CARL, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(DANIEL, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ELLE, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(FIONA, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(GEORGE, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        firstAttendance \u003d hashMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    // Hoon did not attend"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final HashMap\u003cPerson, Boolean\u003e secondAttendance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e hashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ALICE, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(BENSON, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(CARL, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(DANIEL, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ELLE, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(FIONA, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(GEORGE, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(HOON, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        secondAttendance \u003d hashMap;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    // Ida did not attend"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final HashMap\u003cPerson, Boolean\u003e thirdAttendance;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e hashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ALICE, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(BENSON, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(CARL, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(DANIEL, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ELLE, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(FIONA, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(GEORGE, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(HOON, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(IDA, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        thirdAttendance \u003d hashMap;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    // All attend"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final HashMap\u003cPerson, Boolean\u003e fourthAttendance;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e hashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ALICE, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(BENSON, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(CARL, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(DANIEL, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(ELLE, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(FIONA, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(GEORGE, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(HOON, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        hashMap.put(IDA, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        fourthAttendance \u003d hashMap;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Training FIRST_TRAINING \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingBuilder().withDate(FIRST_DATE).withAttendance(firstAttendance).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Training SECOND_TRAINING \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingBuilder().withDate(SECOND_DATE).withAttendance(secondAttendance).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Training THIRD_TRAINING \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingBuilder().withDate(THIRD_DATE).withAttendance(thirdAttendance).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final Training FOURTH_TRAINING \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            new TrainingBuilder().withDate(FOURTH_DATE).withAttendance(fourthAttendance).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private TypicalTrainings() {}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/feature/FeatureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui.feature;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class FeatureTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Feature(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Feature(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void isValidFeatureName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Feature.isValidFeatureName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"   \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"123\")); // numbers only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"@#$\")); // special characters only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"test\")); // wrong string sequence"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(Feature.isValidFeatureName(\"calendar\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(Feature.isValidFeatureName(\"performance\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(Feature.isValidFeatureName(\"attendance\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"calendar\", new Feature(\"calendar\").toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 41,
      "ChangUo79": 4
    }
  }
]
