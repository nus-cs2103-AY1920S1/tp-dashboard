[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d Athletick"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T12-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-T12-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://ci.appveyor.com/project/hellodommy/main[image:https://ci.appveyor.com/api/projects/status/lsaggubb3k8wrx19?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T12-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T12-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T12-3/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[MIT License]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* This is a desktop team management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* It is a Java application intended for coaches or captains in charge of performance sports teams."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* This application was built based on Address Book (Level 3), an initiative of the https://se-education.org[SE-EDU] team."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    archiveName \u003d \u0027Athletick.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u0027site-name\u0027: \u0027Athletick\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T12-3/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Dominique Ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::hellodommy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty} [https://github.com/hellodommy[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: Scheduling and tracking, Deliverables and deadlines, *Model Component*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Erwin Chan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "image::changuo79.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/ChangUo79[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Test Engineer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: *Commons Component*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Lim Jun Hup"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::junhuplim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/junhuplim[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Back-end Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: *Logic Component*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Poon Jeun Hoe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::jeunhoe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/jeunhoe[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Quality Assurance Engineer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: Code quality, Documentation, *Ui Component*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Shawn Lee"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::shawnlsj97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "{empty}[https://github.com/shawnlsj97[github]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Role: Integration Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Responsibilities: Git expert, *Storage Component*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 1,
      "hellodommy": 24,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T12-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* *Email us* : You can also reach us at `dominique@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003d Athletick - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "By: `AY1920S1-CS2103T-T12-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section specifies the purpose of this document and design goals of Athletick."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This document describes the software architecture and system design of Athletick, a team management desktop application for coaches and team captains of timing-based performance sports. It also includes some of the design considerations for the implementation of Athletick\u0027s features."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The intended audience of this document includes the developers and software testers of Athletick."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Design goals"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick was developed as part of CS2103T, a software engineering module taken in the National University of Singapore. We were tasked to morph a generic https://se-education.org/addressbook-level3/[address book application] that manages contacts into an application that manages something else. At the end of the project, it should be ready to be continued by future developers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "As part of the project constraints, the input to Athletick needs to be primarily Command-Line Interface (CLI). Non-CLI inputs will reduce the suitability of the product to our target users. Taking this into consideration, the following principles guide the design of Athletick:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". **Friendlier Syntax**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "In order to cater to beginner and experienced users of Athletick, we have provided shorter aliases for our command words. This helps new users to use intuitive and self-explanatory commands, while advanced users can accomplish their tasks more quickly with a shorter command syntax."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". **Optimised Performance**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick should be able to hold up to 1000 athletes, attendance and performance records without a noticeable sluggishness in performance for typical usage. To achieve this, we used optimal data structures for storing and retrieval of data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". **Designer Friendly**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "As Athletick is intended for future student developers like us to make modifications and extensions to its behaviour, adhering to the high-level design architecture strictly was a necessity. This translates to extensive use of abstractions for code clarity. Additionally, we provided Javadoc comments for our classes and methods for developers to understand how they work."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d System design"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section introduces the high-level design of Athletick and gives you a basic understanding of how each component operates and interacts with one another."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::ArchitectureDiagram.png[width\u003d400]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of Athletick. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Displays the UI of Athletick."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands from the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of Athletick in-memory."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "For example, the `Logic` component (refer to the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Component Interactions for `delete 1` Command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::ArchitectureSequenceDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* can save the Athletick data in json format and read it back."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented. We have included our design considerations for you to understand our decision making processes."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Training \u0026 Attendance feature"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "To facilitate management of training sessions, the `Model` stores the `Attendance` of training sessions."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::attendance_class_diagram.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Attendance"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The attendance of players is managed using an `Attendance` class."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`Attendance` contains a list of training sessions as it is used to calculate the attendance rate of an individual by looking at all trainings."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Whenever a training is added, the model adds this training to the `Attendance` using a `TrainingCommand`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Training"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The Training class contains a date, as well as a HashMap."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The date in the training class represents the date of training session and the HashMap is used to check the attendance of a Person."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "We used a `DateTime` class to represent a date of training."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This class is shared across both the `Ui` and backend, allowing us to port training data into the `view calendar` function."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The HashMap uses `Person` objects as keys and a boolean as it’s value."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This is used to check whether a `Person` has attended a training session, indicated by the boolean value attached to a `Person` key."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If a `Person` attended a training session on that day, the value associated with the key will be true, and false if he did not attend."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "There were a few design considerations we had in mind for checking attendance of a `Person` but we ultimately decided that using a HashMap was the best solution due to the following requirements:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* Our application allows us to check for the attendance rate of a `Person`. As such, we needed to track both trainings attended and trainings missed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "* As a person could be added into the team after some trainings have taken place,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "using trainings attended / total trainings would not give an accurate reflection of a `Person` \u0027s training attendance."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Also, our `select` function shows attendance rate of a `Person` and a HashMap provides the fastest access time to check whether a `Person` attended a training session."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Performance feature"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Calendar feature"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The calendar feature serves 2 primary functions:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". Provides an overview of training and performance records in a selected month."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ". Displays training and performance records entered on a specific date."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The implementation of the above functions will be described seperately."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The first function is facilitated by `CalendarPanel`. It extends `UiPart\u003cRegion\u003e` and represents the calendar via a `GridPane` with dimensions of 7 by 6 (42 cells). Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `CalendarPanel#retrieveCurrentDate()` -- Retrieves the details of today\u0027s date to be used as the title of the calendar feature and for rendering the displayed month on the calendar when the user does not provide a month to view."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `CalendarPanel#retrieveProvidedDate()` -- Retrieves the details of the date provided by the user for rendering the displayed month on the calendar."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `CalendarPanel#initialiseSelectedDate()` -- Fills up all 42 cells of the `GridPane` with the respective days based on the selected date (current / provided date) by the user. Days of the previous and next month used to fill up the remaining cells are marked in a lighter colour."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "+"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "In addition, days with training or performance records will be marked with a small orange or purple dot indicator respectively."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "These operations are performed when an instance of `CalendarPanel` is created in the `MainWindow` class. An instance of `CalendarPanel` is created when the `CommandResult` obtained after executing the user\u0027s command contains a `Feature` corresponding to a calendar and an optional `AthletickDate`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Given below is an example usage scenario for the first function and how the operation behaves at each step:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Step 1:. The user either issues the `view calendar` or `calendar [MMYYYY]` (e.g. `calendar 012019`) command. The first command displays the calendar for the current month, while the second command displays the specified the month and year to be displayed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Step 2. The issued command"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// to be continued"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following sequence diagram shows how the `calendar [MMYYYY]` operation works:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// sequence diagram"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following activity diagram summarises what happens when a user executes the `view calendar` or `calendar [MMYYYY]` command:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// activity diagram"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The second function is facilitated by `CalendarDetailPanel`. It extends `UiPart\u003cRegion\u003e` and displays the attendance and performance records for a specific date in a table. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `CalendarDetailPanel#initialiseAttendanceData` -- Retrieves and displays the attendance of each person on the specified date."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `CalendarDetailPanel#initialisePerformanceData` -- Retrieves and displays the performance records on the specified date."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "These operations are performed when an instance of `CalendarDetailPanel` is created in the `MainWindow` class. An instance of `CalendarDetailPanel` is created when the `CommandResult` obtained after executing the user\u0027s command contains an `AthletickDate`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Given below is an example usage scenario for the second function and how the operation behaves at each step:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Step 1:. The user either issues the `calendar [DDMMYYYY]` (e.g. `calendar 01012019`) command."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Step 2. The issued command"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// to be continued"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following sequence diagram shows how the `calendar [DDMMYYYY]` operation works:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// sequence diagram"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following activity diagram summarises what happens when a user executes the `calendar [DDMMYYYY]` command:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// activity diagram (show what happens when records found vs not found)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the calendar for the current month is displayed"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 1 (current choice):** Displays using a fixed 7 by 6 `GridPane`, fill up left over days with days from previous and next month."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 2:** Displays using a variable sized `GridPane` that is populated with days from selected month only."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the user can display the attendance and performance data on a specific date"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 1 (current choice):** Have one `calendar [DDMMYYYY]` command to view _both_ attendance and performance data on the specified date."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 2:** Have two separate commands to view attendance and performance separately on the specified date."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Select feature"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The select feature is facilitated by `SelectCommand` class. It extends `Command` and parses the arguments using"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`SelectCommandParser`. It implements the one operation:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `CommandResult#execute()` -- Executes the selectCommand which returns the person selected to be displayed in the UI."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Other operations that were implemented to aid the `SelectCommand` feature are:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `Model#selectPerson()` -- Returns the person that was stored."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `Model#storePerson(Person)` -- Stores the person that was selected."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* `Logic#getPerson()` -- Retrieves the person that was selected to display their personal information in the UI."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "These operations are exposed in the Model interface as `Model#selectPerson()` and `Model#storePerson"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "(Person)` and in the Logic interface as `Logic#getPerson()`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "An example usage scenario is given below which elaborates how the select command works at each step."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Step 1. The user executes the `select 3` command to display the personal information of the 3rd person in the address"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "book. When the command is executed, the person selected at the specified index will be stored in ModelManager as"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "`selectedPerson` using the operation `Model#storePerson(Person)`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "//image"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Step 2. After the command has been executed, the selected person is retrieved in the MainWindow class. It checks"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "whether a person has been selected and displays the selected person\u0027s personal information."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "//snippet and image"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The implementation was done this way because the Ui component interacts with both the Logic and Model component."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Firstly, the Ui component takes in the input from the user and allows the Logic component to parse the argument."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "After the argument has been parsed, the person is stored in the Model component which houses most of the data of the"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "app. The Ui listens for any changes made to the Model data, and updates the Ui to display the selected person."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: In what way is the personal information of the selected person going to be displayed"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 (current choice): Displaying it in a feature box."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Minimises the use of mouse and is in line with the other features that is utilizing the feature box."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Aesthetic is not as good compared to the other alternatives."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 2: Displaying it in a tab form."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Looks more organised compared to the other alternatives"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Not as intuitive to use as mouse has to be used to switch around tabs."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 3: Displaying via a pop-up."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Looks neater and organised."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Increase the use of mouse to close the window and may be distracting to user."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to select a person"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 1 (current choice): Choosing by the index number."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Intuitive to use and can be used with other commands such as `FindCommand` and `FilterCommand` to narrow"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "down the list of people."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Additional step of filtering before selecting a person."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* Alternative 2: Choosing by name."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Can omit the filtering step and select the person directly."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: There may be 2 people with the same name and thus result in an error."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Undo / Redo feature"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d Adding/editing photo feature"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The sub feature of `AddCommand` and `EditCommand` allows the inclusion of photo for a person. The sub feature is"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "facilitated by `Photo`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "This sub feature is similar to the other features such as `Name` and `Phone` which has a prefix `i/` followed by the"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "file name (e.g. `i/default.png`). Prior to adding the photo of a person, the image file that is going to be used has to"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "be in the `\\src\\main\\resources\\images` directory. `Photo` takes in the file name as a `String` and retrieves the"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "photo to be added or edited from the directory that was mentioned previously."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "*File name restriction*"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "The file name of the images is restricted to alphanumerics only and the file format that will be used is `.png`. This"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "is done to keep the file name simple."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Regular expression for the file name"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 1 (current choice):** To use alphanumerics only."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Pros: Keeps it simple without the confusion of special characters."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 2:** Alphanumerics and special characters."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Pros"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "** Cons"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The filter command enables filtering of athletes based on their tags."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Currently, only filtering by one tag is supported."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Filtering by multiple tags will be available by `v1.2`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Filter makes use of a `TagMatchesPredicate` class to determine if the athlete has tags matching the user input."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Given below is the Sequence Diagram to show how filter works, with an example input of filter captain."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::filter_sequence_diagram.png[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Once filtering by multiple tags is implemented, the parsing of tag from `AddressBookParser` to `FilterCommandParser` will involve splitting them by spaces and storing the tag queries in a list."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Thereafter, each tag query will be compared against every athlete’s tags to determine if the athlete should be filtered."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "However, since currently only filtering by one tag is supported,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "the parsing of tag simply involves trimming the tag of white spaces."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Finally, the list shown to the user is updated through `Model#updateFilteredPersonsList()`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How a tag match is determined"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 1 (current choice):** Case-insensitive."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: More user-friendly."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Requires converting tags to lower-case on the back-end."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 2:** Case-sensitive."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Allows for more accurate filtering."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Difficult for users to search, as generally filtering and searching are case-insensitive."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How matches for multiple tags are determined"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 1:** Exclusive matching."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Allows for more accurate filtering."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Users get fewer filter results."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 2:** Optional matching."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Allows for more flexible searching."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Users may get results that they are not interested in."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Sort Command"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The sort command sorts the displayed list of athletes by alphabetical order. As new athletes are added to the bottom of the list, the sort command is used after to reorder the athlete list."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The `sort` command makes use of a `PersonComparator` that orders athletes in alphabetical order by comparing their names. The comparison is case-insensitive."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The following sequence diagram shows how the sort operation works:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".Interactions Inside the Logic and Model Components for the `sort` Command"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::SortCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Upon completion of the above execution, the sorted list of athletes would be displayed immediately thorugh `Model#sortByName()`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "To support sorting by more parameters (e.g. by height / weight), you can simply create a new class that implements `Comparator` that compares athletes by that parameter instead. After which, you have to edit the `sort` command to support different sort command syntaxes."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When should the athlete list should be sorted"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 1 (current choice):** Sort address book after user issues the `sort` command"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Users are able to view their newly added athletes at the bottom of the list which is more user-friendly especially when the list of athletes is very long. Allows future expansion to sort by other methods (e.g. performance scores) easily as we only have to create new comparators to order the athletes."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: Additional overhead required in terms of having to create an additional command for users to issue."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "* **Alternative 2:** Sort address book persistently in alphabetical order"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Pros: Sorting is automated"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "** Cons: The list is unable to be sorted by other methods (e.g. attendance rate) unless we implement alternative 1 so the alternative 2 is more limited."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Team coaches for time-based, competitive sports"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Has a need to manage a significant number of team members"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Value proposition*: Manage team details faster and more accurately than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* * *` |Team coach |Input attendance of my team  |Keep track of their attendance rate and commitment level"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* * *` |Team coach |Track performance of my team |Know how to help them improve"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* * *` |Careless user |Undo my previous commands |Redo any mistakes"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* * *` |Team coach |Assign tags to my team members |Differentiate roles of team members"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`* *` |Team coach |See all past and scheduled training sessions |Plan better to prepare for competitions"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "|`*` |Coach who wants fit players |Filter players by overweight BMIs |Single them out and get them to lose weight"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "(For all use cases below, the *System* is  `Athletick` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d System: Athletick"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC1 - Marking attendance of players"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletick shows a list of persons"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User keys in players who attended training"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick saves the training session"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC2 - Delete person"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletick shows a list of persons"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick deletes the person"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC3 - Key in Performance of a Player"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletick shows a list of persons"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User requests to tag a performance to a specific person in the list"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick updates the player’s performances"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3b. Input event does not exist"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3b1. Athletick shows an error message"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3c. Timing is invalid"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3c1. Athletick shows an error message"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC4 - View a player’s profile"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Athletic shows a list of persons"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "3. User request to select a specific person in the list"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "4. Athletick shows the profile of the person"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 3a1. Athletick shows an error message."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC5 - Add a person"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User keys in details of person to be added"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Person is added to the list"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1a. Details are invalid (eg. not all fields are filled up)"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1a1. Athletick shows an error message."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1b. Person has already been added"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1b1. Athletick shows an error message."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC6 - Undo a command"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User calls for undo"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Most recent command is undone"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1a. There are no tasks to be undone."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1a1. Athletick shows an error message."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1b. The most recent command cannot be undone."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1b1. Athletick shows the most recent command that can be undone and undo"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d UC7 - Redo a command"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. User calls for redo"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "2. Undo command is redone"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "* 1a. No Redo Command to be redone"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "** 1a1. Athletick shows an error message."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[[cli]] CLI::"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Command line interface (CLI) is a text-based interface that is used to operate software and operating systems while allowing the user to respond to visual prompts by typing single commands into the interface and receiving a reply in the same way."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "[[time-base-sports]] Time-base Sports::"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Examples of time-based sports are swimming and track \u0026 field, where performance can be measured in terms of time or distance."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 240,
      "ChangUo79": 20,
      "jeunhoe": 133,
      "hellodommy": 59,
      "-": 423
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "By: `CS2103T-T12-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletick is a team management app for team captains or coaches for timing-based sports."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Athletic supports storing of team members\u0027 *personal details, attendance tracking and performance recording*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "More importantly, Athletick is *optimized for those who prefer to work with a Command Line Interface* (CLI),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "If you can type fast, Athletick can get your team management tasks done faster than traditional GUI applications."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Ready to let us help you to manage your team? Continue reading to find out more!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This document shows you the full list of features in Athletick."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Note the following symbols and formatting used in this document"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT:: This symbol indicates important information"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "`mark-up`:: A grey highlight (called a mark-up) indicates that this is a command that can be typed into the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "command line and executed by the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ".  Download the latest `athletick.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".  Copy the downloaded file to the folder you want to use as the home folder for your Athletick."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//To be included at a later milestone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//.  Some example commands you can try:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "//* *`exit`* : exits the app"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Team Data Entry"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an athlete : `add`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command adds an athlete to Athletick."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the athlete\u0027s particulars in the format given below."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/backstroke`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addcommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully added, the details of the added athlete will be displayed in the result box."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The athlete will be shown in team list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an athlete : `delete`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command deletes an athlete from the list by their index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the delete command, followed by the index of the athlete you wish to delete from Athletick."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `delete 7`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: ️The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::deletecommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully removed, the details of the removed athlete will be displayed in the result box."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The athlete should no longer be shown in the team list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an athlete : `edit`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command edits the details of an existing athlete in Athletick."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "All the details of an athlete (name, phone number, email, address, tags) can be edited."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the edit command in the following format, using the relevant prefixes to edit the appropriate details."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format: `edit INDEX n/[NAME] p/[PHONE] e/[EMAIL] a/[ADDRESS] t/[TAGS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "In order to edit Roy Balakrishnan\u0027s name to Shawn, type in the following."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `edit 6 n/Shawn`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "At least one of the optional field must be provided."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "You can remove all the person’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::editcommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully edited, the edited information of Roy (now Shawn) will be displayed in the result box."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The team list should also reflect Roy\u0027s new details."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Training"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Taking attendance of a training session by athletes present : `training`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command adds a training session on the specified day to Athletick."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type in the training command, followed by the indexes of athletes who attended."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Format : `attendance INDEX [INDEX] [INDEX ] …`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Examples : `training 1 2 3 5 9`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// insert picture"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Taking attendance of a training session by members absent : `training -a`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command adds a training session on the specified day to Athletick."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type in the training command, followed by the indexes of players who were absent."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Format : `attendance -a INDEX [INDEX] [INDEX ] …​`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Examples : `training -a 2 4`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "*What you will see*"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "// insert picture"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Performance"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an event : `event`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command adds an event to Athletick, and will be used for storing your athletes’ performances."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the event command in the following format."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Format : `event NAME_OF_EVENT`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `event 50m freestyle`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: Event names are case-insensitive (eg. `50m freestyle` and `50M freestyle` are considered the same"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "events)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addevent.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If successfully added, the event name will be displayed in the result box."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Recording an athlete’s performance : `performance`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command adds your athlete’s performance for a certain event, on a certain day, to Athletick."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "You will need the event name, athlete’s index, date of performance and timing of performance."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `performance INDEX e/EVENT_NAME d/DDMMYYYY t/TIMING`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `event 5 e/50m freestyle d/22102019 t/24s`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The event has to be created first. Otherwise, Athletick will prompt you to create that event."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::addperformance.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The performance details will be displayed in the result box."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing calendar displaying training and performance entries : `view calendar`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "This command displays calendar which indicates days with training or performance entries."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Type in the following command and press enter."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Format : `view calendar`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "image::calendar.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The result box will inform you that you are currently viewing your calendar."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "The feature box will display the calendar feature."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Header 1 displays today’s day and date."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "Header 2 displays the month and year you are currently viewing."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "You may use the left and right buttons to navigate to a different month. In the calendar, days with training entries are marked with an orange circle, and days with performance entries are marked with a purple circle."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Athlete Management"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing more details of a team member : `select`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command shows you details of a specific athlete."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the command in the following format."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `select INDEX`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `select 1`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::select.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The message “person selected!” will be displayed in the result box to indicate that you have selected the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "person."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "In the feature box, all the information of the athlete will be displayed as shown."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting athletes alphabetically : `sort`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command sorts your athletes alphabetically by their name."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the following command and press enter."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `sort`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: This command will change your athletes’ index numbers."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".Before sorting, notice that John Doe is last in the list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::beforesort.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ".After sorting, notice than John is now between Irfan and Roy (ie. names are in alphabetical order)."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::aftersort.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The athlete list in the left sidebar should be alphabetically listed now."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering athletes by their tags : `filter`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command filters your athletes based on their tags."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the filter command, followed by the tag that you want to filter by."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `filter TAG`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example: `filter butterfly`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: This command will change your athletes’ index numbers."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: This command is case-insensitive, so filtering by `captain` and `Captain` will give the same result."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::filter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The athlete list in the left sidebar should only display athletes that contain the specified tag."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Finding athletes by their name : `find`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command find athletes whose name contains any of the given keywords."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type in the find command, followed by the keywords you want to find."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Example : `find irfan`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: This command will change your athletes’ index numbers."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: This command is case-insensitive, so finding by `Irfan` and `irfan` will give the same result."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::find.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The athlete list in the left sidebar should only display athletes whose names contain the given keywords."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all data : `clear`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command clears all the existing data in Athletick."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "It deletes all players, trainings, attendance, events and performances."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the clear command."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Format : `clear`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "// insert picture"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The following prompt will show if data was successfully cleared."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Get help on how to use Athletick: `help`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command provides a user guide for Athletick."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type the help command."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "image::help.png[width\u003d\"395\"]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "A pop up box will appear, with a link to the user guide on Athletick."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing a previous command : `undo`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command restores Athletick to the state before the previous command was executed."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have accidentally deleted an athlete’s contact (Mohamad Ali) from your list."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Instead of having to re-enter Mohamad Ali’s contact information all over again,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "you can easily restore all of Mohamad Ali’s details by `undo`-ing the `delete` command that you have just entered."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type undo into the command box, and press Enter to execute it."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Format : `undo`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The result box will display the message “Undo Command Success!” and you can check that Mohamad Ali’s"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "contact information is visible in the list again!"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: Take note that the undo feature only applies to undoable commands."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Undoable commands include: `add`, `delete`, `edit`, `clear`, `attendance` and `training`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The `undo` command will not be able to undo commands that cannot be undone."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have executed a list command to list out all the athletes information in Athletick."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "If you were to execute the `undo` command now, the `undo` command will fail because list is not an undoable command,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "and that no doable commands were executed before this."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The `undo` command reverses previous commands in reverse chronological order."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have executed the `edit` command, followed by the `delete` command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Executing `undo` now will first reverse the `delete` command."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Executing `undo` again will reverse the `edit` command."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The `undo` command will reverse the latest command that can be undone."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have executed the `delete` command, followed by the `list` command."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Since `list` command is not an undoable command, executing `undo` now will thus reverse the `delete` command."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing an `undo` command : `redo`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "This command reverses the most recent `undo` command."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say you have executed the `delete` command to delete Mohamad Ali from your list."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "You may undo this action and restore Mohamad Ali’s information by executing the `undo` command. (See Undoing a previous command.)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Then, if you decide that you want the contact to remain deleted after all,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "you may very quickly do so by executing the `redo` command to reverse the `undo` command that you had just executed."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should do*"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Type redo into the command box, and press Enter to execute it."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Format : `redo`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "*What you should see*"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "The result box will display the message “Redo success!” and Mohamad Ali is once again gone from the list!"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The `redo` command can only reverses the `undo` command."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say that you have executed the `delete` command to delete an athlete in your list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Executing the `redo` command now will fail because no `undo` command was executed before this."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "IMPORTANT: The `redo` command reverses previous `undo` commands in reverse chronological order."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Let’s say that you have executed the `clear` command, followed by the `add` command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Executing the `undo` command now will reverse the `add` command."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Executing the `undo` command again will reverse the `clear` command as well."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Following this, executing the `redo` command will reverse the last `undo` command and reapply the `clear` command."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Executing the `redo` command again will reverse the second-last `undo` command and reapply the `add` command."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d Upcoming features"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Team roster [coming in v2.0]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Performance tracker [coming in v2.0]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Importing data : `import` [coming in v2.0]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting data : `export` [coming in v2.0]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Add athlete:: `add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Delete athlete:: `delete INDEX`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Edit athlete:: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Add event:: `event EVENT_NAME`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Record performance:: `performance INDEX e/EVENT_NAME d/DDMMYYYY t/TIMING`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Take attendance (by present):: `attendance INDEX [INDEX]...`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Take attendance (by absent):: `attendance -a INDEX [INDEX]...`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "View athlete details:: `select INDEX`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "View calendar:: `view calendar`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Sort athletes:: `sort`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Filter athletes:: `filter TAG`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Find athletes:: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Clear data:: `clear`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Get help:: `help`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Undo:: `undo`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "Redo:: `redo`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 49,
      "ChangUo79": 23,
      "hellodommy": 318,
      "-": 107
    }
  },
  {
    "path": "docs/diagrams/SelectSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR_T2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":SelectCommandParser\" as SelectCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":SelectCommand\" as SelectCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR_T3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"select 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"select 1\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "create SelectCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "AddressBookParser -\u003e SelectCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate SelectCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "create SelectCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommandParser -\u003e SelectCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate SelectCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand --\u003e SelectCommandParser : s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate SelectCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommandParser --\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate SelectCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "destroy SelectCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager -\u003e SelectCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate SelectCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand -\u003e ModelManager : storePerson(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "ModelManager --\u003e SelectCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "SelectCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate SelectCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager --\u003e MainWindow : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "MainWindow -\u003e LogicManager : getPerson()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager -\u003e ModelManager : selectPerson()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "ModelManager --\u003e LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "LogicManager --\u003e MainWindow"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "[\u003c-- MainWindow"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 82
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "Class InformationDisplay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "MainWindow *-right-\u003e InformationDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "InformationDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "InformationDisplay ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 4,
      "-": 60
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a{color:#30336b;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "a:hover,a:focus{color:#30336b}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 2,
      "-": 405
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    color: #30336b;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    color: #30336b;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    color: #30336b;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    border-bottom: 2px #30336b solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 4,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.storage.AttendanceStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.storage.JsonAttendanceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.storage.JsonPerformanceStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.storage.PerformanceStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final Version VERSION \u003d new Version(2, 5, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceStorage performanceStorage \u003d new JsonPerformanceStorage(userPrefs.getEventListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        AttendanceStorage attendanceStorage \u003d new JsonAttendanceStorage(userPrefs.getAttendanceFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, performanceStorage, attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getAddressBooks().push(model.getAddressBookDeepCopy());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ReadOnlyAddressBook initialAddressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                logger.info(\"Data file for Athletick not found. Will be starting with a sample \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        + \"team list\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialAddressBook \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"Data file for Athletick not in the correct format. Will be starting with an \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                            + \"empty team list\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"Problem while reading from Athletick file. Will be starting with an empty \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                            + \"team list\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Optional\u003cReadOnlyPerformance\u003e performanceOptional;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ReadOnlyPerformance initialEventsList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            performanceOptional \u003d storage.readEvents();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (!performanceOptional.isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                logger.info(\"Data file for EventList not found. Will be starting with a sample EventList\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialEventsList \u003d performanceOptional.orElseGet(SampleDataUtil::getSamplePerformance);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    \"Data file for EventList not in the correct format. Will be starting with empty EventList\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialEventsList \u003d new Performance();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.warning(\"Problem while reading from EventList file. Will be starting with an empty EventList\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialEventsList \u003d new Performance();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Optional\u003cAttendance\u003e attendanceOptional;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Attendance initialAttendance;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendanceOptional \u003d storage.readAttendance();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (!attendanceOptional.isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Attendance\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            initialAttendance \u003d attendanceOptional.orElse(new Attendance());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Attendance\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            initialAttendance \u003d new Attendance();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Attendance\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            initialAttendance \u003d new Attendance();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new ModelManager(initialAddressBook, initialEventsList, initialAttendance, userPrefs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty team list\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        logger.info(\"Starting Athletick \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Athletick ] \" + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 12,
      "jeunhoe": 17,
      "hellodommy": 31,
      "junhuplim": 2,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    Person getPerson();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    String getPersonAttendance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getCommands().push(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getAddressBooks().push(model.getAddressBookDeepCopy());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            storage.saveEvents(model.getPerformance());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            storage.saveAttendance(model.getAttendance());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return model.selectPerson();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public String getPersonAttendance() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return model.getAttendance().viewPersonAttendance(getPerson());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 10,
      "hellodommy": 1,
      "jeunhoe": 1,
      "junhuplim": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the athlete \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"[\" + PREFIX_IMAGE + \"IMAGE]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TAG + \"captain \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TAG + \"freestyle \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + PREFIX_IMAGE + \"profile_pic.png\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 3,
      "ChangUo79": 2,
      "hellodommy": 3,
      "junhuplim": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Shows attendance of a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendance\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \": Checks attendance of person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance shown\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Index of person identified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of AttendanceCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param index Sets Index of person identified to {@code index}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Attendance attendance \u003d model.getAttendance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Person person \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(person.getName().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        result.append(attendance.viewPersonAttendance(person));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        /* This is used for attendance of all, implement later."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e allPeople \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for(Person person: allPeople) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            result.append(person.getName().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            result.append(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            result.append(attendance.viewPersonAttendance(person));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Command Result does not return MESSAGE_SUCCESS at the moment, used to demo."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new CommandResult(result.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 76,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Allows user to navigate the date of the calendar and view training and performance details on a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * specified date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"calendar\" + \": Jumps to a specified date.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \" 1) Specify month and year to view calendar for that month.\\nParameters: MMYYYY\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"Example: calendar 062019\\n2) Specify day, month and year to view details for that\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \" date.\\nParameters: DDMMYYYY\\nExample: calendar 09062019\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_1 \u003d \"Viewing details for: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_2 \u003d \"Viewing calendar for: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"You have provided an invalid date.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final AthletickDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarCommand(AthletickDate date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        switch (date.getType()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String resultMsg \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    MESSAGE_SUCCESS_1 + date.getDay() + \" \" + date.getMth() + \" \" + date.getYear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CommandResult(resultMsg, date, model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String resultMsg2 \u003d MESSAGE_SUCCESS_2 + date.getMth() + \" \" + date.getYear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CommandResult(resultMsg2, date, model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof CalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 date.equals(((CalendarCommand) other).date));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public abstract boolean isUndoable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Feature feature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * featureToDisplay}, and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, Feature featureToDisplay) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.feature \u003d featureToDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * featureToDisplay} and {@code model}, and other fields set to their default value."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, Feature featureToDisplay, Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.feature \u003d featureToDisplay;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * featureToDisplay}, and other fields set to their default value."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, Person selectedPerson) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.person \u003d selectedPerson;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult(String feedbackToUser, AthletickDate date, Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Feature getFeature() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return feature;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 61,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"[\" + PREFIX_IMAGE + \"IMAGE]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Photo updatedPhoto \u003d editPersonDescriptor.getPhoto().orElse(personToEdit.getPhoto());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedPhoto);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        private Photo photo;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            setPhoto(toCopy.photo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, photo);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        public void setPhoto(Photo photo) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            this.photo \u003d photo;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        public Optional\u003cPhoto\u003e getPhoto() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return Optional.ofNullable(photo);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 16,
      "hellodommy": 1,
      "junhuplim": 4,
      "-": 221
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Adds an event for the performance recording."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new event with the specified name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Event Created: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"%1$s event already exists in Athletick.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates an EventCommand to add the specified event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public EventCommand(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_EVENT, toAdd.getName()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            || (other instanceof EventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Finds and lists all persons in address book whose tag matches the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who has tags matching the searched \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" friends\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final TagMatchesPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public FilterCommand(TagMatchesPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates the message in the event that no tag has been found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @return Suggestion of tags that exist which the user can search instead."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getNoMatchMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        StringBuilder message \u003d new StringBuilder(\"There are no tags found matching your query.\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        message.append(\"Try these tags instead: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Set\u003cString\u003e uniqueTags \u003d new HashSet\u003cString\u003e(Tag.getAllTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (String tagName : uniqueTags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            message.append(tagName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(getNoMatchMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 62,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PerformanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Records a player\u0027s performance under a certain event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"performance\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a player performance for an event to Athletick.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_EVENT + \"EVENT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_DATE + \"DDMMYYYY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TIMING + \"SECONDS\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_EVENT + \"freestyle 50m \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_DATE + \"02102019 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + PREFIX_TIMING + \"30.32\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final AthletickDate date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Timing time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a PerformanceCommand to add the record under the event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public PerformanceCommand(Index index, String event, AthletickDate date, Timing time) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String getSuccessMessage(Person p, String e, AthletickDate d, Timing t) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return \"Performance record added for \" + p.getName().fullName + \" under \" + e + \" event, on \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + d.toString() + \" with a timing of \" + t.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event createdEvent \u003d new Event(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!model.hasEvent(createdEvent)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new CommandException(String.format(Event.MESSAGE_CONSTRAINTS, event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Person athlete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Record record \u003d createRecord();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        date.setType(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model.addRecord(event, athlete, record);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new CommandResult(getSuccessMessage(athlete, event, date, time));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Record createRecord() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Record(date, time);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "hellodommy": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Redo the previous undone Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Redo Command Success\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Redo Command Failure: You have not \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \"undone any commands. As such, you are unable to redo any commands.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (history.isRedoneEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        model.redo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * Selects a person identified using its displayed index and displaying the personal information of the person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Selects a person by their position in the list\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"and displays their personal information.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"Parameters : NAME\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Person selected!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Person selectedPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        selectedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        model.storePerson(selectedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        model.getAttendance().viewPersonAttendance(selectedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, selectedPerson),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                selectedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "ChangUo79": 51,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Sorts all persons in the team list according to alphabetical order. Sorting is case insensitive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted your team list in alphabetical order.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.sortAddressBookByName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 23,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrainingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Adds a training session of players specified by the index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"training\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \": Adds training session of people identified by the index numbers used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 5 7\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String TRAINING_ADD_SUCCESS \u003d \"Training successfully added.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommand(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d new Date().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.indexList \u003d indexList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommand(String date, List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.indexList \u003d indexList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Check if indexes are valid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Index index: indexList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e allPeople \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e trainingAttendance \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Set all people in the address book to did not attend"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person: allPeople) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendance.put(person, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Filter indexes from the lastShownList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cPerson\u003e attendedPersons \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Index index: indexList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Person personWhoAttended \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            attendedPersons.add(personWhoAttended);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Change the value in trainingAttendance of these people to true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Person person: attendedPersons) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainingAttendance.put(person, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Training training \u003d new Training(date, trainingAttendance);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        model.addTraining(training);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new CommandResult(TRAINING_ADD_SUCCESS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 85,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Undo the most recent undoable Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Undo Command Success\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Undo Command Failure:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \" No available commands to be undone. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        + \" Commands that can be undone is as follows: add, delete, edit, clear and training.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (history.isUndoneEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        while (!history.getLatestCommand().isUndoable()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(history.getLatestCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (history.isUndoneEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                System.out.println(HistoryManager.getCommands().pop());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                System.out.println(HistoryManager.getAddressBooks().pop());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (history.isUndoneEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Allows user to view calendar, attendance or performance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: 1) \" + COMMAND_WORD + \" calendar 2) \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + COMMAND_WORD + \" attendance 3) \" + COMMAND_WORD + \" performance\\n\" + \"Example: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + COMMAND_WORD + \" \" + \"calendar\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CALENDAR \u003d \"Viewing your calendar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ATTENDANCE \u003d \"Viewing your team\u0027s attendance\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PERFORMANCE \u003d \"Here are your events stored Athletick.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        + \"To view the performance for an event, type in the command: records EVENT_NAME\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_INVALID_FEATURE \u003d \"You have provided an invalid feature.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final Feature feature;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ViewCommand(Feature feature) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.feature \u003d feature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        switch (feature.toString()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_CALENDAR, feature, model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"attendance\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ATTENDANCE, feature);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"performance\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_PERFORMANCE, feature, model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FEATURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u0026\u0026 feature.equals(((ViewCommand) other).feature));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 45,
      "hellodommy": 7,
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                           PREFIX_IMAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Photo photo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IMAGE)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            photo \u003d new Photo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            photo \u003d ParserUtil.parsePhoto(argMultimap.getValue(PREFIX_IMAGE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, photo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 11,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case TrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new TrainingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case AttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new AttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        case PerformanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new PerformanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 12,
      "ChangUo79": 4,
      "jeunhoe": 8,
      "hellodommy": 14,
      "junhuplim": 7,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Parses input arguments and creates a new AttendanceCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AttendanceCommandParser implements Parser\u003cAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AttendanceCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new AttendanceCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalendarCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Parses input arguments and creates a new CalendarCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommandParser implements Parser\u003cCalendarCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalendarCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and returns a CalendarCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (trimmedArgs.length() \u003d\u003d 6 || trimmedArgs.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            AthletickDate date \u003d ParserUtil.parseDate(trimmedArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new CalendarCommand(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final Prefix PREFIX_IMAGE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                           PREFIX_IMAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            editPersonDescriptor.setPhoto(ParserUtil.parsePhoto(argMultimap.getValue(PREFIX_IMAGE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parse input arguments and creates a new EventCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event event \u003d new Event(trimmedArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new EventCommand(event);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String[] tagQueries \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new FilterCommand(new TagMatchesPredicate(Arrays.asList(tagQueries)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code featureName} into a {@code Feature} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the specified feature name is invalid (not calendar / attendance"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * / performance)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static Feature parseFeature(String featureName) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedFeatureName \u003d featureName.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (!(trimmedFeatureName.equals(\"calendar\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                | trimmedFeatureName.equals(\"attendance\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                | trimmedFeatureName.equals(\"performance\"))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException(Feature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Feature(trimmedFeatureName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses {@code date} into a {@code AthletickDate} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the specified date is invalid (not length of 6 or 8)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static AthletickDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (trimmedDate.length() \u003d\u003d 6 || trimmedDate.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            SimpleDateFormat fullDate \u003d new SimpleDateFormat(\"ddMMyyyy\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fullDate.setLenient(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            SimpleDateFormat monthYear \u003d new SimpleDateFormat(\"MMyyyy\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            monthYear.setLenient(false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (trimmedDate.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    Date d \u003d fullDate.parse(trimmedDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(d));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int month \u003d Integer.parseInt(new SimpleDateFormat(\"M\").format(d));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int year \u003d Integer.parseInt(new SimpleDateFormat(\"yyyy\").format(d));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int type \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String mth \u003d new SimpleDateFormat(\"MMMM\").format(d);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    return new AthletickDate(day, month, year, type, mth);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else if (date.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    Date d2 \u003d monthYear.parse(trimmedDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int day \u003d Integer.parseInt(\"0\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int month \u003d Integer.parseInt(new SimpleDateFormat(\"M\").format(d2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int year \u003d Integer.parseInt(new SimpleDateFormat(\"yyyy\").format(d2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    int type \u003d 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String mth \u003d new SimpleDateFormat(\"MMMM\").format(d2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    return new AthletickDate(day, month, year, type, mth);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                throw new ParseException(AthletickDate.WRONG_DATE_FORMAT + \" \" + AthletickDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException(AthletickDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // should not reach here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses {@code String event} into a {@code Event}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static String parseEvent(String event) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedEvent \u003d event.trim().toLowerCase();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return trimmedEvent;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses {@code String timing} into a {@code Timing}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static Timing parseTiming(String timing) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String trimmedTiming \u003d timing.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!Timing.isValidTiming(trimmedTiming)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(Timing.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Timing(trimmedTiming);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Parses a {@code String photo} into an {@code Photo}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * @throws ParseException if the given {@code photo} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static Photo parsePhoto(String imageFilePath) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(imageFilePath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String trimmedPath \u003d imageFilePath.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!Photo.isValidFilePath(trimmedPath)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new ParseException(Photo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new Photo(trimmedPath);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 59,
      "ChangUo79": 15,
      "hellodommy": 24,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PerformanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommandParser implements Parser\u003cPerformanceCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public PerformanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT, PREFIX_DATE, PREFIX_TIMING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT, PREFIX_DATE, PREFIX_TIMING)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PerformanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PerformanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String event \u003d ParserUtil.parseEvent(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        AthletickDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Timing timing \u003d ParserUtil.parseTiming(argMultimap.getValue(PREFIX_TIMING).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new PerformanceCommand(index, event, date, timing);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PerformanceSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Prefix PREFIX_TIMING \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * Parses input arguments and creates a new SelectCommand Object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * and returns a SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrainingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Parses input arguments and creates a new TrainingCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TrainingCommandParser implements Parser\u003cTrainingCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TrainingCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            List\u003cIndex\u003e indexList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String[] indexes \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            for (String arguments: indexes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                indexList.add(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return new TrainingCommand(indexList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrainingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Feature feature \u003d ParserUtil.parseFeature(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new ViewCommand(feature);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.PersonComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public UniquePersonList getPersons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.persons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sorts list of persons by name in alphabetical order ignoring case."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        persons.sortByName(new PersonComparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "junhuplim": 3,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Attendance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Represents the attendance of a person"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Guarantees: a static list of trainings"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private List\u003cTraining\u003e trainings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Attendance() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Attendance(List\u003cTraining\u003e trainings) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings \u003d trainings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void addTraining(Training training) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainings.add(training);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cTraining\u003e getTrainings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return trainings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns the attendance rate of a given person name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String viewPersonAttendance(Person name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        int attended \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        int missed \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        double result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Training training: trainings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (training.getPersonAttendance(name)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                attended++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                missed++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        result \u003d ((double) attended / (attended + missed));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return String.format(\"%d/%d (%.2f%%)\", attended, attended + missed, result * 100);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints out the list of athlete with their attendance in the given date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void selectTraining(String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Training training: trainings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (date.equals(training.getDate())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                HashMap\u003cPerson, Boolean\u003e attendanceOfTraining \u003d training.getTrainingAttendance();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                for (Map.Entry\u003cPerson, Boolean\u003e set : attendanceOfTraining.entrySet()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    Person name \u003d set.getKey();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    Boolean hasAttended \u003d set.getValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    System.out.println(name + \" : \" + hasAttended);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns a list of person who have attended the training at the given date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cPerson\u003e getAttended(String date) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cPerson\u003e listOfAttended \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Training training: trainings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (date.equals(training.getDate())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                listOfAttended \u003d training.getAttended();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return listOfAttended;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 16,
      "junhuplim": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    ReadOnlyAddressBook getAddressBookDeepCopy();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    Person selectPerson();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    void storePerson(Person person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Reorders the address book in alphabetical order according to person\u0027s name."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void sortAddressBookByName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Add training."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void addTraining(Training training);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Attendance getAttendance();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    ReadOnlyPerformance getPerformance();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void addRecord(String eventName, Person person, Record record);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    boolean hasPerformanceOn(AthletickDate date);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 5,
      "ChangUo79": 4,
      "hellodommy": 18,
      "jeunhoe": 8,
      "junhuplim": 3,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.history.HistoryManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final Performance performance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private ReadOnlyAddressBook readOnlyAddressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Person selectedPerson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private HistoryManager history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyPerformance performance,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                        Attendance attendance, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performance \u003d new Performance(performance);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this(new AddressBook(), new Performance(), new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ReadOnlyAddressBook getAddressBookDeepCopy() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        UniquePersonList persons \u003d addressBook.getPersons();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        AddressBook deepCopy \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        deepCopy.getPersons().setPersons(persons);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return deepCopy;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Command undoneCommand \u003d HistoryManager.getCommands().pop();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyAddressBook undoneAddressBooks \u003d HistoryManager.getAddressBooks().pop();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getUndoneCommands().push(undoneCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getUndoneAddressBooks().push(undoneAddressBooks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (undoneCommand instanceof TrainingCommand) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int attendanceListSize \u003d this.attendance.getTrainings().size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int lastIndex \u003d attendanceListSize - 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Training undoneTraining \u003d this.attendance.getTrainings().remove(lastIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            HistoryManager.getUndoneTrainingLists().push(undoneTraining);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            ReadOnlyAddressBook afterUndoneState \u003d HistoryManager.getAddressBooks().peek();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            addressBook.resetData(afterUndoneState);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Command redoneCommand \u003d HistoryManager.getUndoneCommands().pop();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ReadOnlyAddressBook redoneAddressBook \u003d HistoryManager.getUndoneAddressBooks().pop();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getCommands().push(redoneCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        HistoryManager.getAddressBooks().push(redoneAddressBook);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (redoneCommand instanceof TrainingCommand) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Training redoneTraining \u003d HistoryManager.getUndoneTrainingLists().pop();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.attendance.getTrainings().add(redoneTraining);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            addressBook.resetData(redoneAddressBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person selectPerson() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void storePerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        selectedPerson \u003d person;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortAddressBookByName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.addressBook.sortByName();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attendance \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.attendance;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void addTraining(Training training) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendance.addTraining(training);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Performance \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.addEvent(event);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.hasEvent(event);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addRecord(String eventName, Person person, Record record) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performance.addRecord(eventName, person, record);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance.hasPerformanceOn(date);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "ChangUo79": 9,
      "hellodommy": 44,
      "jeunhoe": 14,
      "junhuplim": 42,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Performance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.UniqueEventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Wraps Performance-related data at an EventList level."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Performance implements ReadOnlyPerformance {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Performance() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a Performance using the Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Performance(ReadOnlyPerformance toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Replaces the contents of the events list with {@code events}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Resets the existing data of this {@code EventList} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void resetData(ReadOnlyPerformance newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        setEvents(newData.getPerformance());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves Calendar-compatible records for all events."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if there are any recorded performances on a specified date."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.hasPerformanceOn(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if an event with the same name as {@code event} exists in the events list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a person to the events list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must not already exist in the events list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a performance record under a specific event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param e Event name of event where performance is recorded under."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param p Person who completed the performance record."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param r Record to be added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addRecord(String e, Person p, Record r) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.getEvent(e).addPerformance(p, r);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ObservableList\u003cEvent\u003e getPerformance() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof Performance // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 events.equals(((Performance) other).events));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPerformance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Unmodifiable view of events"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public interface ReadOnlyPerformance {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns an unmodifiable view of performances."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    ObservableList\u003cEvent\u003e getPerformance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Path getEventListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Path getAttendanceFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 2,
      "jeunhoe": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Path eventListFilePath \u003d Paths.get(\"data\", \"events.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Path attendanceFilePath \u003d Paths.get(\"data\", \"attendance.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Path getEventListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return eventListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void setEventListFilePath(Path eventListFilePath) { // for tests, not implemented yet"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(eventListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventListFilePath \u003d eventListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Path getAttendanceFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attendanceFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void setAttendanceFilePath(Path attendanceFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(attendanceFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendanceFilePath \u003d attendanceFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 10,
      "jeunhoe": 10,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/date/AthletickDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents date used in attendance and performance recording."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class AthletickDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please specify date in either MMYYYY or \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"DDMMYYYY format.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String WRONG_DATE_FORMAT \u003d \"Invalid date specified.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String mth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDate(int day, int month, int year, int type, String mth) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(mth);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.mth \u003d mth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int getType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getMth() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return mth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setType(int type) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the suffix of this day."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String getDaySuffix() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the date in the format before it was parsed - for Json use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getUnparsed() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return String.format(\"%02d\", day) + String.format(\"%02d\", month) + year;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return day + getDaySuffix() + \" \" + mth + \" \" + year;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof AthletickDate"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 day \u003d\u003d ((AthletickDate) other).day"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 month \u003d\u003d ((AthletickDate) other).month"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((AthletickDate) other).year);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 60,
      "hellodommy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/feature/Feature.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.feature;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a feature shown in the feature box. Possible features include: 1) calendar, 2)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * attendance and 3) performance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Feature {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"You have provided an invalid feature. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"Please indicate one of the following features to view: 1) calendar, 2) attendance, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"3) performance.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Feature(String featureName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        requireNonNull(featureName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        checkArgument(isValidFeatureName(featureName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.name \u003d featureName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if the feature name provided by the user is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param featureName String provided by user following the view command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return boolean indicating whether the feature name is valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static boolean isValidFeatureName(String featureName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return featureName.equals(\"calendar\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                | featureName.equals(\"attendance\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                | featureName.equals(\"performance\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                || (other instanceof Feature"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u0026\u0026 name.equals(((Feature) other).name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/history/HistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Represents the history of commands and states of address books."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static Stack\u003cCommand\u003e commands \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static Stack\u003cReadOnlyAddressBook\u003e addressBooks \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static Stack\u003cCommand\u003e undoneCommands \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static Stack\u003cReadOnlyAddressBook\u003e undoneAddressBooks \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static Stack\u003cTraining\u003e undoneTrainingLists \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public HistoryManager() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Command getLatestCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return commands.peek();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Stack\u003cCommand\u003e getCommands() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Stack\u003cReadOnlyAddressBook\u003e getAddressBooks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return addressBooks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Stack\u003cCommand\u003e getUndoneCommands() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneCommands;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Stack\u003cReadOnlyAddressBook\u003e getUndoneAddressBooks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneAddressBooks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Stack\u003cTraining\u003e getUndoneTrainingLists() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneTrainingLists;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isUndoneEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return commands.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isRedoneEmpty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return undoneCommands.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/CalendarCompatibleRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Wrapper for performance record that will be displayed in the Calendar."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Differs from Record class in that the attributes are athlete and timing, instead of date and timing since"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * the date for a CalendarCompatibleRecord is fixed already."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class CalendarCompatibleRecord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Person athlete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String timing;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public CalendarCompatibleRecord(Person athlete, String timing) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.athlete \u003d athlete;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Person getAthlete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return athlete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 7,
      "hellodommy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Events are types of activities that can measure performance. Examples include \u002750m breaststroke\u0027 or \u0027100m freestyle\u0027."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"%1$s event has not been created.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            + \"Please use the event command to create the event first.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String INVALID_NAME_MESSAGE_CONSTRAINTS \u003d \"Event name should not begin with a space.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private HashMap\u003cPerson, List\u003cRecord\u003e\u003e records;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a type of event that stores the members and their respective timings (performance) for this event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param name of this event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.records \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a type of event with the performances initialised already."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param name of this event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param records to be included in this event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event(String name, HashMap\u003cPerson, List\u003cRecord\u003e\u003e records) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if both events have the same name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return otherEvent !\u003d null \u0026\u0026 otherEvent.getName().equals(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cPerson, List\u003cRecord\u003e\u003e getRecords() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves a list of Calendar-compatible records for the Calendar."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param date of Calendar-compatible records."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public List\u003cCalendarCompatibleRecord\u003e getCalendarCompatibleRecords(AthletickDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cCalendarCompatibleRecord\u003e ccrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.forEach((person, recordList) -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String timing \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (Record record : recordList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                if (record.getDate().equals(date)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    timing \u003d record.getTiming().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    CalendarCompatibleRecord ccr \u003d new CalendarCompatibleRecord(person, timing);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    ccrList.add(ccr);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return ccrList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if this event has a recorded performance on the given date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        AtomicBoolean answer \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        records.forEach((person, recordList) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (Record record : recordList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                if (record.getDate().equals(date)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    answer.set(true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return answer.get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds a player\u0027s performance to this event."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void addPerformance(Person athlete, Record record) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!records.containsKey(athlete)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            ArrayList\u003cRecord\u003e initialisedPerformanceEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            initialisedPerformanceEntries.add(record);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            records.put(athlete, initialisedPerformanceEntries);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            // copying the existing performances"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            ArrayList\u003cRecord\u003e currentPerformanceEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            currentPerformanceEntries.addAll(records.get(athlete));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            // adding the new performance"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            currentPerformanceEntries.add(record);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            // remove the existing athelete record for this event"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            records.remove(athlete);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            // adding the athlete again with their updated record for this event"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            records.put(athlete, currentPerformanceEntries);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return otherEvent.getName().equals(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "hellodommy": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/Record.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Under each event, each member will have a PerformanceEntry that contains their performance timing and the date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * that they took"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Timing timing;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Creates a Record for a member under an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param date this entry was taken."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param timing of this entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Record(AthletickDate date, Timing timing) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves the timing of this PerformanceEntry."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @return Timing of this PerformanceEntry."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Timing getTiming() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public AthletickDate getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/Timing.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class Timing {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Timing should only contain numbers in seconds.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String REGEX_DECIMAL \u003d \"^-?\\\\d*\\\\.\\\\d+$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String REGEX_INTEGER \u003d \"^-?\\\\d+$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d REGEX_DECIMAL + \"|\" + REGEX_INTEGER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code Timing}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param timing A valid timing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Timing(String timing) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        checkArgument(isValidTiming(timing), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        value \u003d Double.parseDouble(timing);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if a given string is a valid timing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static boolean isValidTiming(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 (Double.parseDouble(test) \u003e 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String getUnparsed() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return value + \" seconds\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/UniqueEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event getEvent(String eventName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (event.getName().equals(eventName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Method for Shawn to retrieve performance records on a particular day for the Calendar feature."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e hm \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            hm.put(event, event.getCalendarCompatibleRecords(date));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return hm;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Checks if there are any recorded performances on the specified date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : internalList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (event.hasPerformanceOn(date)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performance/exceptions/DuplicateEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final Photo photo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Photo photo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Photo getPhoto() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return photo;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 11,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Comparator that enables us to sort a list of Persons in alphabetical order ignoring case."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Compares a person to another using name. Case is ignored."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param p1 Name of person 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param p2 Name of person 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Value of zero if (x\u003d\u003dy), if (x \u003c y) then value less than zero, and if (x \u003e y)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * then value greater than zero."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int compare(Person p1, Person p2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String person1Name \u003d p1.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String person2Name \u003d p2.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return person1Name.compareToIgnoreCase(person2Name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Photo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " *  Represents a Person\u0027s photo in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " *  Guarantees: immutable; is valid as declared in {@link #isValidFilePath(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class Photo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Image filepath should be of the format local-part.png \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and underscores.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            + \"2. This is followed by a \u0027.\u0027 and only the image extension \u0027png\u0027 is allowed. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\w]+(\\\\.(?i)(png))$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String IMAGE_DIRECTORY \u003d \"/images/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final Image photo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Photo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        value \u003d \"default.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d new Image(this.getClass().getResourceAsStream(IMAGE_DIRECTORY + value));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Photo(String image) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(image);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        checkArgument(isValidFilePath(image), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        value \u003d image;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d new Image(this.getClass().getResourceAsStream(IMAGE_DIRECTORY + image));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagMatchesPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Tests that any of a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class TagMatchesPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final List\u003cString\u003e tagQueries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public TagMatchesPredicate(List\u003cString\u003e tagQueries) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.tagQueries \u003d tagQueries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String allTags \u003d person.getTags().toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                .replaceAll(\"\\\\[|\\\\]\", \"\").replaceAll(\",\", \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return tagQueries.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(allTags, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                || (other instanceof TagMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                \u0026\u0026 tagQueries.equals(((TagMatchesPredicate) other).tagQueries)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return internalList.get(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sorts contents of this list in alphabetical order using {@code personComparator}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param personComparator Compares one person to another using name. Case is ignored."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortByName(PersonComparator personComparator) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        internalList.sort(personComparator);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 8,
      "ChangUo79": 5,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        tags.add(tagName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Retrieves a list of all the tags of all the people entries."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static List\u003cString\u003e getAllTags() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/training/Training.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package seedu.address.model.training;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Represents a Training"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Guarantees: date and training attendance for the particular training"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Training {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private HashMap\u003cPerson, Boolean\u003e trainingAttendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Training(String date, HashMap\u003cPerson, Boolean\u003e trainingAttendance) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.trainingAttendance \u003d trainingAttendance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public HashMap\u003cPerson, Boolean\u003e getTrainingAttendance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.trainingAttendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean getPersonAttendance(Person name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.trainingAttendance.get(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns a list of person who has attended this training"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public List\u003cPerson\u003e getAttended() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        List\u003cPerson\u003e listOfAttended \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (Map.Entry\u003cPerson, Boolean\u003e set: this.trainingAttendance.entrySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Person name \u003d set.getKey();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Boolean hasAttended \u003d set.getValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (hasAttended) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                listOfAttended.add(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return listOfAttended;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 3,
      "junhuplim": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Event(\"freestyle 50m\"), new Event(\"backstroke 100m\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Event(\"breaststroke 100m\"), new Event(\"butterfly 100m\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Event(\"medley 200m\"), new Event(\"freestyle relay 4 x 100m\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static ReadOnlyPerformance getSamplePerformance() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance samplePerformance \u003d new Performance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            samplePerformance.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return samplePerformance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                getTagSet(\"friends\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                getTagSet(\"neighbours\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                getTagSet(\"family\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                getTagSet(\"classmates\"), new Photo(\"default.png\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                getTagSet(\"colleagues\"), new Photo(\"default.png\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "ChangUo79": 1,
      "hellodommy": 20,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AttendanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Attendance}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public interface AttendanceStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns the file path of the Attendance data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Optional\u003cAttendance\u003e readAttendance() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Optional\u003cAttendance\u003e readAttendance(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void saveAttendance(Attendance attendance) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    void saveAttendance(Attendance attendance, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event name is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final HashMap\u003cString, List\u003cJsonAdaptedRecord\u003e\u003e performances \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                            @JsonProperty(\"performances\") HashMap\u003cString, List\u003cJsonAdaptedRecord\u003e\u003e performances) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (performances !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            this.performances.putAll(performances);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cString, List\u003cJsonAdaptedRecord\u003e\u003e tempPerformances \u003d new HashMap\u003c\u003e(); // for json"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cPerson, List\u003cRecord\u003e\u003e sourcePerformances \u003d source.getRecords(); // actual performances"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        sourcePerformances.forEach((person, records) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            JsonAdaptedPerson newPerson \u003d new JsonAdaptedPerson(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            List\u003cJsonAdaptedRecord\u003e tempRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            tempRecords.addAll(records.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    .map(JsonAdaptedRecord::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                String personJsonString \u003d JsonUtil.toJsonString(newPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                tempPerformances.put(personJsonString, tempRecords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performances.putAll(tempPerformances);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!Event.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(Event.INVALID_NAME_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final String modelName \u003d name.trim().toLowerCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        HashMap\u003cPerson, List\u003cRecord\u003e\u003e initialisedPerformances \u003d new HashMap\u003c\u003e(); // actual performances"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performances.forEach((jsonAdaptedPerson, jsonAdaptedRecords) -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            List\u003cRecord\u003e tempRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            for (JsonAdaptedRecord jsonAdaptedRecord : jsonAdaptedRecords) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    tempRecords.add(jsonAdaptedRecord.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                Person person \u003d JsonUtil.fromJsonString(jsonAdaptedPerson, JsonAdaptedPerson.class).toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                initialisedPerformances.put(person, tempRecords);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            } catch (IllegalValueException | IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final HashMap\u003cPerson, List\u003cRecord\u003e\u003e modelPerformances \u003d initialisedPerformances;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Event(modelName, modelPerformances);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private final String photo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"photo\") String photo) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d source.getPhoto().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (photo \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Photo.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        if (!Photo.isValidFilePath(photo)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            throw new IllegalValueException(Photo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        final Photo modelPhoto \u003d new Photo(photo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelPhoto);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 14,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final String timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecord} with the given record details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"date\") String date, @JsonProperty(\"timing\") String timing) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts a given {@code Record} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        date \u003d source.getDate().getUnparsed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        timing \u003d source.getTiming().getUnparsed();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts this Jackson-friendly adapted record object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final AthletickDate modelDate \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (timing \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"timing\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final Timing modelTiming \u003d ParserUtil.parseTiming(timing);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new Record(modelDate, modelTiming);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTraining.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Jackson-friendly version of {@link Training}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class JsonAdaptedTraining {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final HashMap\u003cString, Boolean\u003e trainingAttendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructs a {@code JsonAdaptedTraining} with the given training details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAdaptedTraining(@JsonProperty(\"date\") String date, @JsonProperty(\"trainingAttendance\") HashMap\u003cString,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Boolean\u003e trainingAttendance) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance \u003d trainingAttendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts a given {@code Training} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAdaptedTraining(Training training) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.date \u003d training.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cString, Boolean\u003e tempHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e trainingAttendance \u003d training.getTrainingAttendance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        trainingAttendance.forEach((person, hasAttended) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            JsonAdaptedPerson newPerson \u003d new JsonAdaptedPerson(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                String personJsonString \u003d JsonUtil.toJsonString(newPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                tempHash.put(personJsonString, hasAttended);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance \u003d tempHash;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts this Jackson-friendly adapted training object into the model\u0027s {@code Training} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the converting jackson adapted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * person to Person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Training toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String date \u003d this.date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new IllegalValueException(\"Empty date\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        /* PSEUDOCODE If the date is not valid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if(this.date is invalid) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new IllegalValueException(\"Invalid date\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        HashMap\u003cPerson, Boolean\u003e tempHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.trainingAttendance.forEach((jsonPerson, hasAttended) -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                Person person \u003d JsonUtil.fromJsonString(jsonPerson, JsonAdaptedPerson.class).toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                tempHash.put(person, hasAttended);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } catch (IllegalValueException | IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new Training(date, tempHash);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAttendance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Jackson-friendly version of {@link Attendance}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class JsonAttendance {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private final List\u003cJsonAdaptedTraining\u003e jsonTrainings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructs a {@code JsonAttendance} with the given attendance details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAttendance(@JsonProperty(\"jsonTrainings\") List\u003cJsonAdaptedTraining\u003e jsonTrainings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.jsonTrainings \u003d jsonTrainings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts a given {@code Attendance} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cJsonAdaptedTraining\u003e jsonTrainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e normalTrainings \u003d attendance.getTrainings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Training training: normalTrainings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            JsonAdaptedTraining toAdd \u003d new JsonAdaptedTraining(training);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            jsonTrainings.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.jsonTrainings \u003d jsonTrainings;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Converts this Jackson-friendly adapted training object into the model\u0027s {@code Training} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the converting jackson adapted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * person to Person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Attendance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTraining\u003e trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (JsonAdaptedTraining jsonTraining: jsonTrainings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            trainings.add(jsonTraining.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new Attendance(trainings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAttendanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A class to access Attendance data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class JsonAttendanceStorage implements AttendanceStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public JsonAttendanceStorage(Path path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cAttendance\u003e readAttendance() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return readAttendance(this.path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cAttendance\u003e readAttendance(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Optional\u003cJsonAttendance\u003e jsonAttendance \u003d JsonUtil.readJsonFile(filePath, JsonAttendance.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (!jsonAttendance.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            return Optional.of(jsonAttendance.get().toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveAttendance(Attendance attendance) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        saveAttendance(attendance, this.path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveAttendance(Attendance attendance, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAttendance(attendance), filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPerformanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A class to access EventList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonPerformanceStorage implements PerformanceStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPerformanceStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonPerformanceStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Path getEventFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return readEvents(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Similar to {@link #readEvents()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Optional\u003cJsonSerializablePerformance\u003e jsonEventList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                filePath, JsonSerializablePerformance.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        if (!jsonEventList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return Optional.of(jsonEventList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        saveEvents(events, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePerformance(events), filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePerformance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * An Immutable EventList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class JsonSerializablePerformance {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Constructs a {@code JsonSerializableEvents} with the given events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonSerializablePerformance(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts a given {@code stream} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEvents}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public JsonSerializablePerformance(ReadOnlyPerformance source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        events.addAll(source.getPerformance().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Converts this event list into the model\u0027s {@code EventList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Performance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance eventList \u003d new Performance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            if (eventList.hasEvent(event)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            eventList.addEvent(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PerformanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Represents a storage for {@link seedu.address.model.performance}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public interface PerformanceStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Path getEventFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cReadOnlyPerformance\u003e readEvents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveEvents(ReadOnlyPerformance events) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public interface Storage extends AddressBookStorage, PerformanceStorage, AttendanceStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    Optional\u003cAttendance\u003e readAttendance() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    void saveAttendance(Attendance attendance) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 3,
      "hellodommy": 12,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private PerformanceStorage performanceStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private AttendanceStorage attendanceStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, PerformanceStorage performanceStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                          AttendanceStorage attendanceStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performanceStorage \u003d performanceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.attendanceStorage \u003d attendanceStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Performance methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Path getEventFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performanceStorage.getEventFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return readEvents(performanceStorage.getEventFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public Optional\u003cReadOnlyPerformance\u003e readEvents(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performanceStorage.readEvents(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        saveEvents(events, performanceStorage.getEventFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void saveEvents(ReadOnlyPerformance events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        performanceStorage.saveEvents(events, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attendance methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cAttendance\u003e readAttendance() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attendanceStorage.readAttendance();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Optional\u003cAttendance\u003e readAttendance(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return attendanceStorage.readAttendance(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveAttendance(Attendance attendance) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceStorage.saveAttendance(attendance);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveAttendance(Attendance attendance, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attendanceStorage.saveAttendance(attendance, filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 24,
      "hellodommy": 34,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendancePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view attendance is issued."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AttendancePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"AttendancePanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AttendancePanel() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarDetailPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view trainings and performance on a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * specified date is issued."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarDetailPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"CalendarDetailPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private AthletickDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox attendanceBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox performanceBox;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarDetailPanel(AthletickDate date, Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialisePerformanceData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieves data from model. Creates a header for each event and lists records for the event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * taken on the particular date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void initialisePerformanceData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e performanceData \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                model.getCalendarCompatiblePerformance(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        performanceData.forEach((event, recordList) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            int numRecords \u003d recordList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (numRecords \u003e 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                PerformanceTableHeader header \u003d new PerformanceTableHeader(event.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                performanceBox.getChildren().add(header.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                for (int i \u003d 0; i \u003c numRecords; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    CalendarCompatibleRecord record \u003d recordList.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    Person athlete \u003d record.getAthlete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String name \u003d athlete.getName().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String timing \u003d record.getTiming();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    PerformanceTableContent content \u003d new PerformanceTableContent(name, timing);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    performanceBox.getChildren().add(content.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view calendar is issued."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String[] DAYS \u003d {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \"Fri\", \"Sat\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String[] MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int[] DAYS_IN_MONTH \u003d {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int dayOfWeek;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int dayOfMonth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image leftIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/left_arrow.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image rightIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/right_arrow.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image trainingIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"/pink_dot.png\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image performanceIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            + \"/purple_dot.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label currYear;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label currDayAndDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label selectedDateMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Button prevButton;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Button nextButton;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private GridPane calendarGridPane;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarPanel(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setButtonImage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveCurrentDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setCurrentDateTitle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public CalendarPanel(AthletickDate date, Model model) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setButtonImage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveCurrentDate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setCurrentDateTitle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        retrieveProvidedDate(date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setButtonImage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView leftArrow \u003d new ImageView(leftIcon);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        leftArrow.setFitHeight(32);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        leftArrow.setFitWidth(32);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView rightArrow \u003d new ImageView(rightIcon);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        rightArrow.setFitHeight(32);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        rightArrow.setFitWidth(32);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        prevButton.setGraphic(leftArrow);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        nextButton.setGraphic(rightArrow);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        prevButton.setText(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        nextButton.setText(\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieve details of today\u0027s date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void retrieveCurrentDate() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dayOfWeek \u003d calendar.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the title of the calendar feature to today\u0027s date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setCurrentDateTitle() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String day \u003d DAYS[dayOfWeek - 1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String currMonth \u003d MONTHS[month];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        currYear.setText(\"\" + year);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        currDayAndDate.setText(day + \", \" + currMonth + \" \" + dayOfMonth);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void retrieveProvidedDate(AthletickDate date) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d date.getMonth() - 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d date.getYear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar.set(year, month, 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets title of selected date and fills up the calendar grid with the appropriate days in"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * the month."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Represents difference in month from current month. e.g. -1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    indicates previous month, 1 indicates the next month and 0 indicates"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    the current month"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void initialiseSelectedDate(int monthChange) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        updateDateVariables(monthChange);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setSelectedDateTitle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        fillUpDays();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void updateDateVariables(int monthChange) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendar.add(Calendar.MONTH, monthChange);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void setSelectedDateTitle() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String selectedMonth \u003d MONTHS[month];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        selectedDateMessage.setText(selectedMonth + \", \" + year);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Fills up calendar grid with days of selected month using provide year and month. Excess grid"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * boxes at start and end of calendar filled up with days from previous and next month with"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * respect to the selected month."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void fillUpDays() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        GregorianCalendar gregorianCalendar \u003d new GregorianCalendar(year, month, 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int leadGap \u003d calculateLeadGap(gregorianCalendar);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d calculateDaysInMonth(gregorianCalendar);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int tailGap \u003d calculateTailGap(daysInMonth + leadGap);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] before \u003d previousMonth(month, leadGap);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] current \u003d currMonth(daysInMonth);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] after \u003d nextMonth(month, tailGap);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] combined \u003d combine(before, current, after);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        fillUpGrid(before.length, current.length, combined);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calculates excess grid boxes at the front of the calendar."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param gc Calendar containing selected date"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Number of excess grid boxes."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int calculateLeadGap(GregorianCalendar gc) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int result \u003d gc.get(Calendar.DAY_OF_WEEK) - 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (result \u003d\u003d 0) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result \u003d 7;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calculates number of days in selected date."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param gc Calendar containing selected date"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Number of days in selected date."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int calculateDaysInMonth(GregorianCalendar gc) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int result \u003d DAYS_IN_MONTH[month];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (gc.isLeapYear(gc.get(Calendar.YEAR)) \u0026\u0026 month \u003d\u003d 1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result++;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calculates excess grid boxes at the end of the calendar."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currFilledGrids Number of days of calendar already filled up"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int Number of excess grid boxes."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int calculateTailGap(int currFilledGrids) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return 42 - currFilledGrids;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Generates array containing days from previous month."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currMonth Current selected month"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param leadGap Number of days needed from previous month"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String array containing days from previous month."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] previousMonth(int currMonth, int leadGap) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.MONTH, currMonth);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int y \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int m \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        GregorianCalendar gc \u003d new GregorianCalendar(y, m, 1);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d DAYS_IN_MONTH[m];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (gc.isLeapYear(gc.get(Calendar.YEAR)) \u0026\u0026 m \u003d\u003d 1) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            daysInMonth++;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d daysInMonth; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            sb.append(i).append(\" \");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] allDays \u003d sb.toString().split(\"\\\\s\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] neededDays \u003d Arrays.copyOfRange(allDays, 0, leadGap);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        neededDays \u003d reverse(neededDays);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return neededDays;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Reverses a String array."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param s String array to be reversed"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Reversed String array."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] reverse(String[] s) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d 0; i \u003c (s.length - (i + 1)); i++) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String temp \u003d s[s.length - (i + 1)];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            s[s.length - (i + 1)] \u003d s[i];"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            s[i] \u003d temp;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Generates array containing days from selected month."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param numDays Number of days in selected month"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String array containing days from selected month."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] currMonth(int numDays) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] result \u003d new String[numDays];"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result[i] \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Generates array containing days from next month."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param currMonth Current selected month"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tailGap Number of days needed from next month"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String array containing days from next month."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] nextMonth(int currMonth, int tailGap) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.MONTH, currMonth);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int y \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int m \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        GregorianCalendar gc \u003d new GregorianCalendar(y, m, 1);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int daysInMonth \u003d DAYS_IN_MONTH[m];"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (gc.isLeapYear(gc.get(Calendar.YEAR)) \u0026\u0026 m \u003d\u003d 1) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            daysInMonth++;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d daysInMonth; i++) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            sb.append(i).append(\" \");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] allDays \u003d sb.toString().split(\"\\\\s\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] neededDays \u003d Arrays.copyOfRange(allDays, 0, tailGap);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return neededDays;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Combines 3 string arrays together, with array {@code a}\u0027s elements coming in front, array"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * {@code b}\u0027s elements coming in the middle and array {@code c}\u0027s elements coming at the back."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param prev String array whose elements are to be in front"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param curr String array whose elements are to be in the middle"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param next String array whose elements are to be behind"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String[] Combined String array."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String[] combine(String[] prev, String[] curr, String[] next) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int length \u003d prev.length + curr.length + next.length;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] result \u003d new String[length];"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        System.arraycopy(prev, 0, result, 0, prev.length);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        System.arraycopy(curr, 0, result, prev.length, curr.length);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        System.arraycopy(next, 0, result, prev.length + curr.length, next.length);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds date numbers and dot indicators inside each grid of the grid pane in the FXML."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param numBefore Number of days from month before"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param numCurr Number of days from selected month"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param days String array containing all 42 days to be used to fill up the 7 * 6 grid pane"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void fillUpGrid(int numBefore, int numCurr, String[] days) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int beforeCount \u003d numBefore;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int currentCount \u003d numCurr;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                String day \u003d days[counter];"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Label l \u003d createLabel(day);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                boolean havePerformanceEntry \u003d false;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (beforeCount \u003e 0) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    l.setTextFill(Paint.valueOf(\"#999999\"));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    havePerformanceEntry \u003d checkPerformanceEntryExists(day, -1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    beforeCount--;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else if (currentCount \u003e 0) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    // mark today\u0027s date in red and bold, otherwise mark as normal"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    if (isToday(days[counter])) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        l.setTextFill(Paint.valueOf(\"#f64747\"));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        l.setStyle(\"-fx-font-weight:bold\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    havePerformanceEntry \u003d checkPerformanceEntryExists(day, 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    currentCount--;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    havePerformanceEntry \u003d checkPerformanceEntryExists(day, 1);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    l.setTextFill(Paint.valueOf(\"#999999\"));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (havePerformanceEntry) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    ImageView performanceIndicator \u003d createPerformanceIndicator();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    calendarGridPane.add(gridContent(l, performanceIndicator), col, row);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    calendarGridPane.add(gridContent(l), col, row);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if there is a performance entry on a particular AthletickDate constructed using the"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * visible calendar dates."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param monthChange Used for days shown from previous and next month that fill up the"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     *                    remaining tail and lead gaps"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return boolean True if there is a performance entry on that date, false otherwise."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private boolean checkPerformanceEntryExists(String day, int monthChange) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.set(Calendar.MONTH, month);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        c.add(Calendar.MONTH, monthChange);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int y \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int m \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad \u003d new AthletickDate(Integer.parseInt(day), m + 1, y, 1,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                MONTHS[m]);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return model.hasPerformanceOn(ad);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a performance dot indicator."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return ImageView with set image and desired dimensions."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView createPerformanceIndicator() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ImageView i \u003d new ImageView(performanceIcon);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        i.setFitHeight(6);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        i.setFitWidth(6);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates a label with the provided {@code labelText}."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param labelText String to be used as text"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Label with text set as {@code labelText}."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label createLabel(String labelText) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Label l \u003d new Label();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setText(labelText);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setPadding(new Insets(5, 0, 0, 0));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setFont(new Font(\"System\", 11));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        l.setTextFill(Paint.valueOf(\"#000000\"));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return l;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Checks if date on calendar corresponds with today\u0027s date."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return True if date is today\u0027s date, false otherwise."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private boolean isToday(String day) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int y \u003d c.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int m \u003d c.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return (Integer.parseInt(day) \u003d\u003d dayOfMonth \u0026\u0026 y \u003d\u003d year \u0026\u0026 m \u003d\u003d month);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Wraps {@code items} inside a {@code VBox} and returns it."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param items Items to be wrapped"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return VBox containing item."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox gridContent(Node ... items) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        VBox v \u003d new VBox();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setFillWidth(true);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        v.setAlignment(Pos.TOP_CENTER);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        for (Node item : items) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            v.getChildren().add(item);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return v;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Initialise calendar to previous month data when the previous button is clicked."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void handlePrevClick() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendarGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(-1);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Initialise calendar to previous month data when the next button is clicked."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void handleNextClick() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        calendarGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        initialiseSelectedDate(1);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 441
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventRow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * The UI component that displays the name of an event when \"view performance\" command is called."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String FXML \u003d \"EventRow.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public EventRow(String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.eventName.setText(eventName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t12-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InformationDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * An UI component that displays information of a {@code Person} when selected."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class InformationDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String NO_PERSON_SELECTED_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String FXML \u003d \"InformationDisplay.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private GridPane informationBlock;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private ImageView photo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label attendanceRate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label performance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Label secondaryTitle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private VBox imageHolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private VBox informationBox;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public InformationDisplay(Person selectedPerson, String attendance) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.person \u003d selectedPerson;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        name.setText(this.person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        phone.setText(this.person.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        address.setText(this.person.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        address.setPrefWidth(150);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        address.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        email.setText(this.person.getEmail().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.setImage(this.person.getPhoto().photo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.setPreserveRatio(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add((new TagLayout(tag.tagName)).getRoot()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        //setText of attendance and performance. Should attendance and performance be tag to a person?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        attendanceRate.setText(attendance);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        performance.setText(\"superb\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        resizeImage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Resize the image when window size changes"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void resizeImage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.fitHeightProperty().bind(imageHolder.heightProperty().subtract(100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo.fitWidthProperty().bind(imageHolder.widthProperty().subtract(100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private StackPane featureBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    void fillInnerParts(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarPanel calendarPanel \u003d new CalendarPanel(model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        featureBoxPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (!(commandResult.getFeature() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                switch (commandResult.getFeature().toString()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                case \"calendar\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    CalendarPanel calendarPanel \u003d new CalendarPanel(commandResult.getModel());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                case \"attendance\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    AttendancePanel attendance \u003d new AttendancePanel();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().add(attendance.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                case \"performance\":"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                    PerformancePanel performance \u003d new PerformancePanel(commandResult.getModel());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().add(performance.getRoot());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (!(commandResult.getPerson() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                InformationDisplay informationDisplay \u003d new InformationDisplay(logic.getPerson(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                                               logic.getPersonAttendance());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                featureBoxPlaceholder.getChildren().add(informationDisplay.getRoot());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (!(commandResult.getDate() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Model model \u003d commandResult.getModel();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                switch (commandResult.getDate().getType()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    CalendarDetailPanel calendarDetailPanel \u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                            new CalendarDetailPanel(commandResult.getDate(), model);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().add(calendarDetailPanel.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    CalendarPanel calendarPanel \u003d new CalendarPanel(commandResult.getDate(), model);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    featureBoxPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 49,
      "ChangUo79": 5,
      "hellodommy": 1,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformancePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * UI component that is displayed when the command to view performance is issued."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformancePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformancePanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private ReadOnlyPerformance performance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private VBox eventList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public PerformancePanel(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        this.performance \u003d model.getPerformance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        populateEventList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Fills up the VBox with events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void populateEventList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : performance.getPerformance()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            EventRow eventRow \u003d new EventRow(event.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            eventList.getChildren().add(eventRow.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 14,
      "hellodommy": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceTableContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays a record for an event. A record includes a name and a timing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformanceTableContent extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformanceTableContent.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label timing;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public PerformanceTableContent(String personName, String personTiming) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        name.setText(personName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        timing.setText(personTiming);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceTableHeader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The UI component that displays event names."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class PerformanceTableHeader extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"PerformanceTableHeader.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label tableHeader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public PerformanceTableHeader(String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tableHeader.setText(eventName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add((new TagLayout(tag.tagName)).getRoot()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a tag for an athlete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class TagLayout extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String FXML \u003d \"TagLayout.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView tagIcon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public TagLayout(String labelText) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tagName.setText(labelText);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tagIcon.setImage(new Image(\"/images/tag_icon.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/athletick_logo_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            mainWindow.fillInnerParts(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 7,
      "-": 82
    }
  },
  {
    "path": "src/main/resources/view/AttendancePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #FFFFFF;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"ATTENDANCE DISPLAY\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont size\u003d\"39.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 15
    }
  },
  {
    "path": "src/main/resources/view/CalendarDetailPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" styleClass\u003d\"edge-to-edge\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Attendance\" textFill\u003d\"#ff7979\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"32.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox fx:id\u003d\"attendanceBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Performance\" textFill\u003d\"#e056fd\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"32.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox fx:id\u003d\"performanceBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 45
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currYear\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"15.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Current Year\" textFill\u003d\"#ffffffb2\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currDayAndDate\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"20.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Current Day and Date\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cRegion style\u003d\"-fx-background-color: #30336B;\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"45.0\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"22.5\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"9.0\" fitWidth\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cImage url\u003d\"@../images/pink_dot.png\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cInsets right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel text\u003d\"Training\" textFill\u003d\"#ffffffb2\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"22.5\" style\u003d\"-fx-background-color: #30336B;\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"9.0\" fitWidth\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cImage url\u003d\"@../images/purple_dot.png\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cInsets right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel text\u003d\"Performance\" textFill\u003d\"#ffffffb2\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets right\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cButton fx:id\u003d\"prevButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handlePrevClick\" style\u003d\"-fx-background-color: #FFFFFF;\" styleClass\u003d\"null\" text\u003d\"Prev\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"selectedDateMessage\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"250.0\" text\u003d\"Selected Date and Year\" textFill\u003d\"#30336b\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cButton fx:id\u003d\"nextButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleNextClick\" style\u003d\"-fx-background-color: #FFFFFF;\" styleClass\u003d\"null\" text\u003d\"Next\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets left\u003d\"80.0\" right\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cBorderPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003ccenter\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cGridPane fx:id\u003d\"calendarGridPane\" alignment\u003d\"TOP_CENTER\" BorderPane.alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"LEFT\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"16.0\" left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/center\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003ctop\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cGridPane alignment\u003d\"CENTER\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"S\" textFill\u003d\"#00000080\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"M\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"T\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"W\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"T\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"F\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"S\" textFill\u003d\"#00000080\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cInsets bottom\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/top\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 202
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cStackPane alignment\u003d\"TOP_LEFT\" style\u003d\"-fx-background-color: #95AFC0;\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*.label {*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-size: 11pt;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-family: \"Segoe UI Semibold\";*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-text-fill: #555555;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-opacity: 0.9;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/EventRow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003cLabel fx:id\u003d\"eventName\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Label\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" right\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 11
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #eb4d4b !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background: #ffffff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/InformationDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003cVBox fx:id\u003d\"informationBox\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"390.0\" prefWidth\u003d\"621.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"39.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Profile\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"34.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003cHBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"361.0\" prefWidth\u003d\"600.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cVBox fx:id\u003d\"imageHolder\" prefHeight\u003d\"402.0\" prefWidth\u003d\"310.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cImageView fx:id\u003d\"photo\" fitHeight\u003d\"164.0\" fitWidth\u003d\"193.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"10.0\" prefWidth\u003d\"234.0\" prefWrapLength\u003d\"500.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cLabel fx:id\u003d\"secondaryTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"12.0\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Personal Information\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003cGridPane fx:id\u003d\"informationBlock\" hgap\u003d\"10.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"225.0\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"148.99996617106285\" minWidth\u003d\"10.0\" prefWidth\u003d\"116.30439794241153\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"229.56522894702496\" minWidth\u003d\"10.0\" prefWidth\u003d\"227.8956122478062\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"242.10434981982522\" minHeight\u003d\"0.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"242.10434981982522\" minHeight\u003d\"0.0\"  vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cRowConstraints maxHeight\u003d\"316.97392209837284\" minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"316.97392209837284\" minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cRowConstraints maxHeight\u003d\"316.97392209837284\" minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cRowConstraints maxHeight\u003d\"316.97392209837284\" minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel text\u003d\"Name:\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$name\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel text\u003d\"Phone:\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel text\u003d\"Email:\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel fx:id\u003d\"email\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$email\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel text\u003d\"Address:\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel fx:id\u003d\"address\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"\\$address\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel text\u003d\"Attendance Rate\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel fx:id\u003d\"attendanceRate\" text\u003d\"\\$attendanceRate\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel text\u003d\"Performance\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003cLabel fx:id\u003d\"performance\" text\u003d\"\\$performance\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                              \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 122
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    background-color: #ffffff; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*.label {*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-size: 11pt;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-font-family: \"Segoe UI Semibold\";*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-text-fill: #555555;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-opacity: 0.9;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-prompt-text-fill: #e0e0e0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-base: #ffffff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-control-inner-background: #ffffff;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: transparent transparent transparent #ffffff;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 50%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%) !important;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 2px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: derive(#000000, 20%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".menu:showing {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 8 8 8 8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #dff9fb;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*.button:focused {*/"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-color: white, white;*/"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-width: 1, 1;*/"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-style: solid, segments(1, 1);*/"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-radius: 0, 0;*/"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*    -fx-border-insets: 1 1 1 1, 0;*/"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #95AFC0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-color: #95AFC0 #95AFC0 #95AFC0 #95AFC0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-text-fill: #30336B;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 366
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"740.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Athletick\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    \u003cImage url\u003d\"@/images/athletick_logo_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cHBox minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "              \u003cVBox fx:id\u003d\"personList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"350.0\" minWidth\u003d\"120.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" alignment\u003d\"TOP_CENTER\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" style\u003d\"-fx-background-color: #95AFC0;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" style\u003d\"-fx-background-color: #FFFFFF;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"featureBoxPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"TOP_LEFT\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 18,
      "ChangUo79": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PerformancePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #FFFFFF;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cLabel maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #30336B;\" text\u003d\"Performance\" textFill\u003d\"#e056fd\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "         \u003cInsets bottom\u003d\"16.0\" left\u003d\"32.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "   \u003cVBox fx:id\u003d\"eventList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 11,
      "hellodommy": 7
    }
  },
  {
    "path": "src/main/resources/view/PerformanceTableContent.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cGridPane maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Name\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cLabel fx:id\u003d\"timing\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Timing\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 41
    }
  },
  {
    "path": "src/main/resources/view/PerformanceTableHeader.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"tableHeader\" alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #95AFC0;\" text\u003d\"Event Name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 19
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 10,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" alignment\u003d\"TOP_LEFT\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/TagLayout.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cImageView fx:id\u003d\"tagIcon\" fitHeight\u003d\"13.0\" fitWidth\u003d\"13.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"tagName\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"6.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cFont size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.storage.JsonAttendanceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.storage.JsonPerformanceStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonPerformanceStorage eventStorage \u003d new JsonPerformanceStorage(temporaryFolder.resolve((\"events.json\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonAttendanceStorage attendanceStorage \u003d new JsonAttendanceStorage(temporaryFolder.resolve(\"attendance.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, eventStorage,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonPerformanceStorage eventStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new JsonPerformanceStorage(temporaryFolder.resolve(\"ioException.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonAttendanceStorage attendanceStorage \u003d new JsonAttendanceStorage(temporaryFolder.resolve("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                \"ioExceptionAttendance.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, eventStorage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 2,
      "jeunhoe": 4,
      "hellodommy": 10,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 5,
      "jeunhoe": 1,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public Person selectPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void storePerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        public void sortAddressBookByName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public void addTraining(Training training) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public ReadOnlyAddressBook getAddressBookDeepCopy() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        public Attendance getAttendance() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addRecord(String eventName, Person person, Record record) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 15,
      "hellodommy": 37,
      "jeunhoe": 11,
      "junhuplim": 12,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CalendarCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.testutil.AthletickDateBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CalendarCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_validDate_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate validDate \u003d new AthletickDateBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CommandResult commandResult \u003d new CalendarCommand(validDate).execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(CalendarCommand.MESSAGE_SUCCESS_1 + \"1 January 2019\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_invalidDateType_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate invalidDateType \u003d new AthletickDateBuilder().withType(0).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand \u003d new CalendarCommand(invalidDateType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(CommandException.class, CalendarCommand.MESSAGE_INVALID_DATE, ("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            ) -\u003e calendarCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad1 \u003d new AthletickDateBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate ad2 \u003d new AthletickDateBuilder().withDay(2).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand1 \u003d new CalendarCommand(ad1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand2 \u003d new CalendarCommand(ad2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(calendarCommand1.equals(calendarCommand1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        CalendarCommand calendarCommand1Copy \u003d new CalendarCommand(ad1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(calendarCommand1.equals(calendarCommand1Copy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(calendarCommand1.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(calendarCommand1.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        //different command -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(calendarCommand1.equals(calendarCommand2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 72,
      "hellodommy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 6,
      "jeunhoe": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.PerformanceSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String VALID_PHOTO_AMY \u003d \"amy.png\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String VALID_PHOTO_BOB \u003d \"bob.png\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_EVENT \u003d \"freestyle 50m\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_DATE \u003d \"25122019\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_TIMING \u003d \"30.4\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String PHOTO_DESC_AMY \u003d \" \" + PREFIX_IMAGE + VALID_PHOTO_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String PHOTO_DESC_BOB \u003d \" \" + PREFIX_IMAGE + VALID_PHOTO_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String EVENT_DESC \u003d \" \" + PREFIX_EVENT + VALID_EVENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String TIMING_DESC \u003d \" \" + PREFIX_TIMING + VALID_TIMING;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String INVALID_PHOTO_DESC \u003d \" \" + PREFIX_IMAGE + \"@default.png\"; // non-alphanumeric not allowed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2nd Jan 2019\"; // letters not allowed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withPhoto(VALID_PHOTO_AMY).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withPhoto(VALID_PHOTO_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 8,
      "hellodommy": 12,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 9,
      "jeunhoe": 1,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Performance(model.getPerformance()), model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Performance(model.getPerformance()), model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Performance(model.getPerformance()), model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Performance(model.getPerformance()), model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 15,
      "jeunhoe": 1,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyPerformance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.CalendarCompatibleRecord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.training.Training;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event validEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        CommandResult commandResult \u003d new EventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(String.format(EventCommand.MESSAGE_SUCCESS, VALID_EVENT), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event validEvent \u003d new Event(VALID_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(validEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            String.format(EventCommand.MESSAGE_DUPLICATE_EVENT, VALID_EVENT), () -\u003e eventCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event butterly \u003d new Event(\"butterly\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event freestyle \u003d new Event(\"freestyle\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand addButterflyCommand \u003d new EventCommand(butterly);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand addFreeStyleCommand \u003d new EventCommand(freestyle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(addButterflyCommand.equals(addButterflyCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        EventCommand addButterflyCommandCopy \u003d new EventCommand(butterly);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(addButterflyCommand.equals(addButterflyCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(addButterflyCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(addButterflyCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(addButterflyCommand.equals(addFreeStyleCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return new Performance();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public Person selectPerson() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void storePerson(Person person) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void sortAddressBookByName() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addTraining(Training training) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyAddressBook getAddressBookDeepCopy() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public Attendance getAttendance() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public ReadOnlyPerformance getPerformance() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public void addRecord(String eventName, Person person, Record record) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public HashMap\u003cEvent, List\u003cCalendarCompatibleRecord\u003e\u003e getCalendarCompatiblePerformance(AthletickDate date) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        public boolean hasPerformanceOn(AthletickDate date) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 268
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new TagMatchesPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new TagMatchesPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(filterFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d command.getNoMatchMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d preparePredicate(\"friends colleagues\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Parses {@code userInput} into a {@code TagMatchesPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private TagMatchesPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new TagMatchesPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 87,
      "jeunhoe": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 6,
      "jeunhoe": 1,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 5,
      "jeunhoe": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PerformanceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Timing;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final AthletickDate VALID_ATHLETICK_DATE \u003d new AthletickDate(25, 12, 2019, 2, \"December\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final Timing VALID_ATHLETICK_TIMING \u003d new Timing(VALID_TIMING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final Record VALID_RECORD \u003d new Record(VALID_ATHLETICK_DATE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new PerformanceCommand(INDEX_FIRST_PERSON, VALID_EVENT, VALID_ATHLETICK_DATE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d performanceCommand.getSuccessMessage("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            person, VALID_EVENT, VALID_ATHLETICK_DATE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel.addRecord(VALID_EVENT, person, VALID_RECORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandSuccess(performanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new PerformanceCommand(outOfBoundIndex, VALID_EVENT, VALID_ATHLETICK_DATE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(performanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        PerformanceCommand performanceCommand \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new PerformanceCommand(outOfBoundIndex, VALID_EVENT, VALID_ATHLETICK_DATE, VALID_ATHLETICK_TIMING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertCommandFailure(performanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class SelectCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void execute_validIndexUnfliteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Person personToSelect \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, personToSelect);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                model.getAttendance(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        expectedModel.selectPerson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertCommandSuccess(selectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandExpection() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private void showSelectPerson(Model model) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 82,
      "hellodommy": 6,
      "jeunhoe": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_listIsAlreadySorted_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(new SortCommand(), model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_listIsUnsorted_showsSortedList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.deletePerson(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.addPerson(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        model.sortAddressBookByName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 38,
      "hellodommy": 4,
      "jeunhoe": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.getTypicalPerformance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.testutil.FeatureBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalPerformance(), new Attendance(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getPerformance(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            new Attendance(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_validFeature_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Feature feature \u003d new FeatureBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(feature);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String expectedMessage \u003d viewCommand.MESSAGE_SUCCESS_CALENDAR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void execute_invalidFeature_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                ) -\u003e new FeatureBuilder().withName(\"test\").build());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 34,
      "hellodommy": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cString\u003e tagQueries \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand command \u003d (FilterCommand) parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                FilterCommand.COMMAND_WORD + \" \" + tagQueries.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertEquals(new FilterCommand(new TagMatchesPredicate(tagQueries)), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" 3\") instanceof SortCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 7,
      "hellodommy": 10,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CalendarCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class CalendarCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private CalendarCommandParser parser \u003d new CalendarCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs1_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs2_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"test\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_validArgs_returnsCalendarCommand() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseSuccess(parser, \"01012019\", new CalendarCommand(new AthletickDate(1, 1, 2019, 1, \"January\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 1,
      "-": 210
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EventCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private EventCommandParser parser \u003d new EventCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgs_returnsEventCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, VALID_EVENT, new EventCommand(new Event(VALID_EVENT)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.person.TagMatchesPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "                new FilterCommand(new TagMatchesPredicate(Arrays.asList(\"captain\", \"freestyle\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, \"captain freestyle\", expectedFilterCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseSuccess(parser, \" \\n captain \\n \\t freestyle  \\t\", expectedFilterCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PerformanceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class PerformanceCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PerformanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private PerformanceCommandParser parser \u003d new PerformanceCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, EVENT_DESC + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing event prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + VALID_EVENT + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + EVENT_DESC + VALID_DATE + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // missing timing prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + EVENT_DESC + DATE_DESC + VALID_TIMING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX + VALID_EVENT + VALID_DATE + VALID_TIMING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            VALID_INDEX + EVENT_DESC + INVALID_DATE_DESC + TIMING_DESC, AthletickDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            PREAMBLE_NON_EMPTY + VALID_INDEX + VALID_EVENT + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EVENT_DESC + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"0\" + EVENT_DESC + DATE_DESC + TIMING_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class SelectCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertParseFailure(parser, \"b\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs1_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"1\", Feature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_invalidArgs2_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseFailure(parser, \"string\", Feature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertParseSuccess(parser, \"calendar\", new ViewCommand(new Feature(\"calendar\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void removePerson_personInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        addressBook.removePerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 7,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AttendanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class AttendanceTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setPerson_changePerson_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.setPerson(ALICE, BENSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(modelManager.hasPerson(BENSON));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortAddressBookByName_modifyList_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        modelManager.sortAddressBookByName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(modelManager.getAddressBook().getPersonList().get(0), ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance performance \u003d new Performance();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, performance, attendance, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, performance, new Attendance(), userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, performance, attendance, userPrefs)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, performance, attendance, userPrefs)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, performance, attendance, differentUserPrefs)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 16,
      "hellodommy": 7,
      "jeunhoe": 1,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/date/AthletickDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class AthletickDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AthletickDate(1, 1, 1, 0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getDay() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int day \u003d td.getDay();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(1, day);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getMonth() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int month \u003d td.getMonth();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(1, month);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getYear() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int year \u003d td.getYear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(2019, year);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getType() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int type \u003d td.getType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(1, type);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void getMth() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        AthletickDate td \u003d new AthletickDate(1, 1, 2019, 1, \"January\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String mth \u003d td.getMth();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"January\", mth);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 51,
      "hellodommy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/feature/FeatureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.feature;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class FeatureTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Feature(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Feature(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void isValidFeatureName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Feature.isValidFeatureName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"   \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"123\")); // numbers only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"@#$\")); // special characters only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertFalse(Feature.isValidFeatureName(\"test\")); // wrong string sequence"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(Feature.isValidFeatureName(\"calendar\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(Feature.isValidFeatureName(\"performance\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(Feature.isValidFeatureName(\"attendance\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"calendar\", new Feature(\"calendar\").toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 40,
      "ChangUo79": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/performance/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.EVENT_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.TypicalPerformance.EVENT_TWO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(EVENT_ONE.isSameEvent(EVENT_ONE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.isSameEvent(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.isSameEvent(EVENT_TWO));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Event eventCopy \u003d new Event(EVENT_ONE.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(EVENT_ONE.equals(eventCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(EVENT_ONE.equals(EVENT_ONE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.equals(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(EVENT_ONE.equals(EVENT_TWO));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/performance/RecordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Record(null, null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhotoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class PhotoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Photo(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void constructor_invalidPhoto_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String invalidPhoto \u003d \"@dummy.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Photo(invalidPhoto));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void isValidPhoto() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Photo.isValidFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"!@#dummy.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"21\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"dummy.jpeg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(Photo.isValidFilePath(\"Chicken.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"12345.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"Default.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"bobby97.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(Photo.isValidFilePath(\"986amyBoseman.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TagMatchesPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class TagMatchesPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate firstPredicate \u003d new TagMatchesPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate secondPredicate \u003d new TagMatchesPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate firstPredicateCopy \u003d new TagMatchesPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void test_tagMatchesQuery_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // One tag"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d new TagMatchesPredicate(Collections.singletonList(\"captain\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Multiple tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"captain\", \"freestyle\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\", \"freestyle\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Only one matching tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"captain\", \"freestyle\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\", \"butterfly\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Mixed-case tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"cApTaIn\", \"FrEeStYlE\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"captain\", \"freestyle\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public void test_tagDoesNotMatchQuery_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Zero tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        TagMatchesPredicate predicate \u003d new TagMatchesPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"captain\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        // Non-matching tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        predicate \u003d new TagMatchesPredicate(Arrays.asList(\"captain\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"butterfly\", \"injured\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static seedu.address.testutil.Comparators.NAME_COMPARATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void sortByName_unorderedList_returnsTrue() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        uniquePersonList.sortByName(NAME_COMPARATOR);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Iterator\u003cPerson\u003e iterator \u003d uniquePersonList.iterator();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(ALICE.isSamePerson(iterator.next()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertTrue(BOB.isSamePerson(iterator.next()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 12,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/training/TrainingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.model.training;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.testutil.TypicalTraining;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "class TrainingTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void test_validDate_returnTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String date \u003d new Date().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Training training \u003d new Training(date, new TypicalTraining().getTraining());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(date.equals(training.getDate()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void test_validTrainingAttendance_returnTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String date \u003d new Date().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TypicalTraining trainingGroup \u003d new TypicalTraining();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Training training \u003d new Training(date, trainingGroup.getTraining());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(trainingGroup.getTraining().equals(training.getTrainingAttendance()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void test_personHasAttendance_returnTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String date \u003d new Date().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TypicalTraining trainingGroup \u003d new TypicalTraining();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Training training \u003d new Training(date, trainingGroup.getTraining());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(training.getPersonAttendance(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(training.getPersonAttendance(BENSON));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertTrue(training.getPersonAttendance(ELLE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void test_personHasNoAttendance_returnFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String date \u003d new Date().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TypicalTraining trainingGroup \u003d new TypicalTraining();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        Training training \u003d new Training(date, trainingGroup.getTraining());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(training.getPersonAttendance(CARL));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(training.getPersonAttendance(GEORGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(training.getPersonAttendance(FIONA));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertFalse(training.getPersonAttendance(DANIEL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 54,
      "jeunhoe": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String INVALID_PHOTO \u003d \"@dummy.png\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private static final String VALID_PHOTO \u003d BENSON.getPhoto().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_PHOTO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_PHOTO);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_PHOTO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_PHOTO);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void toModelType_invalidPhoto_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_TAGS, INVALID_PHOTO);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String expectedMessage \u003d Photo.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public void toModelType_nullPhoto_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "                                                         VALID_TAGS, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Photo.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 31,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        JsonPerformanceStorage eventStorage \u003d new JsonPerformanceStorage(getTempFilePath(\"el\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        JsonAttendanceStorage attendanceStorage \u003d new JsonAttendanceStorage(getTempFilePath(\"att\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, eventStorage, attendanceStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 2,
      "jeunhoe": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AthletickDateBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.date.AthletickDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A utility class to help with building AthletickDate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class AthletickDateBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_DAY \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_MONTH \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_YEAR \u003d 2019;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final int DEFAULT_TYPE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String DEFAULT_MTH \u003d \"January\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String mth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        day \u003d DEFAULT_DAY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d DEFAULT_MONTH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d DEFAULT_YEAR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        mth \u003d DEFAULT_MTH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code day} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withDay(int day) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code month} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withMonth(int month) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code year} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withYear(int year) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code type} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withType(int type) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code mth} of the {@code AthletickDateBuilder} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDateBuilder withMth(String mth) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.mth \u003d mth;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public AthletickDate build() throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new AthletickDate(day, month, year, type, mth);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Comparators.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.person.PersonComparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class containing comparators used for sorting the list of Persons to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Comparators {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static final PersonComparator NAME_COMPARATOR \u003d new PersonComparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Sets the {@code Photo} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public EditPersonDescriptorBuilder withPhoto(String photo) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        descriptor.setPhoto(new Photo(photo));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FeatureBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import seedu.address.model.feature.Feature;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A utility class to help with building Feature objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class FeatureBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"calendar\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public FeatureBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Sets the {@code name} of the {@code FeatureBuilder} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public FeatureBuilder withName(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Feature build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new Feature(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final String DEFAULT_PHOTO \u003d \"default.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    private Photo photo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d new Photo(DEFAULT_PHOTO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        photo \u003d personToCopy.getPhoto();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     * Sets the {@code Photo} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public PersonBuilder withPhoto(String photo) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        this.photo \u003d new Photo(photo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new Person(name, phone, email, address, tags, photo);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 14,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPerformance.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "import seedu.address.model.performance.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellodommy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "public class TypicalPerformance {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Event EVENT_ONE \u003d new Event(\"freestyle 50m\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static final Event EVENT_TWO \u003d new Event(\"backstroke 100m\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    private TypicalPerformance() {} // prevents instantiation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     * Returns an {@code Performance} with all the typical events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static Performance getTypicalPerformance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        Performance performance \u003d new Performance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            performance.addEvent(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellodommy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EVENT_ONE, EVENT_TWO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellodommy": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTO_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTO_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellodommy"
        },
        "content": "            .withTags(\"colleagues\").withPhoto(\"alice.png\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withPhoto(\"carl.png\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withPhoto(\"daniel.png\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withPhoto(\"default.png\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withPhoto(VALID_PHOTO_AMY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "            .withPhoto(VALID_PHOTO_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 15,
      "hellodommy": 1,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTraining.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " * A sample class of a Hashmap consisting of players and their attendance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "public class TypicalTraining {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public static final HashMap\u003cPerson, Boolean\u003e TRAINING \u003d new HashMap\u003cPerson, Boolean\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public TypicalTraining() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(ALICE, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(BENSON, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(CARL, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(ELLE, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(GEORGE, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(FIONA, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        TRAINING.put(DANIEL, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    public HashMap\u003cPerson, Boolean\u003e getTraining() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "        return new HashMap\u003cPerson, Boolean\u003e(TRAINING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangUo79"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangUo79": 37
    }
  }
]
