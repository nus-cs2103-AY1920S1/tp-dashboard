[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d AddMin+  -   All in One Admin App"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T11-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-T11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d AddMin+   -  All in One Administration App"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*AddMin+* is an all in one administration desktop application, that is specially designed for any other events management"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "start-up company with limited manpower and resources. These companies would usually only be able to afford to hire"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "one admin staff to handle both the management of events and employees and this can be tough."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The Admin+ Team understands the struggles that start-ups faces on a daily basis, and we are here to help!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*AddMin+* is specially designed to ease the workload of the admin and allow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "him/her to effectively handle the administrative tasks of the company by providing the following functions: event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "creation and deletion, editing of event details after creation, manual and automatic manpower allocation for events"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "and providing an overview of all the data via statistics. The purpose of this user guide is show the user how they can"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "use our app to carry out their administrative tasks efficiently and also answer any questions they may have while using"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "our app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* AddMin+ is specially designed to help ease the workload by offering a one-stop platform to help deal with the various administrative needs of the company."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* AddMin+ uses a Command Line Interface(CLI) and displays the results through a Graphical User Interface(GUI) to assist the employee in their specific needs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Original source of the code i.e. AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 3,
      "DivineDX": 1,
      "-": 26,
      "shihaoyap": 14
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 1,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "AddMin+ was developed by the https://github.com/AY1920S1-CS2103T-T11-3[DESCC] team based on the AddressBook - Level 3 developed by the se-edu team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d Chia De Xun"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::divinedx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "{empty}[https://github.com/DivineDX[github]] [\u003c\u003cdivinedx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Project Responsibilities: In charge of defining, assigning, and tracking project tasks and responsible for overall project coordination +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Code Responsibilities: Event Management"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d Yap Shi Hao"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::shihaoyap.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "{empty}[https://github.com/shihaoyap[github]] [\u003c\u003cshihaoyap#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Project Responsibilities: Responsible for documentation quality and ensure project deliverables are done on time and in the right format. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Code Responsibilities: Schedule Management"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d Eshwar Kamalapathy"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::eshwarkp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "{empty}[https://github.com/eshwarkp[github]] [\u003c\u003ceshwarkp#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Responsibilities: Ensures and implement rigorous testing of project features and code +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Code Responsibilities: Statistics Generator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d Calvin Chen Xingzhu"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::calvincxz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "{empty}[https://github.com/calvincxz[github]] [\u003c\u003ccalvincxz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Responsibilities: Ensures code quality and standards +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Code Responsibilities: Employee-Event Manpower Allocation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d Gu Chunzhi"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::crisgu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "{empty}[https://github.com/Crisgu[github]] [\u003c\u003ccrisgue#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Responsibilities: In charge of versioning of the code, maintaining the code repository and integration of software. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Code Responsibilities: Finance Management"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 11,
      "DivineDX": 15,
      "-": 30,
      "shihaoyap": 5
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Email us* : You can also reach us at `adminplus [at] gmail.com` or  `e0309595@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 4,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003d AddMin+ - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "By: `CS2103T-T11-3`      Since: `AUG 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "This Developer Guide specifies the software architecture, design, and major implementation features of our Desktop Application, AddMin+."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Intended Audience"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "The intended audience of this Developer Guide is for fellow developers looking to contribute to this open-source project and the graders of the CS2103T module."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Software Description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "AddMin+ is an all in one administration desktop application, specifically for use by small companies with limited administrative staff and would benefit from automating their menial administrative tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "The application primarily uses a Command Line Interface (CLI) and displays the results through a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Using this Developer Guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*LightBulbs* indicate a _Tip_, something that is helpful to the reader"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*\u0027i\u0027 Icon* indicate a _Note_ that supplements useful information"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Text in a link:[`blue font and grey`] background indicates a _hyperlink_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Text with a `grey background` indicates _Code Logic_ such as class objects, OOP definitions or user-input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Architecture Diagram_"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Class Diagram of the Logic Component_"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Component interactions for `delete 1` command_"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Structure of the UI Component_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "There is also a `ScheduleBox` that is one of the tabs in the TabPane of `MainWindow`, the `ScheduleBox` which inherits from the abstract class `Tabs`. The abstract class `Tabs` also inherits from the abstract class `UiPart`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Structure of the Logic Component_"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".  `Logic` uses the `AddMinParser` class to parse the user command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an employee or event)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as adding events and allocating manpower."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Interactions Inside the Logic Component for the `delete 1` Command_"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Structure of the Model Component_"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* stores the Employee Book and Event Book data."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cEmployee\u003e` and an unmodifiable `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "As a more OOP model, we can store a `Tag` list in both `Employee Book` and `Event Book`, which `Employee` can reference. This would allow our application to only require one `Tag` object per unique `Tag`, instead of each `Employee` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Structure of the Storage Component_"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::StorageClassDiagram.png[width \u003d \"500\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* can save the App data in json format and read it back."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Classes used by multiple components are in the `seedu.addmin.commons` package."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "Given below is an example usage scenario and how the statistics mechanism behaves at each step."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Step 1. The user launches the application for the first time and generates statistics via the `statistics /g` command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "Step 2. Statistics are generated on-demand and displayed to the user based on the current data."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How statistics executes"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* **Alternative 1 (current choice):** Generate statistics data on-demand, when the user requests."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Pros: Easier to implement as would not have to mannage storage of statistical data."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Cons: App may have overall lower performance, with the possibility of lag as the app needs to read"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "through all the stored data and generate the statistics data whenever it is queried."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* **Alternative 2:** Generate statistics each time there is change in the data and store them."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Pros: Statistical data will be displayed faster as it is recalculated and stored in the JSON file storage."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Cons: Requires managing the storage of the statistical data and possibly lead to lowered performance of other features such as the command which does CRUD to Employees/Events which will be slower with the need to generate the statistical data and store it in the JSON file storage."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "// tag::calvin[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d Automated allocation of Employees to Events feature"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The `AutoAllocateCommand` has an auto-allocation mechanism which is facilitated by methods in `Event`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The `AutoAllocateCommand` takes in three arguments:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "1.  `eventIndex` - index of event in the displayed event list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "2. `ManpowerCountToAdd` - number of employees to allocate [optional]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "3. `tagList` - a set of tags to filter the employees [optional]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Additionally, the `AutoAllocateCommand` uses the following operations:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `Event#isAvailableForEvent()` -- Checks if an employee is available for the event."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `AutoAllocateCommand#createAvailableEmployeeListForEvent()` -- Creates a list of employees available for the event,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "filtered by the tags specified by user."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `AutoAllocateCommand#getManpowerNeededByEvent()` -- Calculates the number of employees currently required"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "by the event."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `AutoAllocateCommand#createEventAfterManpowerAllocation()` -- Creates a new event with a updated manpower list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Given below is an example usage scenario and how the auto allocation mechanism behaves at each step."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Program flow of the Auto Allocate Feature_"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::AutoAllocateFlowChart.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 1**. The user executes `allocate 1 n/2 t/female` with the intention to allocate 2 employees with tag [female]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "to the 1st event displayed in the event list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 2**. The command checks if `eventIndex` is valid and if `ManpowerCountToAdd` is specified."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "If `ManpowerCountToAdd` is not specified, it is assumed to be the maximum number possible for the event."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Validity of other command arguments e.g. if `ManpowerCountToAdd` is a positive integer is checked"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "by `AutoAllocateCommandParser` and not within the command `AutoAllocateCommand`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 3**. The command calls its own method `AutoAllocateCommand#getManpowerNeededByEvent()` to get the number of employees"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "required by the specified event."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 4**. The command calls its own method `AutoAllocateCommand#createAvailableEmployeeListForEvent()` to create a"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "filtered list of employees based on the `tagList` and if employee satisfies `Event#isAvailableForEvent()`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 5**. The command checks if supply (number of employees in filtered list in step 4) exceeds"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "demand (number of employees required by event, generated in step 3)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "If demand exceeds supply, an exception will be thrown to the user. If the supply exeeds demand, employees will be randomly selected instead."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 6**. The command calls `Event#createEventAfterManpowerAllocation()` to create a new event with a updated"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "manpower list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "For storage purposes, only the `Employee#EmployeeId` is saved in the event\u0027s manpower list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "**Step 7**. Done."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The following sequence diagram shows how the auto allocation works:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Sequence Diagram of the AutoAllocate Command_"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::AutoAllocateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "NOTE: The lifeline for `AutoAllocateCommand` should end at the destroy marker (X) but due to a limitation of"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of employees associated with event after successful command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "[width\u003d\"100%\", options\u003d\"header\" cols\u003d\"3, 4, 4\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "|Feature      |Alternative 1 | Alternative 2"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "|Storage of employees associated with event after successful command"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "|Saves only the `Employee#EmployeeId` associated with the event."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Pros*: Easy to implement. Will use less memory."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Cons*: Future accesses require more time."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "I decided to proceed with this option because it creates less dependencies."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "|Saves all fields of `Employee` associated with the event."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Pros*: Easy retrieval in the future."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Cons*: Changes in `Employee` attributes have to be reflected in the event. This meant that `EditCommand` and"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "`DeleteCommand` for `Employee` have to be heavily modified."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "| How to update the changes in the manpower list of an event after allocation of employee."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "| Directly modifies the `EventManpowerAllocatedList` of the specified event"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Pros*: Easy to implement."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Cons*: May cause unwanted behaviours if testing is not done properly."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "| Create a new event with a newly created and updated manpower list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Pros*: Defensive programming."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*Cons*: Harder to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "I decided to proceed with this option because it complies with the Law of Demeter"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "which states that objects should not navigate internal structures of other objects."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "// end::calvin[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "// tag::test[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Setting Date \u0026 Time to Events"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "The `Event` object is constructed with a start date and an end date as class attributes, both of which are `EventDate` objects, which represents a single day by itself."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Our implementation of `Event` does not assume that the event will be occurring consecutively from the start to the end date, and requires the user to manually assign each specific date with the time period that the Event is in process."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "To achieve this functionality, there exists an `EventDayTime` object that encapsulates the period of the day."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "It has two class attributes - both of which are `LocalTime` objects to represent the start and end time."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Each Event contains an `EventDateTimeMap` object that maps an `EventDate` object to an `EventDayTime` object using a HashMap implementation."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "This mapping is added through the `EventAssignDate` command."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Given below is an example usage scenario of the program functionality when a user attempts to assign a Date \u0026 Time to an already existent Event."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ". The User executes the command `set_ev_dt 2 on/18/10/2019 time/0900-2000`, with the intention to assign the date of 18th October 2019, time period 9am-8pm to the second event currently displayed in the event list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ". The parser checks if input format is correct, and attempts to create `Index`, `EventDate` and `EventDayTime` objects from it"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ". The command checks if the index of the event stated exists on the displayed list, and if the stated date is within the start and end date of the Event. (Input Validation)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ". The command calls `Event#assignDateTime()` on the referenced Event object to add the EventDate-EventDayTime mapping into `EventDateTimeMap`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ". Storage is updated."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ". Done."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "If the command execution fails, a `ParseException` (from Step 2) or a `CommandException` (from Step 3) will be thrown, specifiying the reason of the error."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "The following activity diagram shows how the Setting of Date\u0026Time to Event work:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "._Activity Diagram of the SettingEventDate Command_"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "image::SettingEventDateActivityDiagram.png[SettingEvent,295,607]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of DateTimeMap"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* **Alternative 1 (current choice):** Stores the DateTimeMap in an array format that is saved in `eventbook.json`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "** Pros: Simplicity in implementation and easier reference as it is loaded and saved to the same JSON file."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "** Cons: Performance issues as it needs to update the entire event object although only one attribute is updated"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* **Alternative 2:** Store the DateTimeMap in a separate file e.g. `EventDateTimes.json` that will be referenced by EventBook during initialization."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "** Pros: Faster performance in saving and loading as it is kept separate from `eventbook.json` and hence will not"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "** Cons: Requires a new storage unit, along with all its supporting functions which will require alot of repeated code."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Instantiation of the `Event` object when the app is started will be more complicated as well due to the need to read from two separate files"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* **Decision:** Alternative 1"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "** Alternative 2 would make sense if our app is utilizing a DBMS and it would be a best practice to separate the information."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "However, as we are constrained with not utilizing a DBMS, Alternative 1 is a logically simpler and more efficent solution from a software engineering standpoint."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "// tag::generateschedule[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d Generate Schedule feature"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The Generate Schedule Feature is implemented to allow users to have an overview of view all dates that has an event and the"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "specific events for those dates listed. The feature is facilitated by a `DistinctDatesProcessor` and requires the use of a"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "new Object - `DistinctDate`, as well as an internal ObservableList - `distinctDatesList` found in the `ModelManager`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "It processes the entire list of Events in the `EventList` when the command is called. The `DistinctDateProcessor` will then"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "process through these events to create specific `DistinctDate` Objects which stores a list of events which occurs on the date"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "they are representing. These DistinctDate Objects are then used to be displayed on the GUI."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Additionally, The DistinctDateProcessor contains the following operations:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `generateDistinctDateList(Model model)` -- Returns a list of `DistinctDate` Objects. This operation utilises the generateDateList() and generateListOfEventForDate() operations."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `generateListOfEventForDate(LocalDate date, Model model)` -- Takes in a `LocalDate` object, and processes through the entire list of events, to find all events on that specific date, and return them as a list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `generateDateList(Model model)` -- Takes in the entire list of events, identify all the dates that has at least one event and returns it as a list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The following class diagrams shows how the `DistinctDate` class and utility `DistinctDateProcessor` class is implemented:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Class Diagram for DistinctDate_"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::DistinctDateClassDiagram.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Class Diagram for DistinctDateProcessor_"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::DistinctDateProcessorClassDiagram.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Given below is an example usage scenario and how the display schedule mechanism behaves at each step."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Program flow of the Generate Schedule Feature_"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::GenerateScheduleFlowChart.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**. The user launches the application for the first time."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**. The `distinctDatesList` will be initialized based on the initial event book state."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**. The user executes `add_ev n/Free Coffee ...` to add a new event into the Eventlist."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The distinctDatesList will not be updated, and will not contain the new event that is added."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Any command that alters the eventBook will not change the distinctDatesList. The distinctDatesList will continue to store the"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "original list until the User requires it by calling the \"generate_schedule\" command. Where the distinctDateList will be generated"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "again using the current EventList"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 4**. The user executes `generate_schedule` to see all the dates and the respective events on those dates."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 5**. The distinctDateList will be generated again based on the current list of events in the EventList and is displayed on a separate window."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 6**. The user now decides to close the app, the current state of the EventBook and EmployeeBook will be stored,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "however the DistinctDateList would not."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Note that the Display Schedule Feature does not load and store the DistinctDate Objects. It processes and generates the list when"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "it is called upon or when the application starts."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 5**. Done."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The following sequence diagram shows how the `generate_schedule` operation works:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Sequence Diagram for generate_schedule Command_"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::GenerateScheduleSequenceDiagram.png[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "NOTE: The lifeline for `GenerateScheduleCommand` ends at the destroy marker (X)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[width\u003d\"100%\", options\u003d\"header\" cols\u003d\"3, 4, 4\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Feature      |Alternative 1 | Alternative 2"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Data Structure to support Generate Schedule Command"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Generates and Processes the DistinctDate Object upon `generate_schedule` command. (Current choice)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Easy to implement and requires less Storage Capacity and storage infrastructure to support the entire feature."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: May have performance issues in terms of speed and time Complexity. The program will have to iterate through the entire list of events and create"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the corresponding `DistinctDate` objects, whenever `generate_schedule` command is called."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Decision: Alternative 1"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** Alternative 1 makes more logical sense and will be more efficient as compared to Alternative 2. Alternative 1 requires less intermediate processing and storage units to support the feature."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Processing is only done when it is needed. Looking at the use case of the `generate_schedule` command, it is likely to be used when the users have finalise all the events and details before generating"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the schedule."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Creates and Stores the DistinctDate object whenever a new event is added."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Do not have to create a new list of DistinctDate object every time it is called."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: May have performance issues in terms of storage and processing needed, requires new storage unit to store a new entity which is not as important"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "and frequently used. This implementation can cause speed and time complexity issues as well, whenever edits are made to the existing eventList - add_ev, delete_ev etc"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the program is required to process through all DistinctDate Object to make the necessary changes. If the user does not even want to call the `generate_schedule` command"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "after the changes, then this process is actually unnecessary."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "| UI Decisions for Generate Schedule Command"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "| Display Directly on the Schedule Tab, update the list when `generate_schedule` command is called"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Users are able to view the generated schedule directly from the application\u0027s schedule tab, without the need of another window."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: May cause confusion, as the list being displayed might be outdated, if user forgets to call the `generate_schedule` command after altering the events."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "| Display on a separate window, generates and display the list on the new window when `generate_schedule` command is called. (Current choice)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Allows for better user experience, since the generated list is only displayed when the user needs it. Ensures that the list being"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "displayed is always updated as of when the user needs it, since the window is only produced when `generate_schedule` command is called."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: Harder to implement, requires additional JavaFx windows and implementations. Will require additional windows being opened."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Decision: Alternative 2"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** Alternative 2 is a cleaner and more user friendly approach compared to Alternative 1. Alternative 2 helps to prevent the Schedule Tab from being filled with too many list and information."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Alternative 2 also helps prevent user confusion, as the list that is displayed is always updated as of when it is called upon."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "// end::generateschedule[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "_WIP_"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "_WIP_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Has a need to help Administrative staff to manage events and employees."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Prefer desktop apps over other types."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Can type fast."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Prefers typing over mouse input."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Is reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* Someone who prefers a clean interface and dislike clutter."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*Value proposition*: Manage events and employees easier than enterprise apps commonly used such as Microsoft Excel and Microsoft Word."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Provides a clean and modern desktop application designed specifically to cater to their specific needs while improving user experience and efficiency."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |HR Admin |automate my manpower allocation process | improve work productivity"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|`* * *` |HR Admin |view upcoming events and schedule of these events | remind the company staff to attend"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |HR Director |view the number of events | decide whether to have more or less of events"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |HR Personnel |keep track of all the worker\u0027s details | access the worker’s personal details whenever I need it"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |Finance Staff |keep track of all the worker\u0027s details | ensure proper financial accounting for the company"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |Accountant |see the payslip of all employees| easily track expenses related to employee wages"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |Accountant |access the employee\u0027s personal details |keep track of all the worker\u0027s details"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |Employee of a Company |able to see payslip| for documenting purposes"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |Admin Staff |be able to track the employee\u0027s paid and medical leave| ensure the workers are not abusing the leave system"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* * *` |Admin Staff |view my company\u0027s available manpower| decide on the manpower allocation"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* *` |Employee |view upcoming events | record them on my calendar"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|`* *` |Admin Staff|see all events on a specific date | plan on the logistics needed ahead of time"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "|`* *` |Manager|tag my employees with comments/remarks | have better manpower allocation for events"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "(For all use cases below, the *System* is the `AddMin+` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003d\u003d\u003d Use case: Delete employee"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "1.  User requests to list employees"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "2.  AddMin+ shows a list of employees"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "3.  User requests to delete a specific employee by stating the index of the current displayed list."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "4.  AddMin+ deletes the employee"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* 3a. The given input index is invalid."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "** 3a1. AddMin+ shows an error message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Event in Event List"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "1.  User requests to view the company’s current list of events."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "2.  AddMin+ shows a list of events, with each event tagged to an index of the current displayed list."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "3.  User specifies the index of the event, and list the details of the event to edit"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "4.  AddMin+ edits and saves the updated event details."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* 3a. Input Index given is invalid."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "** 3a1.AddMin+ shows an error message and refuses the edit."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "* 3b. No details to edit were specified, or is of the wrong input format"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "** 3b1. AddMin+ displays an error message warning the user that no details were edited."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003d\u003d\u003d Use case: Allocate Manpower to Event manually"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "1.  User requests to view the company’s current list of employees and events."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "2.  AddMin+ shows the list of employees and events."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "3.  User states an Employee_ID that is matched to an Event_ID"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "4.  Employee allocated to Event."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "* 2.The Employee_ID/Event_ID is invalid."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "** 2a.Addmin+ shows an error message."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d Use case: View Schedule on a specific date"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "1.  User requests to list events"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "2.  EventBook shows a list of events"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "3.  User requests see schedule on a specific date"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "4.  AddMin+ display a list of events that is on that date"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* 3.The date format given is invalid."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "** 3a.AddMin+ shows an error message."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003d\u003d\u003d Use case: Fetch Events"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "1.  User requests to fetch an Event by specifying an Event_ID"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "2.  AddMin+ displays the matching result"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "* 2.The given event ID is invalid or nonexistent."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "** 2a.Addmin+ shows an error message."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".  Should be able to hold up to 1000 employees and events without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".  Program should run smoothly and without bugs"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".  Should be able to work independent of a remote server, database, and internet connection"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003d\u003d\u003d Deleting an employee"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ". Deleting an employee while all employees are listed"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".. Prerequisites: List all employees using the `list_em` command. Multiple employees in the list."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".. Test case: `delete_em 1` +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "   Expected: Employee of ID \u00271\u0027 is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".. Test case: `delete_em 0` +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "   Expected: No employee is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Crisgu": 99,
      "eshwarkp": 20,
      "calvincxz": 79,
      "DivineDX": 89,
      "-": 331,
      "shihaoyap": 118
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d AddMin+ - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "By: `CS2103T-T11-3`      Since: `AUG 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*AddMin+* is an all in one administration desktop application, that is specially designed for any other events management"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "start-up company with limited manpower and resources. These companies would usually only be able to afford to hire"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "one admin staff to handle both the management of events and employees and this can be tough."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The Admin+ Team understands the struggles that start-ups faces on a daily basis, and we are here to help!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*AddMin+* is specially designed to ease the workload of the admin and allow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "him/her to effectively handle the administrative tasks of the company by providing the following functions: event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "creation and deletion, editing of event details after creation, manual and automatic manpower allocation for events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "and providing an overview of all the data via statistics. The purpose of this user guide is show the user how they can"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "use our app to carry out their administrative tasks efficiently and also answer any questions they may have while using"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "our app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".  Download the latest `AddMin+.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for AddMin+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".  Click on the specific function you want, Finance, Manpower or Event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* **`add`**`n/John Doe no/98765432 p/Event Coordinator e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Employee List."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* **`delete`**`3` : deletes the 3rd Employee shown in the current list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The features of AddMin+ can be grouped into 4 main categories, Finance, Manpower, Event, and General. The commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "that AddMin+ recognize follows a specific format, however, each category will have their own set of valid commands."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "For new users, do refer to Section 3.1 till Section 3.4 for the specific command and how to use them. For more advanced"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "users, you could refer to \u003c\u003cCommand Summary\u003e\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* Previous commands can be accessed by using the *up-arrow keys*."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Opens a help guide, a list of all commands for the user as a reference to."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `exit`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Exits and shuts down the program"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Entity Management"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AddMin+ contains two main entities - Employees and Events with similar commands, especially in Create, Read, Update and Delete (CRUD) operations."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d List : `list | list_em | list_ev`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Employee: Shows the list of all employees on the company’s roster. Full details are truncated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Event: Shows the list of all events on the company’s calendar. Full details are truncated."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Both Employee and Event: `list`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Employee Format: `list_em`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Event Format: `list_ev`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Adding: `add_em | add_ev`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Employee: Adds an employee to the employee list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Event: Adds an event that the company is organizing or hosting to the company’s calendar."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Employee Format: `add_em n/NAME g/GENDER p/POSITION no/PHONE e/EMAIL a/ADDRESS on/Join Date [t/TAG]...`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Event Format: `add_ev n/NAME at/VENUE m/MANPOWER NEEDED on/START DATEtill/END DATE[t/TAG]...`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "A employee can have any number of tags (including 0)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Add Employee Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `add_em n/John Doe g/Male p/Manager no/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 on/12/12/2012 t/friends t/owesMoney`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `add_em n/Betsy Crowe g/Female p/CFO no/91909111 e/betsycrowe@example.com a/Newgate Prison on/10/12/2019 t/criminal`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Add Event Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `add_ev n/Free Coffee at/Utown Starbucks m/5 on/16/03/2019 till/17/03/2019 t/fun t/free`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `add_ev n/NUS RUN at/NUS Sports Hall m/5 on/19/10/2019 till/20/10/2019 t/running t/sports`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Editing details : `edit_em | edit_ev`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Employee: Edit an existing employee in the employee list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Event: Edits an existing event in the event list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Employee Format: `edit_em INDEX (must be a positive integer) [n/NAME] [g/GENDER] [p/POSITION] [no/PHONE] [e/EMAIL] [a/ADDRESS] [on/JOINDATE] [t/TAG]...`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Event Format Format: `edit_ev INDEX (must be a positive integer) [n/EVENT NAME] [at/VENUE] [m/MANPOWER NEEDED] [on/START DATE] [till/END DATE] [t/TAG]...`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* Edits the entity at the specified `INDEX`. The index refers to the index number shown in the displayed entity list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* When editing tags, the existing tags of the entity will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* You can remove all the entity\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Employee Edit Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `edit_em 1 no/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Edits the employeePhone number and employeeEmail address of the 1st employee to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `edit_em 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Edits the name of the 2nd employee to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Event Edit Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `edit_ev 1 on/16092019` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Edits the start date of the 1st event to be on the 16th September, 2019."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `edit_ev 2 n/Concert t/` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Edits the name of the 2nd event to be `Concert` and clears all existing tags."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Find: `find_em | find_ev`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Find entities whose names contain any of the given keywords."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Employee Format: `find_em KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Event Format: `find_ev KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* Only the name of the entity is searched."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* Entities matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `find_em John` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `find_em Betsy Tim John` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Returns any entity having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an entity : `delete_em | delete_ev`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Deletes the entity from the employee roster/event calendar."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Employee Format: `delete_em INDEX`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Event Format: `delete_ev INDEX`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* Deletes the entity at the specified `INDEX`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "* The index refers to the index number shown in the displayed employee list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `list_em` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "`delete_em 2` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Deletes the 2nd employee in the displayed employee list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `find Music` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "`delete_ev 1` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Deletes the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Employee-Specific Management"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d Fetch Full Details of an Employee: `fetch_em`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Fetches an employee by displaying a pop-up window with full details of the employee."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `fetch_em EMPLOYEE_INDEX`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EMPLOYEE_INDEX` refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EMPLOYEE_INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `fetch_em 2` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Returns the 2rd employee from the event list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "//tag::calvin[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Event-Specific Management"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d Fetch Full Details of an Event: `fetch_ev`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Fetches an event by displaying a pop-up window with full details of the event."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "For GUI features, kindly refer to \u003c\u003cGUI Guide for event fetch and allocation commands\u003e\u003e."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `fetch_ev EVENT_INDEX`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "****"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_INDEX` refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `fetch_ev 2` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Returns the 2rd event from the event list"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d Automated allocation of Employees to Events: `allocate`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Automatically chooses and allocates employees that meet the requirements to events."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "For GUI feature, kindly refer to \u003c\u003cGUI Guide for event fetch and allocation commands\u003e\u003e."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `allocate EVENT_INDEX [n/NUMBER] [t/TAG]...`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Fields in [] are optional."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Random selection of employee to allocate if supply exceeds demand of event."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* Allocates a `NUMBER` of employees to the event at the specified `EVENT_INDEX` filtered based on `TAG`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_INDEX` refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `NUMBER` refers to the number of employees to be allocated to the event."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* Both `EVENT_INDEX` and `NUMBER` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* If no `NUMBER` is specified, it is assumed to be the current manpower count required by the event."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `allocate 1` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Allocates available employees to the 1st event."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `allocate 2 n/3 t/female` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Allocates 3 employees who are tagged as \u0027female\u0027 to the 2nd event."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d Manually allocation of Employees to Events: `allocatem`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Manually chooses and allocates employees to events."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `allocatem EVENT_INDEX n/EMPLOYEE_INDEX`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* Allocates an employee with `EMPLOYEE_INDEX` to the event at the specified `EVENT_INDEX`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_INDEX` refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EMPLOYEE_INDEX` refers to the index number shown in the displayed employee list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* Both `EVENT_INDEX` and `EMPLOYEE_INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `allocatem 1 n/2` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Allocates the 2nd employee on the employee list to the 1st event on the event list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d De-allocation of all Employees from Event: `free`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Frees *ALL* employees allocated to the event."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `free EVENT_INDEX `"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_INDEX` refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `EVENT_INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `free 1` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Frees all employees allocated the 1st event on the event list."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "//end::calvin[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Setting a Date\u0026Time to an Event"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Sets a Date-Time mapping to an specific Event."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `set_ev_dt EVENT_INDEX on/EVENT_DATE time/EVENT_DAYTIME`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* The `EVENT_INDEX` refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_DATE` *must be of the format* DD/MM/YYYY"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* THE `EVENT_DATE` *must be within the Event\u0027s Start and End Date*"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* The `EVENT_DAYTIME` *must be of the format* HHMM-HHMM"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `set_ev_dt 2 on/18/10/2019 time/1000-2000` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Sets the 2nd Event from the Event List a time period of 10am-10pm on the date 18th October 2019."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "//tag::calvin2[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d\u003d\u003d GUI Guide for Event Fetch and Allocation Commands"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*For this guide, the relevant picture is shown after the instruction.*"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Step 1. For `fetch_ev`, simply *double-click the event* in the list as shown in the figure below:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::beforefetch.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Step 2: After successfully fetching the event, the following *Fetch Window* should show:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::afterfetch.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Step 3: To perform a `allocate` command without number/filter specification, click the *allocate* button"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "as shown in the *Fetch Window* in step 2. The two lists will be updated again as shown in the following figure:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::afterallocate.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Step 4: To perform a `free` command, click the *free* button as shown in the *Fetch Window* in step 2."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The two lists will be updated as shown in the following figure. Now, if you are interested to allocate a particular"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "employee to an event, continue to step 5."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::afterfree.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Step 5: To *allocate* a particular employee to an event, double-click the employee card on the left list. Notice the employee to allocate"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "has moved to the list on the right as shown in the figure below:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::afterallocatem.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Step 6: Finally, to *free* a particular employee to an event, double-click the employee card on the right"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "as shown in the figure above in step 5:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "If the GUI features are not working as intended, kindly use the command line interface to execute the command"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "instead."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "//end::calvin2[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Finance Management"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Employee Payslip: `pay [coming in v2.0]`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Generates the payslip for an employee for a stated time period"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Format: `pay n/EMPLOYEE_NUMBER f/DDMMYYY t/DDMMYYY`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* EMPLOYEE_NUMBER is the number of the employee on the displayed list. It must be a valid number."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* f/ and t/ represents \"from\" and \"to\", both DateTime periods."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* If the employee did not work during the time period stated, the payslip would not be generated."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* `list_em` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "`pay 2 f/20082019 t/20102019` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Generates the payslip of employee 2 from the 20th August - 20th October."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Event Contract: `contract [coming in v2.0]`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Generates a contract that can be handed to the company\u0027s client. The contract will contains details of the event such as the location, budget, and date"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Format: `contract n/EVENT_ID`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* EVENT_ID is a unique 3-digit number that acts as a serial key to identify events."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "****"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* `contract n/005` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Generates the contract for Event_ID 005."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "//tag::Schedule[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d Schedule"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Welcome to Schedule! Wondering how to display and see what events you have on a specific Date or Month, or do you"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "want to have an overview of all the dates where you have an event? Then you are at the right place!"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "To get things started, all Schedule-related commands occurs in the Schedule Tab as seen from the figure below! You could either"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "click on the Schedule Tab or just simply type in any Schedule-related commands and AddMin+ will bring you there."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._User Interface (UI) of the Schedule Feature_"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiDetailed.png[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Display Schedule for a specific date"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Lets say you want to check if you have any events on a specific date. Instead of looking through the list of events you have, you"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "could simply use the `display_schedule_date` command to do it!"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Format: `display_schedule_date on/dd/MM/yyyy`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "`display_schedule_date on/02/12/2019`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* on/ represents the date in dd/MM/yyyy that the user wants to display"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**To display schedule for a specific date (20/11/2019):**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**.  Either type `display_schedule_date on/20/11/2019` into the command box or click on the specific date from the date picker."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiStep1.png[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**.  The result box will display a message which inform you how many events are being listed. In this case the message displayed"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "is \"1 events listed!\""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiStep2.png[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**.  In the event list you will be able to see all the events that are on the specified date. In this case the only event that is on"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "20/11/2019 is \"Talk by DEF Company\"."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiStep3.png[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The event list will be empty and not display anything if there is no event on the specified date."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Display Schedule for a specific Month and Year"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Now if you would want to see all the events you have on a specific month and year. Instead of looking through the list of events you have, you"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "could simply use the `display_schedule` command to do it!"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Format: `display_schedule for/MM/yyyy`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* for/ represents the month and year in MM/yyyy that the user wants to display"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**To display schedule for a specific Month and Year (11/2019):**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**.  Either type `display_schedule for/11/2019` into the command box or click on the month year picker buttons to"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "navigate to the specific month and year."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiMonthStep1.png[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**.  The result box will display a message which inform you how many events are being listed. In this case the message displayed"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "is \"2 events listed!\""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiMonthStep2.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**.  In the event list you will be able to see all the events that are on the specified month, year. In this case there is 2 event"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "that is on 11/2019 which is \"Talk by DEF Company\" and \"Birthday Party\"."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiMonthStep3.png[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The event list will be empty and not display anything if there is no event on the specified month, year."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Entire Schedule"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Want to have an overview of all the dates that has an event? Use the `generate_schedule` command to do so. The `generate_schedule` command"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "looks through the entire list of events and generates a new list of all the dates which has an event and also display all the events that happens"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "on that date."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Format: `generate_schedule`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The `generate_schedule` command opens a new window to display the new list of information."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**To display the entire schedule:**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**.  Either type `generate_schedule` into the command box or click on the generate schedule button to display the entire schedule."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiGenerateStep1.png[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**.  The result box will display the message \"Schedule Generated\"."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiGenerateStep2.png[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**.  A new window will open, displaying all the dates and events that is happening on those specific dates."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiGenerateStep3.png[]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The generated list will be empty and not display anything if there is no event in the current event list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "//end::Schedule[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Statistics: `stats_g [coming in v2.0]`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Displays a set of statistics, Number of events, Number of employee etc"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "Format: `stats_g`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Clears all entries from the address book and event book."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "AddMin+ data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Search* : `search`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* *List Both Employees and Event* : `list`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *List Employees* : `list_em`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *List Events* : `list_ev`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Add Employee*: `add n/NAME no/PHONE_NUMBER p/POSITION e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `add n/John Doe no/98765432 p/cleaner e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Add Event*: `add_ev n/Music Festival m/10 on/15092019 till/20092019 at/NUS t/Music` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `add_ev n/Charity Run m/4 on/15092019 till/15092019 at/NUS`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Edit Employee*: `edit_em INDEX n/NAME no/PHONE_NUMBER p/POSITION e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `edit_em 1 no/91234567 e/johndoe@example.com`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Edit Event*: `edit_ev INDEX n/EVENT_NAME m/MANPOWER_NEEDED on/DDMMYYYY till/DDMMYYYY at/LOCATION_NAME [t/TAG]...` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `edit_ev 2 n/Concert t/`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Find Employee*: `find_em KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `find_em John`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Find Event*: `find_ev KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `find_ev Music`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Delete Employee*: `delete_em EMPLOYEE_INDEX` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `delete_em 2`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Delete Event*: `delete_ev EVENT_INDEX` +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `delete_ev 1`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Fetch Employee*: `fetch_em EMPLOYEE_INDEX` +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `fetch_em 2`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Fetch Event*: `fetch_ev EVENT_INDEX` +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `fetch_ev 2`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Allocate Employees (Auto)*: `allocate EVENT_INDEX [t/TAGS]...` +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `allocate 1 n/2 t/female`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Allocate Employees (Manual)*: `allocate EVENT_INDEX [n/EMPLOYEE_INDEX]...` +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `allocatem 1 n/2 `"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Deallocate ALL Employees*: `free EVENT_INDEX` +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `free 2 `"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Set DateTime to Event*: `set_ev_dt EVENT_INDEX on/EVENT_DATE time/EVENT_DAYTIME` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `set_ev_dt 2 on/18/10/2019 time/1000-2000`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* *Generate Employee Payslip [coming in v2.0]*: `pay n/EMPLOYEE_NUMBER f/DDMMYYY t/DDMMYYY` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `pay 2 f/20082019 t/20102019`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* *Generate Event Contract [coming in v2.0]*: `contract n/EVENT_ID` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "e.g. `contract n/005`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *View Schedule for specific date*: `view_schedule on/DDMMYYYY` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `view_schedule on/02/12/2019`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Display Entire Schedule*: `display_schedule` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "e.g. `display_schedule`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* *Generate Statistics [coming in v2.0]*: `stats_g` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "e.g. `stats_g`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "eshwarkp": 2,
      "calvincxz": 157,
      "DivineDX": 174,
      "-": 111,
      "shihaoyap": 124
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteEmployee(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveEmployeeBook(employeeBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/AutoAllocateActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "if () then ([successful command])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    :Converts newly-added employees"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    to a list of unique EmployeeId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    :Creates new manpower list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    with updated EmployeeId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    :Creates a new event with the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    new manpower list to replace"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    the old event in the model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    :Future references to the employees"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    will be via the EmployeeId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 24
    }
  },
  {
    "path": "docs/diagrams/AutoAllocateFlowChart.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 1: User inputs command ;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 2: Ensure no syntax error;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "if () then ([No syntax error])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 3: Calculate manpower required by the event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 4: Create a list of available employees;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 5: Check if supply exceeds demand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "if () then ([supply \u003e\u003d demand])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 6: Allocate employees to the event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ":Step 7: Done;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "else ([supply \u003c demand])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "else ([Invalid event index])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 17
    }
  },
  {
    "path": "docs/diagrams/AutoAllocateSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "participant \":AutoAllocateCommandParser\" as AutoAllocateCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "participant \"a:AutoAllocateCommand\" as AutoAllocateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "participant \"event:Event\" as Event MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "[-\u003e LogicManager : execute()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(commandText)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AddressBookParser -\u003e AutoAllocateCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AutoAllocateCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "create AutoAllocateCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommandParser -\u003e AutoAllocateCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AutoAllocateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand --\u003e AutoAllocateCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AutoAllocateCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AutoAllocateCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "LogicManager -\u003e AutoAllocateCommand : execute()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AutoAllocateCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e AutoAllocateCommand : getManpowerNeededByEvent(event)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AutoAllocateCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e Event : getManpowerNeeded()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate Event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Event --\u003e AutoAllocateCommand :"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate Event"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e Event : getCurrentManpowerCount()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate Event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Event --\u003e AutoAllocateCommand :"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate Event"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand --\u003e AutoAllocateCommand : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AutoAllocateCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e AutoAllocateCommand : createAvailableEmployeeList(model, event)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AutoAllocateCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e Model : getFilteredEventList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Model --\u003e AutoAllocateCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e Model : getFilteredEmployeeList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Model --\u003e AutoAllocateCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e Event : isAvailableForEvent()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate Event"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Event --\u003e AutoAllocateCommand :"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate Event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand --\u003e AutoAllocateCommand : result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AutoAllocateCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -\u003e AutoAllocateCommand : createEventAfterManpowerAllocation()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "activate AutoAllocateCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand --\u003e AutoAllocateCommand : result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AutoAllocateCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate AutoAllocateCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "AutoAllocateCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "destroy AutoAllocateCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 92
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Class AddMinParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "LogicManager --\u003e\"1\" AddMinParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "AddMinParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/SettingEventDateActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ":Parser attempts to parse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "if () then ([Parse Successful])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    :Instantiate Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    :Check Objects for Violations;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    if() then ([No Errors])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    :Set EventDate-EventDayTime map"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    in EventDateTimeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    :Save in EventBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    else([Violation])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "else ([Input Format Errors])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 20
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "Interface EventBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "StorageManager o--\u003e EventBookStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "JsonSerializableAddressBookStorage .down.\u003e JsonSerializableEmployee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "JsonSerializableEmployee .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "JsonEventBookStorage .left.|\u003e EventBookStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "JsonEventBookStorage .down.\u003e JsonSerializableEventBookStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "JsonSerializableEventBookStorage .down.\u003e JsonSerializableEvent"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "JsonSerializableEvent .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 9,
      "-": 22
    }
  },
  {
    "path": "docs/team/calvincxz.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d Calvin Chen Xingzhu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d PROJECT: AddMin+"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "My team of 4 software engineering students and I were tasked with enhancing a basic command line interface desktop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "addressbook application for our Software Engineering project. We chose to morph it into an employee records management"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "cum communication system called AddMin+. This enhanced application enables office managers to file and recall employee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "data; manage employee work schedule and leave application;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "and email employees directly without opening an email application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "This is what our project looks like:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "._The graphical user interface for AddMin+._"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "image::beforefetch.png[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "My role was to design and write the codes for the fetch and allocate features. The following sections"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "illustrate these enhancements in more detail, as well as the relevant documentation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "I have added to the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Major enhancement*: added features to allow association of employees with events which includes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*automated/manual allocation of employees to event commands* and a *deallocate command*, as well as the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "viewing of changes the users made via the *fetch event* command. All related commands have *GUI features* implemented."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "** What it does: allows the user to check for availability of employees and allocate them to an event with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "certain filter requirements. The algorithm ensures that employees cannot be allocated to events with"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "conflicting time periods."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "** Justification: This feature improves the product significantly because a user can now allocate employees"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "to events, which is a key component for events management companies that our app is targeting."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "The GUI features further provide convenience for users."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "It required an in-depth analysis of design alternatives. The implementation too was challenging as it"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "required the knowledge of both `Event` and `Employee` classes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "* *Minor enhancement*: added command history to allow user to view previous commands using up/down"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "arrow keys."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*** Ensured integration of various components (e.g. storage, logic, model) during the morphing phase."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*** Updated GUI to show both employee and event list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalvin]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalvin2]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalvin]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003d\u003d PROJECT: DUKE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 49,
      "calvincxz": 45
    }
  },
  {
    "path": "docs/team/crisgu.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d Gu Chunzhi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 72
    }
  },
  {
    "path": "docs/team/divinedx.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d Chia De Xun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 72
    }
  },
  {
    "path": "docs/team/eshwarkp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d Eshwar Kamalapathy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 72
    }
  },
  {
    "path": "docs/team/shihaoyap.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d Yap Shi Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d PROJECT: AddMin+ - All in one administration desktop application"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d Overview on Project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "AddMin+ is student developed application for a school project (CS2103T). The project requires us to enhance a basic command line"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "interface desktop application which is the `AddressBook - Level 3` that was developed by the se-edu team. The"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "`AddressBook - Level 3` is a desktop address book application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d About AddMin+"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The AddMin+ Team is made up of 5 Computer science students from AY1920S1-CS2103T-T11-3. The team decided to morph and enhance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the capabilities of the original application into an All in one administration desktop application. The application is specially"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "designed for the use of any events management start-up company with limited manpower and resources."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "AddMin+ is specially designed to ease the workload of the admin staffs in these companies and allow him/her to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "effectively handle the administrative tasks of the company by providing the following functions: event creation and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "deletion, editing of event details after creation, manual and automatic manpower allocation for events and providing an"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "overview of all the data via statistics while keeping track of the companies schedule to ensure that no event is missed!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "This is what AddMin+ looks like:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._The graphical user interface for *AddMin+*_"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::AddMin+Ui.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "My role was to design and write codes for the entire `Schedule` section of the project. The following sections will illustrate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the enhancements in more detail, as well as provide relevant documentation that i have added to the user and developer guides"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "in relation to those enhancements."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Note the following symbols and formatting used in this documents:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*LightBulbs* indicate a _Tip_, something that is helpful to the reader"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*\u0027i\u0027 Icon* indicate a _Note_ that supplements useful information"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Text in a link:[`blue font and grey`] background indicates a _hyperlink_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Text with a `grey background` indicates _Code Logic_ such as class objects, OOP definitions or user-input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "This section will show a summary of all the features, enhancements, documentations, and other useful contributions that i have"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "contributed to the team project."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* *Major enhancement*: added and implemented the entire *Schedule* section of the project which includes major GUI implementations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "and 3 schedule related features."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** What it does: The *Schedule* section was implemented to allow users to have an easier way to view and identify"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the events that are going on a specific date, period. Thus, the `display_schedule_date` and `display_schedule` feature was implemented."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The enhancement was also done to improve the user experience, by providing a clean graphical representation of the user\u0027s specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "schedule, which could be seen from the *Schedule* tab and the window generated by the `generate_schedule` feature."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** Justification: This feature improves the product significantly because it allows users to have a convenient way to view their upcoming"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "event schedule and keep track of all the event dates. This feature will greatly increase the user experience of the application."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** Highlights: This enhancement requires the event objects extensively. The implementation of the *Schedule* features required an in-depth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "analysis of the application\u0027s storage architecture and modeling. The implementation of *Schedule* was also challenging as it required the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "implementation of an additional `DistinctDate` object for the `generate_schedule` feature."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* *Minor enhancement*: minor Graphic User Interface changes to improve the user experience of the application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** Helped morphed the Events class and storage units into AddMin+ (Pull requests"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/76[#76], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/79[#79],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/86[#86], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/87[#87])"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** In charged of Add and Edit event commands for AddMin+ (Pull requests"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/76[#76], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/79[#79])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** Assisted in refactoring process for person class to employee class and well as fixed test cases and checkstyle errors."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "(Pull requests https://github.com/AY1920S1-CS2103T-T11-3/main/pull/92[#92]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** In charged of keep track of deadlines, submissions and issue trackers."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** Updated the GUI card display and other GUI enhancements (Pull requests https://github.com/AY1920S1-CS2103T-T11-3/main/pull/143[#143])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** Wrote additional tests for existing features (Pull requests https://github.com/AY1920S1-CS2103T-T11-3/main/pull/139[#139])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: (Pull requests https://github.com/AY1920S1-CS2103T-T11-3/main/pull/127[#127],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/53[#53], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/54[#54],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/58[#58], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/60[#60],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " https://github.com/AY1920S1-CS2103T-T11-3/main/pull/143[#143])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Pull requests https://github.com/AY1920S1-CS2103T-T11-3/main/pull/66[#66],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/76[#76], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/78[#78],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/85[#85], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/83[#83],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/92[#92], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/99[#99],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/103[#103], https://github.com/AY1920S1-CS2103T-T11-3/main/pull/124[#124],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "https://github.com/AY1920S1-CS2103T-T11-3/main/pull/137[#137])"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|_The original AddressBook User Guide have been updated to document the new capabilities of AddMin+ functionality."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The following are excerpts from the AddMin+ User Guide, which will showcase the sections that i have contributed to. They"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "will showcase my ability to write documentation for end-users._"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d Schedule"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Welcome to Schedule! Wondering how to display and see what events you have on a specific Date or Month, or do you"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "want to have an overview of all the dates where you have an event? Then you are at the right place!"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "To get things started, all Schedule-related commands occurs in the Schedule Tab as seen from the figure below! You could either"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "click on the Schedule Tab or just simply type in any Schedule-related commands and AddMin+ will bring you there."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._User Interface (UI) of the Schedule Feature_"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiDetailed.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Display Schedule for a specific date"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Lets say you want to check if you have any events on a specific date. Instead of looking through the list of events you have, you"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "could simply use the `display_schedule_date` command to do it!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Format: `display_schedule_date on/dd/MM/yyyy`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "`display_schedule_date on/02/12/2019`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* on/ represents the date in dd/MM/yyyy that the user wants to display"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**To display schedule for a specific date (20/11/2019):**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**.  Either type `display_schedule_date on/20/11/2019` into the command box or click on the specific date from the date picker."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiStep1.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**.  The result box will display a message which inform you how many events are being listed. In this case the message displayed"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "is \"1 events listed!\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiStep2.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**.  In the event list you will be able to see all the events that are on the specified date. In this case the only event that is on"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "20/11/2019 is \"Talk by DEF Company\"."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiStep3.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The event list will be empty and not display anything if there is no event on the specified date."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Display Schedule for a specific Month and Year"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Now if you would want to see all the events you have on a specific month and year. Instead of looking through the list of events you have, you"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "could simply use the `display_schedule` command to do it!"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Format: `display_schedule for/MM/yyyy`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* for/ represents the month and year in MM/yyyy that the user wants to display"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**To display schedule for a specific Month and Year (11/2019):**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**.  Either type `display_schedule for/11/2019` into the command box or click on the month year picker buttons to"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "navigate to the specific month and year."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiMonthStep1.png[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**.  The result box will display a message which inform you how many events are being listed. In this case the message displayed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "is \"2 events listed!\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiMonthStep2.png[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**.  In the event list you will be able to see all the events that are on the specified month, year. In this case there is 2 event"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "that is on 11/2019 which is \"Talk by DEF Company\" and \"Birthday Party\"."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiMonthStep3.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The event list will be empty and not display anything if there is no event on the specified month, year."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Entire Schedule"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Want to have an overview of all the dates that has an event? Use the `generate_schedule` command to do so. The `generate_schedule` command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "looks through the entire list of events and generates a new list of all the dates which has an event and also display all the events that happens"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "on that date."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Format: `generate_schedule`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The `generate_schedule` command opens a new window to display the new list of information."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**To display the entire schedule:**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**.  Either type `generate_schedule` into the command box or click on the generate schedule button to display the entire schedule."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiGenerateStep1.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**.  The result box will display the message \"Schedule Generated\"."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiGenerateStep2.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**.  A new window will open, displaying all the dates and events that is happening on those specific dates."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::ScheduleUiGenerateStep3.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The generated list will be empty and not display anything if there is no event in the current event list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "include::../UserGuide.adoc[tag\u003dSchedule]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d Generate Schedule feature"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The Generate Schedule Feature is implemented to allow users to have an overview of view all dates that has an event and the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "specific events for those dates listed. The feature is facilitated by a `DistinctDatesProcessor` and requires the use of a"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "new Object - `DistinctDate`, as well as an internal ObservableList - `distinctDatesList` found in the `ModelManager`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "It processes the entire list of Events in the `EventList` when the command is called. The `DistinctDateProcessor` will then"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "process through these events to create specific `DistinctDate` Objects which stores a list of events which occurs on the date"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "they are representing. These DistinctDate Objects are then used to be displayed on the GUI."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Additionally, The DistinctDateProcessor contains the following operations:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `generateDistinctDateList(Model model)` -- Returns a list of `DistinctDate` Objects. This operation utilises the generateDateList() and generateListOfEventForDate() operations."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `generateListOfEventForDate(LocalDate date, Model model)` -- Takes in a `LocalDate` object, and processes through the entire list of events, to find all events on that specific date, and return them as a list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "* `generateDateList(Model model)` -- Takes in the entire list of events, identify all the dates that has at least one event and returns it as a list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The following class diagrams shows how the `DistinctDate` class and utility `DistinctDateProcessor` class is implemented:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Class Diagram for DistinctDate_"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::DistinctDateClassDiagram.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Class Diagram for DistinctDateProcessor_"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::DistinctDateProcessorClassDiagram.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Given below is an example usage scenario and how the display schedule mechanism behaves at each step."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Program flow of the Generate Schedule Feature_"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::GenerateScheduleFlowChart.png[align\u003d\"center\", width \u003d \"300\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 1**. The user launches the application for the first time."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 2**. The `distinctDatesList` will be initialized based on the initial event book state."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 3**. The user executes `add_ev n/Free Coffee ...` to add a new event into the Eventlist."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The distinctDatesList will not be updated, and will not contain the new event that is added."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Any command that alters the eventBook will not change the distinctDatesList. The distinctDatesList will continue to store the"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "original list until the User requires it by calling the \"generate_schedule\" command. Where the distinctDateList will be generated"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "again using the current EventList"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 4**. The user executes `generate_schedule` to see all the dates and the respective events on those dates."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 5**. The distinctDateList will be generated again based on the current list of events in the EventList and is displayed on a separate window."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 6**. The user now decides to close the app, the current state of the EventBook and EmployeeBook will be stored,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "however the DistinctDateList would not."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Note that the Display Schedule Feature does not load and store the DistinctDate Objects. It processes and generates the list when"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "it is called upon or when the application starts."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Step 5**. Done."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "The following sequence diagram shows how the `generate_schedule` operation works:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "._Sequence Diagram for generate_schedule Command_"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "image::GenerateScheduleSequenceDiagram.png[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "NOTE: The lifeline for `GenerateScheduleCommand` ends at the destroy marker (X)."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "[width\u003d\"100%\", options\u003d\"header\" cols\u003d\"3, 4, 4\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Feature      |Alternative 1 | Alternative 2"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Data Structure to support Generate Schedule Command"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Generates and Processes the DistinctDate Object upon `generate_schedule` command. (Current choice)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Easy to implement and requires less Storage Capacity and storage infrastructure to support the entire feature."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: May have performance issues in terms of speed and time Complexity. The program will have to iterate through the entire list of events and create"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the corresponding `DistinctDate` objects, whenever `generate_schedule` command is called."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Decision: Alternative 1"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** Alternative 1 makes more logical sense and will be more efficient as compared to Alternative 2. Alternative 1 requires less intermediate processing and storage units to support the feature."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Processing is only done when it is needed. Looking at the use case of the `generate_schedule` command, it is likely to be used when the users have finalise all the events and details before generating"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the schedule."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|Creates and Stores the DistinctDate object whenever a new event is added."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Do not have to create a new list of DistinctDate object every time it is called."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: May have performance issues in terms of storage and processing needed, requires new storage unit to store a new entity which is not as important"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "and frequently used. This implementation can cause speed and time complexity issues as well, whenever edits are made to the existing eventList - add_ev, delete_ev etc"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "the program is required to process through all DistinctDate Object to make the necessary changes. If the user does not even want to call the `generate_schedule` command"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "after the changes, then this process is actually unnecessary."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "| UI Decisions for Generate Schedule Command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "| Display Directly on the Schedule Tab, update the list when `generate_schedule` command is called"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Users are able to view the generated schedule directly from the application\u0027s schedule tab, without the need of another window."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: May cause confusion, as the list being displayed might be outdated, if user forgets to call the `generate_schedule` command after altering the events."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "| Display on a separate window, generates and display the list on the new window when `generate_schedule` command is called. (Current choice)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Pros*: Allows for better user experience, since the generated list is only displayed when the user needs it. Ensures that the list being"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "displayed is always updated as of when the user needs it, since the window is only produced when `generate_schedule` command is called."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "*Cons*: Harder to implement, requires additional JavaFx windows and implementations. Will require additional windows being opened."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "**Decision: Alternative 2"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "** Alternative 2 is a cleaner and more user friendly approach compared to Alternative 1. Alternative 2 helps to prevent the Schedule Tab from being filled with too many list and information."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "Alternative 2 also helps prevent user confusion, as the list that is displayed is always updated as of when it is called upon."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "---"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 41,
      "shihaoyap": 286
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `employeeAddress` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "The `employeeAddress` field in `Person` is actually an instance of the `seedu.employeeAddress.model.employee.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ". Safe delete the field `employeeAddress` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ". Remove the usages of `employeeAddress` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "For example, removing the `employeeAddress` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "You can find them by searching for instances of the word `employeeAddress` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "For example, there is a `$employeeAddress` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "image::$employeeAddress.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "private Label employeeAddress;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003cLabel fx:id\u003d\"employeePhone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeePhone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003cLabel fx:id\u003d\"employeeAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeeAddress\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "\u003cLabel fx:id\u003d\"employeeEmail\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeeEmail\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "While keeping the `employeeAddress` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "  \"employees\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    \"employeeName\": \"Person with invalid employeeName field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    \"employeePhone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    \"employeeEmail\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    \"employeeAddress\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "You can go through each individual `json` file and manually remove the `employeeAddress` field."
      }
    ],
    "authorContributionMap": {
      "Crisgu": 19,
      "-": 98
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "`seedu.employeeAddress.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".Using the `Search for target by employeeName` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    Person employeeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    Person editedEmployee \u003d createEditedPerson(employeeToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    if (!employeeToEdit.isSamePerson(editedEmployee) \u0026\u0026 model.hasPerson(editedEmployee)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    model.setPerson(employeeToEdit, editedEmployee);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    employees.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".. Save the employeeAddress book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ".. Add a new entity to the employeeAddress book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 10,
      "-": 248
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.storage.EventBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.storage.JsonEventBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBookStorage eventBookStorage \u003d new JsonEventBookStorage(userPrefs.getEventBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ModelManager initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Optional\u003cReadOnlyEventBook\u003e eventBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ReadOnlyEventBook initialEventData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            eventBookOptional \u003d storage.readEventBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (!eventBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample EventBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            initialEventData \u003d eventBookOptional.orElseGet(SampleDataUtil::getSampleEventBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty EventBook\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            initialEventData \u003d new EventBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EventBook\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            initialEventData \u003d new EventBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new ModelManager(initialData, initialEventData, userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 21,
      "DivineDX": 4,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_DATE_NOT_FOUND_IN_MAP \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"The Date [%s] is not found in the Date-Time Mapping of Event: [%s]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_UNAVAILABLE_MANPOWER \u003d \"Unavailable manpower due to event schedule overlap\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_MANPOWER_COUNT_EXCEEDED \u003d \"Manpower count to allocate \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"exceeds manpower needed by event!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_MANPOWER_COUNT \u003d \"Insufficient manpower count for event! \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"(either due to schedule overlap or lack of manpower)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_EVENT_FULL_MANPOWER \u003d \"Event has full manpower!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 6,
      "DivineDX": 3,
      "-": 11,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /** Returns an unmodifiable view of the full list of employees */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cEmployee\u003e getFullEmployeeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of employees */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /** Returns an unmodifiable view of the full list of events */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cEvent\u003e getFullEventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredScheduledEventList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /** Returns an unmodifiable view of the DistinctDateList */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cDistinctDate\u003e getEmployeeDistinctDateList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /** Returns an unmodifiable view of the DistinctDateList */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cDistinctDate\u003e getEventDistinctDateList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "calvincxz": 6,
      "DivineDX": 10,
      "-": 48,
      "shihaoyap": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            storage.saveEventBook(model.getEventBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getFullEmployeeList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return model.getFullListEmployees();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFullEventList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return model.getFullListEvents();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredScheduledEventList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return model.getFilteredScheduledEventList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cDistinctDate\u003e getEmployeeDistinctDateList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return model.getEmployeeDistinctDatesList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cDistinctDate\u003e getEventDistinctDateList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return model.getEventDistinctDatesList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "calvincxz": 7,
      "DivineDX": 16,
      "-": 77,
      "shihaoyap": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Integer fetch;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String uiInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.fetch \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.uiInfo \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult(String feedbackToUser, String inputType, String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.type \u003d inputType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.uiInfo \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.fetch \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult(String feedbackToUser, String inputType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.type \u003d inputType;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.uiInfo \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.fetch \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Uniquely called for Fetch Commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Integer fetch, String type) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.fetch \u003d fetch;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.uiInfo \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Integer getFetch() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return fetch;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public String getUiChange() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return uiInfo;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 17,
      "DivineDX": 9,
      "-": 69,
      "shihaoyap": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/allocate/AutoAllocateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.allocate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANPOWER_TO_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerAllocatedList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Allocates a number of people to an event either randomly or filtered by matching tags."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class AutoAllocateCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"allocate\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \": Allocates a specified number of available employees to an event.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Parameters: EVENT_INDEX \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"[\" + PREFIX_MANPOWER_TO_ADD + \"NUMBER_OF_EMPLOYEES_TO_ALLOCATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG FOR FILTER]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + PREFIX_EMPLOYEE_NUMBER + \"3 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + PREFIX_TAG + \"male\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_ALLOCATE_SUCCESS \u003d \"Allocated %2$d people to %1$s \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Integer manpowerCountToAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param eventIndex         of the event in the filtered event list to edit (must contain a positive Integer)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param manpowerCountToAdd for the event (must be a positive Integer)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param tagList            list of tags to filter the list of available employees"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public AutoAllocateCommand(Index eventIndex, Integer manpowerCountToAdd, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(eventIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert (eventIndex.getOneBased() \u003e 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (manpowerCountToAdd !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            assert manpowerCountToAdd \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.manpowerCountToAdd \u003d manpowerCountToAdd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates a list of employees who are available for the specified event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param model           the full list of employees"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param eventToAllocate the specified event to allocate employees"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private List\u003cEmployee\u003e createAvailableEmployeeListForEvent(Model model, Event eventToAllocate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e employeeList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e availableEmployeeList \u003d employeeList.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .filter(employee -\u003e eventToAllocate.isAvailableForEvent(employee, eventList))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .filter(employee -\u003e employee.getTags().containsAll(tagList))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return availableEmployeeList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Calculates the number of employees currently required by the specified event."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param eventToAllocate the specified event to allocate manpower to"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Integer getManpowerNeededByEvent(Event eventToAllocate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventToAllocate.getManpowerNeeded().value"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                - eventToAllocate.getCurrentManpowerCount();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (eventIndex.getOneBased() \u003e lastShownEventList.size()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToAllocate \u003d lastShownEventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer manpowerNeededByEvent \u003d getManpowerNeededByEvent(eventToAllocate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (manpowerCountToAdd \u003d\u003d null) { //if manpower count is not specified"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            this.manpowerCountToAdd \u003d manpowerNeededByEvent;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (manpowerNeededByEvent \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EVENT_FULL_MANPOWER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (manpowerCountToAdd \u003e manpowerNeededByEvent) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MANPOWER_COUNT_EXCEEDED);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e availableEmployeeList \u003d createAvailableEmployeeListForEvent(model, eventToAllocate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (availableEmployeeList.size() \u003c manpowerCountToAdd) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INSUFFICIENT_MANPOWER_COUNT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Collections.shuffle(availableEmployeeList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEventForAllocation \u003d createEventAfterManpowerAllocation(eventToAllocate,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                availableEmployeeList, manpowerCountToAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToAllocate, newEventForAllocation);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ALLOCATE_SUCCESS, eventToAllocate.getName().eventName,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                manpowerCountToAdd));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static Event createEventAfterManpowerAllocation(Event eventToEdit, List\u003cEmployee\u003e availableEmployeeList,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                                           Integer manpowerCountToAdd) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert availableEmployeeList !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert manpowerCountToAdd !\u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventName updatedEventName \u003d eventToEdit.getName();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventVenue updatedEventVenue \u003d eventToEdit.getVenue();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerNeeded updatedManpowerNeeded \u003d eventToEdit.getManpowerNeeded();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventDate updatedStartDate \u003d eventToEdit.getStartDate();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventDate updatedEndDate \u003d eventToEdit.getEndDate();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap eventDateTimeMap \u003d eventToEdit.getEventDateTimeMap();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployeeId\u003e updatedManpowerList \u003d eventToEdit.getManpowerAllocatedList().getManpowerList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d eventToEdit.getTags();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (int i \u003d 0; i \u003c manpowerCountToAdd; i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            Employee employeeToAdd \u003d availableEmployeeList.get(i);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            updatedManpowerList.add(employeeToAdd.getEmployeeId());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerAllocatedList updatedManpowerAllocatedList \u003d new EventManpowerAllocatedList(updatedManpowerList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new Event(updatedEventName, updatedEventVenue,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                updatedManpowerNeeded, updatedStartDate,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                updatedEndDate, updatedManpowerAllocatedList, eventDateTimeMap, updatedTags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!(other instanceof AutoAllocateCommand)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand e \u003d (AutoAllocateCommand) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventIndex.equals(e.eventIndex)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 (manpowerCountToAdd \u003d\u003d e.manpowerCountToAdd || manpowerCountToAdd.equals(e.manpowerCountToAdd))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 tagList.equals(e.tagList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 185,
      "DivineDX": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/allocate/DeallocateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.allocate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerAllocatedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Frees all employees associated with an event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class DeallocateCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \": Deallocate the employees identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_FREE_EVENT_SUCCESS \u003d \"Deallocate all Employees for: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final String employeeId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public DeallocateCommand(Index eventIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employeeId \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public DeallocateCommand(Index eventIndex, String employeeId) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employeeId \u003d employeeId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * A private method for manual allocation used primarily for GUI purposes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private CommandResult internalManualAllocateById(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.updateFilteredEmployeeList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToAllocate \u003d lastShownEventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Employee personToDelete \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .filter(x -\u003e x.getEmployeeId().id.equals(employeeId))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .findAny().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEventForAllocation \u003d createEditedEvent(eventToAllocate, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToAllocate, newEventForAllocation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FREE_EVENT_SUCCESS, personToDelete.getEmployeeName().fullName,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                newEventForAllocation.getName().eventName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (employeeId !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return internalManualAllocateById(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (eventIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToFree \u003d lastShownList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEvent \u003d createEditedEvent(eventToFree, null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToFree, newEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FREE_EVENT_SUCCESS, eventToFree.getName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * and a new {@code EventManpowerAllocatedList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, Employee employeeToDelete) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventName updatedEventName \u003d eventToEdit.getName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventVenue updatedEventVenue \u003d eventToEdit.getVenue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerNeeded updatedManpowerNeeded \u003d eventToEdit.getManpowerNeeded();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventDate updatedStartDate \u003d eventToEdit.getStartDate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventDate updatedEndDate \u003d eventToEdit.getEndDate();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerAllocatedList updatedManpowerAllocatedList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (employeeToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            updatedManpowerAllocatedList \u003d new EventManpowerAllocatedList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            List\u003cEmployeeId\u003e updatedManpowerList \u003d eventToEdit.getManpowerAllocatedList().getManpowerList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            updatedManpowerList.remove(employeeToDelete.getEmployeeId());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            updatedManpowerAllocatedList \u003d new EventManpowerAllocatedList(updatedManpowerList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap eventDateTimeMap \u003d eventToEdit.getEventDateTimeMap();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d eventToEdit.getTags();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new Event(updatedEventName, updatedEventVenue,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                updatedManpowerNeeded, updatedStartDate,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                updatedEndDate, updatedManpowerAllocatedList, eventDateTimeMap, updatedTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                || (other instanceof DeallocateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 eventIndex.equals(((DeallocateCommand) other).eventIndex)) // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 employeeId.equals(((DeallocateCommand) other).employeeId); // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 118,
      "DivineDX": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/allocate/ManualAllocateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.allocate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerAllocatedList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Allocates an employee from the  to an event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class ManualAllocateCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"allocatem\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Manually allocates an employee to an event.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Parameters: EVENT_INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"PERSON_INDEX (must be valid positive integers)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + PREFIX_EMPLOYEE_NUMBER + \"2 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_ALLOCATE_EVENT_SUCCESS \u003d \"Added Employee: %1$s to %2$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Index employeeIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final String employeeId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param eventIndex of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param employeeIndex      of the employee in the filtered employee list to add to event"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ManualAllocateCommand(Index eventIndex, Index employeeIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(employeeIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(eventIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employeeIndex \u003d employeeIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employeeId \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * A ManualAllocateCommand to allocate employee with specified {@code EmployeeId} to the specified event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * This constructor is used for GUI purposes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param eventIndex of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param employeeId      of the employee to add to the event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ManualAllocateCommand(Index eventIndex, String employeeId) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(employeeId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(eventIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employeeIndex \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employeeId \u003d employeeId;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * A private method for manual allocation used primarily for GUI purposes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private CommandResult internalManualAllocateById(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.updateFilteredEmployeeList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToAllocate \u003d lastShownEventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Employee personToAdd \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .filter(x -\u003e x.getEmployeeId().id.equals(employeeId))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .findAny().get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (eventToAllocate.getCurrentManpowerCount() \u003d\u003d eventToAllocate.getManpowerNeeded().value) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EVENT_FULL_MANPOWER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEventForAllocation \u003d createEditedEvent(eventToAllocate, personToAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToAllocate, newEventForAllocation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ALLOCATE_EVENT_SUCCESS, personToAdd.getEmployeeName(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                newEventForAllocation.getName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (employeeId !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return internalManualAllocateById(model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (employeeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (eventIndex.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Employee personToAdd \u003d lastShownList.get(employeeIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToAllocate \u003d lastShownEventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (eventToAllocate.getCurrentManpowerCount() \u003d\u003d eventToAllocate.getManpowerNeeded().value) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EVENT_FULL_MANPOWER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!eventToAllocate.isAvailableForEvent(personToAdd, model.getFilteredEventList())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNAVAILABLE_MANPOWER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEventForAllocation \u003d createEditedEvent(eventToAllocate, personToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToAllocate, newEventForAllocation);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ALLOCATE_EVENT_SUCCESS, personToAdd.getEmployeeName().fullName,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                newEventForAllocation.getName().eventName));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, Employee employeeToAdd) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventName updatedEventName \u003d eventToEdit.getName();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventVenue updatedEventVenue \u003d eventToEdit.getVenue();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerNeeded updatedManpowerNeeded \u003d eventToEdit.getManpowerNeeded();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventDate updatedStartDate \u003d eventToEdit.getStartDate();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventDate updatedEndDate \u003d eventToEdit.getEndDate();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap updatedDateTimeMap \u003d eventToEdit.getEventDateTimeMap();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployeeId\u003e updatedManpowerList \u003d eventToEdit.getManpowerAllocatedList().getManpowerList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d eventToEdit.getTags();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        updatedManpowerList.add(employeeToAdd.getEmployeeId());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerAllocatedList updatedManpowerAllocatedList \u003d new EventManpowerAllocatedList(updatedManpowerList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new Event(updatedEventName, updatedEventVenue,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                updatedManpowerNeeded, updatedStartDate,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                updatedEndDate, updatedManpowerAllocatedList, updatedDateTimeMap, updatedTags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!(other instanceof ManualAllocateCommand)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand e \u003d (ManualAllocateCommand) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return employeeIndex.equals(e.employeeIndex) \u0026\u0026 eventIndex.equals(e.eventIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 166,
      "DivineDX": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOIN_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Adds a employee to the AddMin+."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_em\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a employee to the AddMin+. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_POSITION + \"POSITION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_JOIN_DATE + \"Join Date \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_POSITION + \"Manager \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_JOIN_DATE + \"12/12/2012 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in the AddMin+\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final Employee toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Employee}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public AddCommand(Employee employee) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(employee);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        toAdd \u003d employee;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (model.hasEmployee(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        model.addEmployee(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 11,
      "DivineDX": 3,
      "-": 53,
      "shihaoyap": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Clears the both the address book and event book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Both address and event book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEventBook(new EventBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 4,
      "DivineDX": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Deletes a employee identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_em\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            + \": Deletes the employee identified by the index number used in the displayed employee list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Employee: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee employeeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        model.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.getFilteredEventList().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .forEach(x -\u003e x.getManpowerAllocatedList().removeEmployee(employeeToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, employeeToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 7,
      "calvincxz": 5,
      "DivineDX": 3,
      "-": 42,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOIN_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeGender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeJoinDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePosition;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Edits the details of an existing employee in the employeeAddress book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_em\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            + \"by the index number used in the displayed employee list. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_POSITION + \"POSITION] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_JOIN_DATE + \"JOINDATE] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Employee: %1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in the employeeAddress book.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final EditEmployeeDescriptor editEmployeeDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * @param index of the employee in the filtered employee list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * @param editEmployeeDescriptor details to edit the employee with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public EditCommand(Index index, EditEmployeeDescriptor editEmployeeDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(editEmployeeDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.editEmployeeDescriptor \u003d new EditEmployeeDescriptor(editEmployeeDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee employeeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedEmployee \u003d createEditedEmployee(employeeToEdit, editEmployeeDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!employeeToEdit.isSameEmployee(editedEmployee) \u0026\u0026 model.hasEmployee(editedEmployee)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        model.setEmployee(employeeToEdit, editedEmployee);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Creates and returns a {@code Employee} with the details of {@code employeeToEdit}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * edited with {@code editEmployeeDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static Employee createEditedEmployee(Employee employeeToEdit,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                                 EditEmployeeDescriptor editEmployeeDescriptor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assert employeeToEdit !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeName updatedEmployeeName \u003d editEmployeeDescriptor.getEmployeeName()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeeName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeePhone updatedEmployeePhone \u003d editEmployeeDescriptor.getEmployeePhone()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeePhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeEmail updatedEmployeeEmail \u003d editEmployeeDescriptor.getEmployeeEmail()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeeEmail());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeAddress updatedEmployeeAddress \u003d editEmployeeDescriptor.getEmployeeAddress()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeeAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEmployeeDescriptor.getTags()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getTags());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeId updatedEmployeeId \u003d editEmployeeDescriptor.getEmployeeId().orElse(employeeToEdit.getEmployeeId());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeePosition updatedEmployeePosition \u003d editEmployeeDescriptor.getEmployeePosition()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeePosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeGender updatedEmployeeGender \u003d editEmployeeDescriptor.getEmployeeGender()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeeGender());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeJoinDate updatedEmployeeJoinDate \u003d editEmployeeDescriptor.getEmployeeJoinDate()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(employeeToEdit.getEmployeeJoinDate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new Employee(updatedEmployeeId, updatedEmployeeName, updatedEmployeeGender, updatedEmployeePosition,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                 updatedEmployeePhone, updatedEmployeeEmail, updatedEmployeeAddress,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                updatedEmployeeJoinDate, updatedTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                \u0026\u0026 editEmployeeDescriptor.equals(e.editEmployeeDescriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Stores the details to edit the employee with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * corresponding field value of the employee."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static class EditEmployeeDescriptor {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeeName employeeName;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeePhone employeePhone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeeEmail employeeEmail;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeeAddress employeeAddress;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeeJoinDate employeeJoinDate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeePosition employeePosition;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private EmployeeGender employeeGender;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        private EmployeeId employeeId;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public EditEmployeeDescriptor() {}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public EditEmployeeDescriptor(EditEmployeeDescriptor toCopy) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeeName(toCopy.employeeName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeePhone(toCopy.employeePhone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeeEmail(toCopy.employeeEmail);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeeAddress(toCopy.employeeAddress);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setEmployeeId(toCopy.employeeId);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeeGender(toCopy.employeeGender);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeePosition(toCopy.employeePosition);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            setEmployeeJoinDate(toCopy.employeeJoinDate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(employeeName, employeePhone, employeeEmail, employeeAddress, tags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeeName(EmployeeName employeeName) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeeName \u003d employeeName;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeeName\u003e getEmployeeName() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeeName);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeePhone(EmployeePhone employeePhone) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeePhone \u003d employeePhone;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeePhone\u003e getEmployeePhone() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeePhone);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public void setEmployeeId(EmployeeId employeeId) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.employeeId \u003d employeeId;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeePosition(EmployeePosition employeePosition) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeePosition \u003d employeePosition;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeePosition\u003e getEmployeePosition() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeePosition);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeeGender(EmployeeGender employeeGender) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeeGender \u003d employeeGender;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeeGender\u003e getEmployeeGender() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeeGender);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeeJoinDate(EmployeeJoinDate employeeJoinDate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeeJoinDate \u003d employeeJoinDate;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeeJoinDate\u003e getEmployeeJoinDate() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeeJoinDate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public Optional\u003cEmployeeId\u003e getEmployeeId() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.ofNullable(employeeId);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeeEmail(EmployeeEmail employeeEmail) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeeEmail \u003d employeeEmail;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeeEmail\u003e getEmployeeEmail() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeeEmail);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public void setEmployeeAddress(EmployeeAddress employeeAddress) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employeeAddress \u003d employeeAddress;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        public Optional\u003cEmployeeAddress\u003e getEmployeeAddress() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return Optional.ofNullable(employeeAddress);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            if (!(other instanceof EditEmployeeDescriptor)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            EditEmployeeDescriptor e \u003d (EditEmployeeDescriptor) other;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return getEmployeeName().equals(e.getEmployeeName())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getEmployeePhone().equals(e.getEmployeePhone())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getEmployeeEmail().equals(e.getEmployeeEmail())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getEmployeeAddress().equals(e.getEmployeeAddress())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getEmployeePosition().equals(e.getEmployeePosition())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u0026\u0026 getEmployeeId().equals(e.getEmployeeId())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getEmployeeGender().equals(e.getEmployeeGender())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    \u0026\u0026 getEmployeeJoinDate().equals(e.getEmployeeJoinDate());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 98,
      "DivineDX": 3,
      "-": 149,
      "shihaoyap": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/FetchEmployeeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.processor.DistinctDatesProcessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Fetches all details of an Employee and the employee\u0027s schedule."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FetchEmployeeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fetch_em\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \": Fetches all details of an Employee and display his schedule\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" on/02/12/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fetched Employee: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FetchEmployeeCommand(Index index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEmployee\u003e shownEmployeeList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d shownEmployeeList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employeeToFetch \u003d shownEmployeeList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cDistinctDate\u003e distinctDates \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                DistinctDatesProcessor.generateEmployeesDistinctDateList(model, employeeToFetch);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        model.updateEmployeeDistinctDateList(distinctDates);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, employeeToFetch.getEmployeeName()), false,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                false, index.getZeroBased(), \"employee\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!(other instanceof FetchEmployeeCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        FetchEmployeeCommand e \u003d (FetchEmployeeCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_em\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        model.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredEmployeeList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "DivineDX": 3,
      "-": 37,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Lists all employees and events in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all employees and events\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 4,
      "DivineDX": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/employee/ListEmployeeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Lists all employees and events in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class ListEmployeeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_em\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all employees\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_MANPOWER_NEEDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Adds a employee to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_ev\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a event to the event book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_MANPOWER_NEEDED + \"MANPOWER NEEDED \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_START_DATE + \"START DATE\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_END_DATE + \"END DATE\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Free Coffee \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_VENUE + \"Utown Starbucks \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_MANPOWER_NEEDED + \"5 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_START_DATE + \"16/03/2019 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_END_DATE + \"17/03/2019 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_TAG + \"fun \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_TAG + \"free \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the event book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Employee}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "DivineDX": 4,
      "shihaoyap": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/AssignDateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventContainsKeyDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDayTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Assigns a Date-TimePeriod mapping to an Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class AssignDateCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set_ev_dt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \": Assigns a Date-TimePeriod mapping to an existing Event identified\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \" by the index number used in the displayed event list. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Parameters: INDEX on/EVENTDATE time/TIMEPERIOD \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 on/18/10/2019 time/0500-2000\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TARGET \u003d \"[%s:%s] has been successfully assigned to Event: [%s]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Dates [%s] to [%s] of Event: [%s] has been successfully assigned with Time: [%s]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static final String EVENT_DATE_INVALID \u003d \"Date provided is not within range of the current Event!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Optional\u003cEventDate\u003e targetEventDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDayTime eventDayTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param index of the event in the filtered event list to assign to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public AssignDateCommand(Index index, EventDate targetEventDate, EventDayTime eventDayTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.targetEventDate \u003d Optional.of(targetEventDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDayTime \u003d eventDayTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * AutoAssigns a mapping for the full range of dates that the Event is held"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public AssignDateCommand(Index index, EventDayTime eventDayTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.targetEventDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDayTime \u003d eventDayTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Event eventToAssign \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (targetEventDate.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            EventContainsKeyDatePredicate dateCheck \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    new EventContainsKeyDatePredicate(targetEventDate.get().getDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (!dateCheck.test(eventToAssign)) { //date provided is out of range of Event"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new CommandException(EVENT_DATE_INVALID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            eventToAssign.assignDateTime(targetEventDate.get(), eventDayTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_TARGET,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    targetEventDate.get(), eventDayTime, eventToAssign.getName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else { //Empty, assign for all dates"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            EventDate startDate \u003d eventToAssign.getStartDate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            EventDate endDate \u003d eventToAssign.getEndDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            startDate.datesUntil(endDate)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    .forEach(eventDate -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        eventToAssign.assignDateTime(eventDate, eventDayTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_ALL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    startDate, endDate, eventToAssign.getName(), eventDayTime));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!(other instanceof AssignDateCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        AssignDateCommand e \u003d (AssignDateCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/ClearDateMappingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deletes a event identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ClearDateMappingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear_ev_dt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \": Clears all Date-Time Mappings of an Event, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CLEAR_EVENT_DATE_MAPPING_SUCCESS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Cleared all Date-Time Mappings from Event: [%s]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ClearDateMappingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Event eventToClear \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        eventToClear.clearDateTimeMapping();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_EVENT_DATE_MAPPING_SUCCESS, eventToClear.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof ClearDateMappingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClearDateMappingCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/DeleteDateMappingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_NOT_FOUND_IN_MAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deletes a date from an Event DateTime mapping identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeleteDateMappingCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_ev_dt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \": Delete a single Date-Time Mappings of an Event, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) on/EVENTDATE \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 on/18/10/2019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CLEAR_EVENT_DATE_MAPPING_SUCCESS \u003d \"Deleted DateTime [%s] from Event: [%s]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDate targetDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeleteDateMappingCommand(Index targetIndex, EventDate targetDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Event targetEvent \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap eventDateTimeMap \u003d targetEvent.getEventDateTimeMap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (eventDateTimeMap.containsDateKey(targetDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            eventDateTimeMap.deleteDateKey(targetDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DATE_NOT_FOUND_IN_MAP, targetDate, targetEvent.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_EVENT_DATE_MAPPING_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                targetDate, targetEvent.getName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!(other instanceof DeleteDateMappingCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        DeleteDateMappingCommand e \u003d (DeleteDateMappingCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 targetDate.equals(e.targetDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/DeleteEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " * Deletes a event identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_ev\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 52,
      "DivineDX": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_MANPOWER_NEEDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerAllocatedList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Edits the details of an existing event in the event book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_ev\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_EVENT_NAME + \"EVENT NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_EVENT_VENUE + \"VENUE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_EVENT_MANPOWER_NEEDED + \"MANPOWER NEEDED] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_EVENT_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_EVENT_END_DATE + \"END DATE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Drawing Competition \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + PREFIX_EVENT_VENUE + \"Utown Student Plaza\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the event book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @param index of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventName updatedEventName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventVenue updatedEventVenue \u003d editEventDescriptor.getVenue().orElse(eventToEdit.getVenue());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventManpowerNeeded updatedManpowerNeeded \u003d editEventDescriptor.getManpowerNeeded()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .orElse(eventToEdit.getManpowerNeeded());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate updatedStartDate \u003d editEventDescriptor.getStartDate().orElse(eventToEdit.getStartDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate updatedEndDate \u003d editEventDescriptor.getEndDate().orElse(eventToEdit.getEndDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(eventToEdit.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (updatedStartDate !\u003d eventToEdit.getStartDate()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                || updatedEndDate !\u003d eventToEdit.getEndDate()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new Event(updatedEventName, updatedEventVenue,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    updatedManpowerNeeded, updatedStartDate,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    updatedEndDate, updatedTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            EventManpowerAllocatedList originalManpowerAllocatedList \u003d eventToEdit.getManpowerAllocatedList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            EventDateTimeMap originalDateTimeMap \u003d eventToEdit.getEventDateTimeMap();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new Event(updatedEventName, updatedEventVenue,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    updatedManpowerNeeded, updatedStartDate,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    updatedEndDate, originalManpowerAllocatedList, originalDateTimeMap, updatedTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        //Data Fields"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        private EventName name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        private EventVenue venue;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        private EventManpowerNeeded manpowerNeeded;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        private EventDate startDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        private EventDate endDate;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        private EventManpowerAllocatedList manpowerAllocatedList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public EditEventDescriptor() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setManpowerNeeded(toCopy.manpowerNeeded);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, venue, manpowerNeeded,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    startDate, endDate, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public void setName(EventName name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public Optional\u003cEventName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public void setVenue(EventVenue venue) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public Optional\u003cEventVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public void setManpowerNeeded(EventManpowerNeeded manpowerNeeded) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.manpowerNeeded \u003d manpowerNeeded;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public Optional\u003cEventManpowerNeeded\u003e getManpowerNeeded() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.ofNullable(manpowerNeeded);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void setStartDate(EventDate startDate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public Optional\u003cEventDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void setEndDate(EventDate endDate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public Optional\u003cEventDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u0026\u0026 getManpowerNeeded().equals(e.getManpowerNeeded())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 12,
      "DivineDX": 20,
      "shihaoyap": 229
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/FetchEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Fetches the details of an existing event in the event book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class FetchEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fetch_ev\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the details of the event identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"by the index number used in the displayed employee list \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fetched Event: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param index of the event in the filtered event list to fetch"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public FetchEventCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToFetch \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, eventToFetch.getName()), false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                false, index.getZeroBased(), \"event\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!(other instanceof FetchEventCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand e \u003d (FetchEventCommand) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 59,
      "DivineDX": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/FindEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Finds and lists all events in event list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FindEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_ev\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FindEventCommand(EventNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/ListEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Lists all events in the event book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_ev\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.updateFilteredScheduledEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 1,
      "DivineDX": 24,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting EmployeeAddress Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "DivineDX": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedule/DisplayScheduleForDateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventContainsKeyDatePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Finds and lists all events in event list whose Start Dates corresponds to the specified LocalDate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Keyword matching is case insensitive and in the following format dd/MM/yyyy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DisplayScheduleForDateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display_schedule_date\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose on the specific date\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" on/02/12/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventContainsKeyDatePredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DisplayScheduleForDateCommand(EventContainsKeyDatePredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.updateFilteredScheduledEventList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        model.getFilteredScheduledEventList().size()), \"Schedule\", predicate.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || (other instanceof DisplayScheduleForDateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 predicate.equals(((DisplayScheduleForDateCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 3,
      "shihaoyap": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedule/DisplayScheduleForYearMonthCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventContainsKeyYearMonthPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Finds and lists all events in event list whose start and end dates are within the specified Year and Month."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Keyword matching is case insensitive and in the following format MM/yyyy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DisplayScheduleForYearMonthCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display_schedule\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose on the specific month, year\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" for/12/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventContainsKeyYearMonthPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DisplayScheduleForYearMonthCommand(EventContainsKeyYearMonthPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        model.updateFilteredScheduledEventList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        model.getFilteredScheduledEventList().size()), \"Schedule\", predicate.getYearMonth());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || (other instanceof DisplayScheduleForYearMonthCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 predicate.equals(((DisplayScheduleForYearMonthCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedule/GenerateScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.processor.DistinctDatesProcessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Generates a new list of DistinctDate objects, which represented all the Dates in the current"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * schedule. Each Date will display all the events that is held on the corresponding date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class GenerateScheduleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generate_schedule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \": Generates a new list and displays all Dates and the events that corresponds to those dates\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Schedule Generated\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cDistinctDate\u003e distinctDates \u003d DistinctDatesProcessor.generateAllDistinctDateList(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        model.updateEventDistinctDatesList(distinctDates);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"Generate\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 5,
      "shihaoyap": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/StatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " * Displays statistics based on the data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays statistics based on application data.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    private static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Statistics command not implemented yet\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 21,
      "DivineDX": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.allocate.AutoAllocateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.allocate.DeallocateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.allocate.ManualAllocateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.FetchEmployeeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.employee.ListEmployeeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.AssignDateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.ClearDateMappingCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.DeleteDateMappingCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.DeleteEventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.EditEventCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.FetchEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.FindEventCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.ListEventCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForDateCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForYearMonthCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.GenerateScheduleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.allocate.AutoAllocateCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.allocate.DeallocateCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.allocate.ManualAllocateCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.employee.AddCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.employee.DeleteCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.employee.EditCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.employee.FetchEmployeeCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.employee.FindCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.AddEventCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.AssignDateCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.ClearDateMappingCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.DeleteDateMappingCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.DeleteEventCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.EditEventCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.FetchEventCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.event.FindEventCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.schedule.DisplayScheduleForDateParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.schedule.DisplayScheduleForYearMonthParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        case FetchEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new FetchEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case FetchEmployeeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new FetchEmployeeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        case DeallocateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new DeallocateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        case DisplayScheduleForDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return new DisplayScheduleForDateParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        case DisplayScheduleForYearMonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return new DisplayScheduleForYearMonthParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        case GenerateScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return new GenerateScheduleCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case FindEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new FindEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        case ListEmployeeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return new ListEmployeeCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        case ManualAllocateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new ManualAllocateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        case AutoAllocateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new AutoAllocateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            return new StatisticsCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case AssignDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new AssignDateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case DeleteDateMappingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new DeleteDateMappingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case ClearDateMappingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ClearDateMappingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 6,
      "calvincxz": 12,
      "DivineDX": 51,
      "-": 67,
      "shihaoyap": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"on/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"no/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_POSITION \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_JOIN_DATE \u003d new Prefix(\"on/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_EVENT_VENUE \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_EVENT_MANPOWER_NEEDED \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_EVENT_START_DATE \u003d new Prefix(\"on/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_EVENT_END_DATE \u003d new Prefix(\"till/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final Prefix PREFIX_EVENT_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final Prefix PREFIX_EMPLOYEE_NUMBER \u003d new Prefix(\"n/\"); // for allocatem command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final Prefix PREFIX_EMPLOYEE_ID \u003d new Prefix(\"id/\"); // for allocatem command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final Prefix PREFIX_MANPOWER_TO_ADD \u003d new Prefix(\"n/\"); // for allocate command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final Prefix PREFIX_YEAR_MONTH \u003d new Prefix(\"for/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 3,
      "DivineDX": 1,
      "-": 13,
      "shihaoyap": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeGender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeJoinDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePosition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDayTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final DateTimeFormatter FORMATTER_YEAR_MONTH \u003d DateTimeFormatter.ofPattern(\"MM/yyyy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses a {@code String name} into a {@code EmployeeName}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static EmployeeName parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new ParseException(EmployeeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new EmployeeName(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses a {@code String position} into a {@code EmployeePosition}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * @throws ParseException if the given {@code position} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static EmployeePosition parsePosition(String position) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(position);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String trimmedPosition \u003d position.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeePosition.isValidPosition(trimmedPosition)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new ParseException(EmployeePosition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new EmployeePosition(trimmedPosition);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses a {@code String gender} into a {@code EmployeeGender}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static EmployeeGender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeGender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new ParseException(EmployeeGender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new EmployeeGender(trimmedGender.toLowerCase());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses a {@code String phone} into a {@code EmployeePhone}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static EmployeePhone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeePhone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new ParseException(EmployeePhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new EmployeePhone(trimmedPhone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses a {@code String address} into an {@code EmployeeAddress}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static EmployeeAddress parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeAddress.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new ParseException(EmployeeAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new EmployeeAddress(trimmedAddress);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses a {@code String email} into an {@code EmployeeEmail}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static EmployeeEmail parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeEmail.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new ParseException(EmployeeEmail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new EmployeeEmail(trimmedEmail);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String phone} into a {@code EmployeePhone}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static EmployeeId parseEmployeeId() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new EmployeeId();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String EmployeeJoinDate} into a {@code joinDate}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the given {@code EmployeeJoinDate} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static EmployeeJoinDate parseJoinDate(String joinDate) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(joinDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        String trimmed \u003d joinDate.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EmployeeJoinDate.isValidJoinDate(trimmed)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(EmployeeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        LocalDate newJoinDate \u003d LocalDate.parse(trimmed, FORMATTER);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new EmployeeJoinDate(newJoinDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String Eventname} into a {@code EventName}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the given {@code Eventname} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static EventName parseEventName(String name) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new EventName(trimmedName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String venueName} into a {@code EventVenue}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the given {@code EventVenue} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static EventVenue parseVenue(String venueName) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(venueName);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        String trimmedName \u003d venueName.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventVenue.isValidVenue(trimmedName)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(EventVenue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new EventVenue(trimmedName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String date} into a {@code EventDate}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the given {@code EventDate} is invalid."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static EventDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String trimmed \u003d date.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!EventDate.isValidDate(trimmed)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDate newDate \u003d LocalDate.parse(trimmed, FORMATTER);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new EventDate(newDate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String date} into a {@code YearMonth}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the given {@code YearMonth} is invalid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static YearMonth parseYearMonth(String date) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        String trimmed \u003d date.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventDate.isValidYearMonth(trimmed)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS_MONTH);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return YearMonth.parse(trimmed, FORMATTER_YEAR_MONTH);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses a {@code String timePeriod} into a {@code EventDayTime}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param timePeriod Valid String example: \"1000-2000\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the given {@code timePeriod} format is incorrect"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static EventDayTime parseTimePeriod(String timePeriod) throws ParseException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(timePeriod);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String trimmed \u003d timePeriod.trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!EventDayTime.isValidTime(trimmed)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException(EventDayTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] timeSplit \u003d trimmed.split(\"-\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(timeSplit[0], EventDayTime.FORMATTER);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(timeSplit[1], EventDayTime.FORMATTER);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new EventDayTime(startTime, endTime);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeException e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException(EventDayTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses a {@code String manpowerNeeded} into a {@code EventManpowerNeeded}."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the given {@code EventManpowerNeeded} is invalid."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static EventManpowerNeeded parseManpowerNeeded(String manpowerNeeded) throws ParseException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(manpowerNeeded);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        String trimmed \u003d manpowerNeeded.trim();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventManpowerNeeded.isValidEventManpowerNeeded(trimmed)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(EventManpowerNeeded.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new EventManpowerNeeded(trimmed);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses a {@code String eventDateTimeMap} into a {@code EventDateTimeMap}."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * E.g. of String input: 03102019:1000-2000,05102019:1500-1700"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the given {@code EventDateTimeMap} is invalid."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static EventDateTimeMap parseEventDateTimeMap(String eventDateTimeMap) throws ParseException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap map \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (eventDateTimeMap.isEmpty()) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return map;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String trimmed \u003d eventDateTimeMap.trim();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] eachDateTime \u003d trimmed.split(\",\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            for (String dateTime : eachDateTime) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String[] dateTimeSplit \u003d dateTime.split(\":\"); //[0] is date, [1] is time-period"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                map.mapDateTime(parseDate(dateTimeSplit[0]), parseTimePeriod(dateTimeSplit[1]));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException(EventDateTimeMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Parses a {@code String manpowerNeeded} into a {@code Integer manpowerCount}."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws ParseException if the given manpowerNeeded is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static Integer parseManpowerToAllocate(String manpowerToAllocate) throws ParseException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (manpowerToAllocate \u003d\u003d null) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String trimmed \u003d manpowerToAllocate.trim();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer manpowerToAdd;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            manpowerToAdd \u003d Integer.valueOf(trimmed);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (manpowerToAdd \u003c\u003d 0) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new ParseException(\"Number of employees to allocate must be a positive integer!\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return manpowerToAdd;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 48,
      "calvincxz": 34,
      "DivineDX": 69,
      "-": 103,
      "shihaoyap": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/allocate/AutoAllocateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.allocate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.allocate.AutoAllocateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Parses input arguments and creates a new AutoAllocateCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class AutoAllocateCommandParser implements Parser\u003cAutoAllocateCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AutoAllocateCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * and returns an AutoAllocateCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public AutoAllocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EMPLOYEE_NUMBER, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index eventIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer manpowerCount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            manpowerCount \u003d ParserUtil.parseManpowerToAllocate(argMultimap.getValue(PREFIX_EMPLOYEE_NUMBER)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    .orElse(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    AutoAllocateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        tagList \u003d parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new AutoAllocateCommand(eventIndex, manpowerCount, tagList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 67,
      "DivineDX": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/allocate/DeallocateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.allocate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.allocate.DeallocateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Parses input arguments and creates a new DeallocateCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class DeallocateCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeallocateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * and returns a DeallocateCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public DeallocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EMPLOYEE_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMPLOYEE_ID).isPresent()) { //internal call by UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            String employeeId \u003d argMultimap.getValue(PREFIX_EMPLOYEE_ID).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new DeallocateCommand(index, employeeId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new DeallocateCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeallocateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 42,
      "DivineDX": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/allocate/ManualAllocateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.allocate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.allocate.ManualAllocateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Parses input arguments and creates a new ManualAllocateCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class ManualAllocateCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ManualAllocateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * and returns an ManualAllocateCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ManualAllocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMPLOYEE_NUMBER, PREFIX_EMPLOYEE_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index eventIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMPLOYEE_ID).isPresent()) { //internal call by UI, guaranteed no exceptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            String employeeId \u003d argMultimap.getValue(PREFIX_EMPLOYEE_ID).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new ManualAllocateCommand(eventIndex, employeeId);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMPLOYEE_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_EMPLOYEE_NUMBER).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                throw new ParseException(\"Invalid Employee Index!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    ManualAllocateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new ManualAllocateCommand(eventIndex, index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 48,
      "DivineDX": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/employee/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOIN_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeGender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeJoinDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePosition;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_POSITION, PREFIX_PHONE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_JOIN_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                PREFIX_EMAIL, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeId employeeId \u003d ParserUtil.parseEmployeeId();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeName employeeName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeGender employeeGender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeePosition employeePosition \u003d ParserUtil.parsePosition(argMultimap.getValue(PREFIX_POSITION).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeePhone employeePhone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeEmail employeeEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeAddress employeeAddress \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EmployeeJoinDate employeeJoinDate \u003d ParserUtil.parseJoinDate(argMultimap.getValue(PREFIX_JOIN_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Employee employee \u003d new Employee(employeeId, employeeName, employeeGender, employeePosition,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                 employeePhone, employeeEmail, employeeAddress, employeeJoinDate, tagList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new AddCommand(employee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 6,
      "calvincxz": 2,
      "DivineDX": 7,
      "-": 45,
      "shihaoyap": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/employee/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/employee/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOIN_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        PREFIX_GENDER, PREFIX_JOIN_DATE, PREFIX_POSITION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EditEmployeeDescriptor editEmployeeDescriptor \u003d new EditEmployeeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEmployeeDescriptor.setEmployeeGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_POSITION).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEmployeeDescriptor.setEmployeePosition(ParserUtil.parsePosition("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_JOIN_DATE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEmployeeDescriptor.setEmployeeJoinDate(ParserUtil.parseJoinDate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    argMultimap.getValue(PREFIX_JOIN_DATE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            editEmployeeDescriptor.setEmployeeName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            editEmployeeDescriptor.setEmployeePhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            editEmployeeDescriptor.setEmployeeEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEmployeeDescriptor.setEmployeeAddress(ParserUtil.parseAddress("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEmployeeDescriptor::setTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!editEmployeeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new EditCommand(index, editEmployeeDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 11,
      "DivineDX": 7,
      "-": 70,
      "shihaoyap": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/employee/FetchEmployeeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.FetchEmployeeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Parses input arguments and creates a new FetchEmployeeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FetchEmployeeCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FetchEmployeeCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * and returns a FetchEmployeeCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FetchEmployeeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new FetchEmployeeCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FetchEmployeeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/employee/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 3,
      "-": 30,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_MANPOWER_NEEDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        PREFIX_EVENT_VENUE, PREFIX_EVENT_MANPOWER_NEEDED,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        PREFIX_EVENT_START_DATE, PREFIX_EVENT_END_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_EVENT_VENUE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                PREFIX_EVENT_MANPOWER_NEEDED, PREFIX_EVENT_START_DATE, PREFIX_EVENT_END_DATE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventName name \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventVenue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_EVENT_VENUE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventManpowerNeeded manpowerNeeded \u003d ParserUtil.parseManpowerNeeded("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                argMultimap.getValue(PREFIX_EVENT_MANPOWER_NEEDED).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate start \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_EVENT_START_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate end \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_EVENT_END_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Event event \u003d new Event(name, venue, manpowerNeeded, start, end, tagList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 14,
      "shihaoyap": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/AssignDateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.AssignDateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDayTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Parses input arguments and creates a new AssignDateCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class AssignDateCommandParser implements Parser\u003cAssignDateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignDateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * and returns an AssignDateCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public AssignDateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_START_DATE, PREFIX_EVENT_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //Ensure fields are compulsory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime timePeriod \u003d ParserUtil.parseTimePeriod(argMultimap.getValue(PREFIX_EVENT_TIME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            EventDate targetDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_EVENT_START_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new AssignDateCommand(eventIndex, targetDate, timePeriod);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new AssignDateCommand(eventIndex, timePeriod);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Note: Repeated across multiple classes, will refactor later"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/ClearDateMappingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.ClearDateMappingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Parses input arguments and creates a new ClearDateMappingCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ClearDateMappingCommandParser implements Parser\u003cClearDateMappingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearDateMappingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * and returns a ClearDateMappingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ClearDateMappingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ClearDateMappingCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearDateMappingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/DeleteDateMappingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.DeleteDateMappingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Parses input arguments and creates a new DeleteDateMappingCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeleteDateMappingCommandParser implements Parser\u003cDeleteDateMappingCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDateMappingCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * and returns an DeleteDateMappingCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeleteDateMappingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_START_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //Ensure fields are compulsory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_START_DATE) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    DeleteDateMappingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate targetDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_EVENT_START_DATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new DeleteDateMappingCommand(eventIndex, targetDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Note: Repeated across multiple classes, will refactor later"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/DeleteEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "     * and returns a DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 27,
      "DivineDX": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/EditEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_MANPOWER_NEEDED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.EditEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_VENUE, PREFIX_EVENT_MANPOWER_NEEDED,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        PREFIX_EVENT_START_DATE, PREFIX_EVENT_END_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEventDescriptor.setName(ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEventDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_EVENT_VENUE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_MANPOWER_NEEDED).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            editEventDescriptor.setManpowerNeeded(ParserUtil.parseManpowerNeeded("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_MANPOWER_NEEDED).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            editEventDescriptor.setStartDate(ParserUtil.parseDate("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_START_DATE).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            editEventDescriptor.setEndDate(ParserUtil.parseDate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_END_DATE).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 11,
      "shihaoyap": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/FetchEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.FetchEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Parses input arguments and creates a new FetchEventCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class FetchEventCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FetchEventCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * and returns a FetchEventCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public FetchEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return new FetchEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FetchEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 26,
      "DivineDX": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/FindEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.event.FindEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindEventCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * and returns a FindEventCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FindEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new FindEventCommand(new EventNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/DisplayScheduleForDateParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForDateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventContainsKeyDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Parses input arguments and creates a new DisplayScheduleForDateCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DisplayScheduleForDateParser implements Parser\u003cDisplayScheduleForDateCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplayScheduleForDateCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * and returns a DisplayScheduleForDateCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DisplayScheduleForDateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    DisplayScheduleForDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate start \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new DisplayScheduleForDateCommand(new EventContainsKeyDatePredicate(start.getDate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 8,
      "shihaoyap": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedule/DisplayScheduleForYearMonthParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForYearMonthCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventContainsKeyYearMonthPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Parses input arguments and creates a new DisplayScheduleForYearMonthCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DisplayScheduleForYearMonthParser implements Parser\u003cDisplayScheduleForYearMonthCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplayScheduleForYearMonthCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * and returns a DisplayScheduleForYearMonthCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DisplayScheduleForYearMonthCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR_MONTH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR_MONTH)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    DisplayScheduleForYearMonthCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        YearMonth yearMonth \u003d ParserUtil.parseYearMonth(argMultimap.getValue(PREFIX_YEAR_MONTH).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new DisplayScheduleForYearMonthCommand(new EventContainsKeyYearMonthPredicate(yearMonth));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/processor/DistinctDatesProcessor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.logic.processor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Contains utility methods used for processing DistinctDates."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DistinctDatesProcessor {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Generates all DistinctDates from the given EventList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static List\u003cDistinctDate\u003e generateAllDistinctDateList(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEvent\u003e fullEventList \u003d model.getFullListEvents();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return generateDistinctDateList(fullEventList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Generate all DistinctDates from Events that are allocated to an Employee."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static List\u003cDistinctDate\u003e generateEmployeesDistinctDateList(Model model, Employee employee) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d model.getFullListEvents();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return generateEmployeesDistinctDateList(eventList, employee);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Generate all DistinctDates from Events that are allocated to an Employee. Overloaded Method."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param eventList Unfiltered EventList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static List\u003cDistinctDate\u003e generateEmployeesDistinctDateList(List\u003cEvent\u003e eventList, Employee employee) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEvent\u003e filteredEventList \u003d eventList.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .filter(event -\u003e event.employeeIsAllocated(employee))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return generateDistinctDateList(filteredEventList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Generates a list of DistinctDate objects based on the input eventlist from model."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param eventList List of Events to process"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @return a list of DistinctDate objects"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static List\u003cDistinctDate\u003e generateDistinctDateList(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        List\u003cDistinctDate\u003e distinctDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEventDate\u003e dates \u003d generateDateList(eventList); //Unique and Sorted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        for (int i \u003d 0; i \u003c dates.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            EventDate currentDate \u003d dates.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            List\u003cEvent\u003e events \u003d generateListOfEventForDate(currentDate, eventList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            DistinctDate date \u003d new DistinctDate(currentDate, events);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            distinctDateList.add(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return distinctDateList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Generates a list of Event objects that falls on a given EventDate object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param date   a EventDate object which have been identified to be Distinct."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param events List of Events to filter through"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return a list of Event objects that contains the specific EventDate"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static List\u003cEvent\u003e generateListOfEventForDate(EventDate date, List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return events.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .filter(event -\u003e event.getListOfEventDates().contains(date))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Generates a unique, sorted list of mapped EventDates from the given list of events"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param eventList given List of Events"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return a list of distinct dates in EventDate format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static List\u003cEventDate\u003e generateDateList(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Set\u003cEventDate\u003e datesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Event currentEvent \u003d eventList.get(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            datesSet.addAll(currentEvent.getListOfEventDates());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEventDate\u003e datesList \u003d new ArrayList\u003c\u003e(datesSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Collections.sort(datesList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return datesList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 59,
      "shihaoyap": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Duplicates are not allowed (by .isSameEmployee comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final UniqueEmployeeList employees;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Creates an AddressBook using the Employees in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Replaces the contents of the employee list with {@code employees}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * {@code employees} must not contain duplicate employees."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setEmployees(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employees.setEmployees(employees);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        setEmployees(newData.getEmployeeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    //// employee-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns true if a employee with the same identity as {@code employee} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(employee);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return employees.contains(employee);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Adds a employee to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * The employee must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void addEmployee(Employee p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employees.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Replaces the given employee {@code target} in the list with {@code editedEmployee}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * The employee identity of {@code editedEmployee} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * another existing employee in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(editedEmployee);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employees.setEmployee(target, editedEmployee);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void removeEmployee(Employee key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employees.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return employees.asUnmodifiableObservableList().size() + \" employees\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getEmployeeList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return employees.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                \u0026\u0026 employees.equals(((AddressBook) other).employees));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return employees.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 29,
      "-": 88,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Wraps all data at the event-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class EventBook implements ReadOnlyEventBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventBook(ReadOnlyEventBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code persons} must not contain duplicate events."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void resetData(ReadOnlyEventBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    //// employee-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the event book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Adds a event to the event book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * The event must not already exist in the event book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code target} must exist in the event book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the event book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Removes {@code key} from this {@code EventBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code key} must exist in the event book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                || (other instanceof EventBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 events.equals(((EventBook) other).events));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 109,
      "DivineDX": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    Predicate\u003cEmployee\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns List of All Employees."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cEmployee\u003e getFullListEmployees();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns true if a employee with the same identity as {@code employee} exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    boolean hasEmployee(Employee employee);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Deletes the given employee."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * The employee must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void deleteEmployee(Employee target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Adds the given employee."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * {@code employee} must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void addEmployee(Employee employee);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Replaces the given employee {@code target} with {@code editedEmployee}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * The employee identity of {@code editedEmployee} must not be the same"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * as another existing employee in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void setEmployee(Employee target, Employee editedEmployee);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an unmodifiable view of the filtered employee list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Updates the filter of the filtered employee list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns the user prefs\u0027 event book file path."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    Path getEventBookFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Sets the user prefs\u0027 event book file path."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void setEventBookFilePath(Path eventBookFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Replaces event book data with the data in {@code eventBook}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void setEventBook(ReadOnlyEventBook eventBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    ReadOnlyEventBook getEventBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns List of All Employees."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cEvent\u003e getFullListEvents();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the event book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * The event must exist in the event book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code event} must not already exist in the event book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code target} must exist in the event book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the event book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void setEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Updates the filter of the filtered Event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredScheduledEventList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Updates the filter of the filtered Event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    void updateFilteredScheduledEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cDistinctDate\u003e getEmployeeDistinctDatesList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an unmodifiable view of the DistinctDate list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    ObservableList\u003cDistinctDate\u003e getEventDistinctDatesList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Updates the Employees DistinctDatesList by taking in a new List of DistinctDate Objects"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void updateEmployeeDistinctDateList(List\u003cDistinctDate\u003e list);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Updates the Event DistinctDatesList by taking in a new List of DistinctDate Objects"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list of DistinctDate objects to replace the old list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void updateEventDistinctDatesList(List\u003cDistinctDate\u003e list);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 14,
      "calvincxz": 53,
      "DivineDX": 44,
      "-": 71,
      "shihaoyap": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.processor.DistinctDatesProcessor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final FilteredList\u003cEmployee\u003e filteredEmployees;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final EventBook eventBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredScheduledEvents;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private ObservableList\u003cDistinctDate\u003e employeeDistinctDateList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private ObservableList\u003cDistinctDate\u003e eventDistinctDatesList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyEventBook eventBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireAllNonNull(addressBook, eventBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" Initializing with event book:\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + eventBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventBook \u003d new EventBook(eventBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        filteredEmployees \u003d new FilteredList\u003c\u003e(this.addressBook.getEmployeeList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventBook.getEventList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        filteredScheduledEvents \u003d new FilteredList\u003c\u003e(this.eventBook.getEventList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        employeeDistinctDateList \u003d FXCollections"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .observableList(DistinctDatesProcessor.generateAllDistinctDateList(this));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        eventDistinctDatesList \u003d FXCollections"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .observableList(DistinctDatesProcessor.generateAllDistinctDateList(this));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this(addressBook, new EventBook(), userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this(new AddressBook(), new EventBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Path getEventBookFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return userPrefs.getEventBookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEventBookFilePath(Path eventBookFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(eventBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        userPrefs.setEventBookFilePath(eventBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getFullListEmployees() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return addressBook.getEmployeeList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireNonNull(employee);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return addressBook.hasEmployee(employee);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void deleteEmployee(Employee target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        addressBook.removeEmployee(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        addressBook.addEmployee(employee);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        updateFilteredEmployeeList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        requireAllNonNull(target, editedEmployee);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        addressBook.setEmployee(target, editedEmployee);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEventBook(ReadOnlyEventBook eventBook) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventBook.resetData(eventBook);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ReadOnlyEventBook getEventBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBook;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFullListEvents() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return eventBook.getEventList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBook.hasEvent(event);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventBook.removeEvent(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventBook.addEvent(event);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        updateFilteredScheduledEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventBook.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Employee List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Employee} backed by the internal list of"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return filteredEmployees;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        filteredEmployees.setPredicate(predicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code versionedEventBook}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Scheduled Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * {@code versionedEventBook}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredScheduledEventList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return filteredScheduledEvents;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void updateFilteredScheduledEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        filteredScheduledEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Distinct Dates List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code DistinctDates} for Employees"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cDistinctDate\u003e getEmployeeDistinctDatesList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeDistinctDateList;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code DistinctDates} for Events"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cDistinctDate\u003e getEventDistinctDatesList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return eventDistinctDatesList;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void updateEmployeeDistinctDateList(List\u003cDistinctDate\u003e list) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        employeeDistinctDateList \u003d FXCollections.observableList(list);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void updateEventDistinctDatesList(List\u003cDistinctDate\u003e distinctDates) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        eventDistinctDatesList \u003d FXCollections.observableList(distinctDates);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBook.equals(other.eventBook)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                \u0026\u0026 filteredEmployees.equals(other.filteredEmployees)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 20,
      "calvincxz": 73,
      "DivineDX": 38,
      "-": 133,
      "shihaoyap": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns an unmodifiable view of the employees list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * This list will not contain any duplicate employees."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    ObservableList\u003cEmployee\u003e getEmployeeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 3,
      "-": 13,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEventBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public interface ReadOnlyEventBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " * This class will be used to implement the statistic"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " * functionality."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eshwarkp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eshwarkp": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Path eventBookFilePath \u003d Paths.get(\"data\" , \"eventbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Path getEventBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEventBookFilePath(Path eventBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(eventBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventBookFilePath \u003d eventBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 eventBookFilePath.equals(o.eventBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, eventBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        sb.append(\"\\nLocal data file location for EmployeeAddress Book : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        sb.append(\"\\nLocal data file location for Event Book : \" + eventBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 10,
      "-": 84,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/distinctdate/DistinctDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.model.distinctdate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Represents a DistinctDate Object, which will be stored in the DistinctDateList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Each DistinctDate Object contains a list of events and a EventDate which it represents."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DistinctDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private List\u003cEvent\u003e listOfEvents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private EventDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DistinctDate(EventDate date, List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        listOfEvents \u003d events;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * returns the list of events which is on the specific date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @return a list of events which corresponds to the specific date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public List\u003cEvent\u003e getListOfEvents() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return listOfEvents;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * returns the EventDate of the DistinctDate object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDate getDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if both DistinctDate object refer to the same object, or share the same EventDate."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * This defines a weaker notion of equality between two DistinctDate."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean isSameDate(DistinctDate otherDistinctDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (otherDistinctDate \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return otherDistinctDate !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 otherDistinctDate.getDate().equals(getDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if both DistinctDate have the same identity and data fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * This defines a stronger notion of equality between two DistinctDate."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!(other instanceof DistinctDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        DistinctDate otherDistinctDate \u003d (DistinctDate) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return otherDistinctDate.getDate().equals(getDate())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 otherDistinctDate.getListOfEvents().equals(getListOfEvents());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return Objects.hash(date, listOfEvents);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 8,
      "shihaoyap": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/Employee.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee in the employeeAddress book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Employee {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeeName employeeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeePhone employeePhone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeeEmail employeeEmail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeeId employeeId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeePosition employeePosition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeeGender employeeGender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeeAddress employeeAddress;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EmployeeJoinDate employeeJoinDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Employee(EmployeeId employeeId, EmployeeName employeeName, EmployeeGender employeeGender,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                     EmployeePosition employeePosition, EmployeePhone employeePhone, EmployeeEmail employeeEmail,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                     EmployeeAddress employeeAddress, EmployeeJoinDate employeeJoinDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeName \u003d employeeName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeePhone \u003d employeePhone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeEmail \u003d employeeEmail;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeAddress \u003d employeeAddress;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeId \u003d employeeId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeGender \u003d employeeGender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeJoinDate \u003d employeeJoinDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeePosition \u003d employeePosition;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.tags.add(new Tag(employeeGender.gender));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Employee() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeName \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeePhone \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeEmail \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeAddress \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeId \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeGender \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeeJoinDate \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.employeePosition \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeName getEmployeeName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeePhone getEmployeePhone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeePhone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeEmail getEmployeeEmail() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeEmail;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeAddress getEmployeeAddress() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeAddress;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeId getEmployeeId() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeId;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeePosition getEmployeePosition() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeePosition;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeGender getEmployeeGender() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeGender;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeJoinDate getEmployeeJoinDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return employeeJoinDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if both employees of the same employeeName have at least one other identity field that is the same."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * This defines a weaker notion of equality between two employees."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean isSameEmployee(Employee otherEmployee) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (otherEmployee \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return otherEmployee !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u0026\u0026 otherEmployee.getEmployeeName().equals(getEmployeeName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if both employees have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * This defines a stronger notion of equality between two employees."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!(other instanceof Employee)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee otherEmployee \u003d (Employee) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return otherEmployee.getEmployeeId().equals(getEmployeeId())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeeName().equals(getEmployeeName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeeGender().equals(getEmployeeGender())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeePosition().equals(getEmployeePosition())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeePhone().equals(getEmployeePhone())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeeEmail().equals(getEmployeeEmail())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeeAddress().equals(getEmployeeAddress())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getEmployeeJoinDate().equals(getEmployeeJoinDate())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEmployee.getTags().equals(getTags());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Objects.hash(employeeName, employeePhone, employeeEmail, employeeAddress, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        builder.append(getEmployeeName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeeID: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeeId())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeeGender: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeeGender())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeePosition: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeePosition())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeePhone: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeePhone())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeeEmail: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeeEmail())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeeAddress: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeeAddress())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" EmployeeJoinDate: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(getEmployeeJoinDate())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 2,
      "DivineDX": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeAddress.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeeAddress {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs an {@code EmployeeAddress}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeAddress(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeeAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 value.equals(((EmployeeAddress) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeEmail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeeEmail {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs an {@code EmployeeEmail}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeEmail(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeeEmail // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 value.equals(((EmployeeEmail) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeGender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee\u0027s gender in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeeGender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Gender should only be male or female, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The first character of the gender must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public final String gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EmployeeName}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeGender(String gender) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        test \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (test.equals(\"male\") || test.equals(\"female\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeeGender // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 gender.equals(((EmployeeGender) other).gender)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "calvincxz": 7,
      "DivineDX": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Represent\u0027s the unique identifying ID of an Employee Object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class EmployeeId {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            \"Employee IDs is a 3-digit unique number\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\d{3}\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static int nextID \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Constructs an {@code EmployeeID}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public EmployeeId() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String id \u003d String.format(\"%03d\", nextID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        nextID++;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public EmployeeId(String id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.id \u003d String.format(\"%03d\", Integer.valueOf(id));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static void setNextId(int nextId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EmployeeId.nextID \u003d nextId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || (other instanceof EmployeeId // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 id.equals(((EmployeeId) other).id)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 45,
      "calvincxz": 6,
      "shihaoyap": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeJoinDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents the Event Starting Date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeeJoinDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Start Date Needed should be an in the following format dd/MM/yyyy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public final LocalDate joinDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EventStartDate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param joinDate A valid start date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeJoinDate(LocalDate joinDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.joinDate \u003d joinDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if a given string is a valid localDate number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidJoinDate(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return LocalDate.parse(test, FORMATTER) instanceof LocalDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return joinDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeeJoinDate // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 joinDate.equals(((EmployeeJoinDate) other).joinDate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return joinDate.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeeName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EmployeeName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeeName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 fullName.equals(((EmployeeName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeePhone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeePhone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"EmployeePhone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EmployeePhone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeePhone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeePhone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 value.equals(((EmployeePhone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 8,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeePosition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a Employee\u0027s position in the AddMin+."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeePosition {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Position should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public final String fullPosition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EmployeePosition}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param position A valid position."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeePosition(String position) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(position);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        checkArgument(isValidPosition(position), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        fullPosition \u003d position;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if a given string is a valid position."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidPosition(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return fullPosition;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EmployeePosition // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 fullPosition.equals(((EmployeePosition) other).fullPosition)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return fullPosition.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DivineDX": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Tests that a {@code Employee}\u0027s {@code EmployeeName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean test(Employee employee) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(employee.getEmployeeName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/UniqueEmployeeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * A list of employees that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * A employee is considered unique by comparing using {@code Employee#isSameEmployee(Employee)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * employees uses Employee#isSameEmployee(Employee) for equality so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * the employee being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * unique in terms of identity in the UniqueEmployeeList. However, the removal of a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * employee uses Employee#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * as to ensure that the employee with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * @see Employee#isSameEmployee(Employee)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class UniqueEmployeeList implements Iterable\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final ObservableList\u003cEmployee\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final ObservableList\u003cEmployee\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if the list contains an equivalent employee as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean contains(Employee toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEmployee);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Adds a employee to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The employee must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void add(Employee toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Replaces the employee {@code target} in the list with {@code editedEmployee}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The employee identity of {@code editedEmployee} must not be the same as another existing employee in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireAllNonNull(target, editedEmployee);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!target.isSameEmployee(editedEmployee) \u0026\u0026 contains(editedEmployee)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        internalList.set(index, editedEmployee);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The employee must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void remove(Employee toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void setEmployees(UniqueEmployeeList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Replaces the contents of this list with {@code employees}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * {@code employees} must not contain duplicate employees."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void setEmployees(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireAllNonNull(employees);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!employeesAreUnique(employees)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        internalList.setAll(employees);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ObservableList\u003cEmployee\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Iterator\u003cEmployee\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof UniqueEmployeeList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEmployeeList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if {@code employees} contains only unique employees."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private boolean employeesAreUnique(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c employees.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            for (int j \u003d i + 1; j \u003c employees.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                if (employees.get(i).isSameEmployee(employees.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/exceptions/DuplicateEmployeeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Signals that the operation will result in duplicate Employees"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DuplicateEmployeeException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DuplicateEmployeeException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(\"Operation would result in duplicate employees\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/exceptions/EmployeeNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.employee.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Signals that the operation is unable to find the specified employee."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EmployeeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents an Event in the AddMin app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    //Identity Fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventName name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDate startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDate endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventVenue venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventManpowerNeeded manpowerNeeded;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventManpowerAllocatedList manpowerAllocatedList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDateTimeMap eventDateTimeMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Basic Constructor, called for a new Event Creation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Event(EventName name, EventVenue venue,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                 EventManpowerNeeded manpowerNeeded, EventDate startDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                 EventDate endDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.manpowerNeeded \u003d manpowerNeeded;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.manpowerAllocatedList \u003d new EventManpowerAllocatedList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDateTimeMap \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        initalizeDateTime(startDate, endDate); //inserts default mapping for start and end date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructor with ManpowerList and EventDateTimeMap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Event(EventName name, EventVenue venue,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                 EventManpowerNeeded manpowerNeeded, EventDate startDate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                 EventDate endDate, EventManpowerAllocatedList manpowerAllocatedList,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                 EventDateTimeMap eventDateTimeMap, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.manpowerNeeded \u003d manpowerNeeded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.manpowerAllocatedList \u003d manpowerAllocatedList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDateTimeMap \u003d eventDateTimeMap;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventName getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDate getStartDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDate getEndDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventVenue getVenue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventManpowerNeeded getManpowerNeeded() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return manpowerNeeded;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventManpowerAllocatedList getManpowerAllocatedList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return manpowerAllocatedList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDateTimeMap getEventDateTimeMap() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return eventDateTimeMap;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cEventDate\u003e getListOfEventDates() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return eventDateTimeMap.getDateMappedList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Checks if an employee is available for this event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param employee          to check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param filteredEventList a complete event list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean isAvailableForEvent(Employee employee, List\u003cEvent\u003e filteredEventList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEvent\u003e containsEmployeeEventList \u003d filteredEventList.stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .filter(x -\u003e x.manpowerAllocatedList.getManpowerList().contains(employee.getEmployeeId()))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        long nonOverlapEventsCount \u003d containsEmployeeEventList.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .filter(x -\u003e (startDate.getDate().compareTo(x.getEndDate().getDate()) \u003e 0"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        \u0026\u0026 endDate.getDate().compareTo(x.getEndDate().getDate()) \u003e 0)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        || (startDate.getDate().compareTo(x.getStartDate().getDate()) \u003c 0"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        \u0026\u0026 endDate.getDate().compareTo(x.getStartDate().getDate()) \u003c 0)).count();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return nonOverlapEventsCount \u003d\u003d containsEmployeeEventList.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Checks if an Employee is allocated to this Event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean employeeIsAllocated(Employee employee) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return manpowerAllocatedList.containsEmployee(employee);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Assigns the EventDate-EventDayTime mapping to the EventDateTimeMap object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param eventDate       Target Date to be assigned."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param eventTimePeriod Time Period Event is being held."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void assignDateTime(EventDate eventDate, EventDayTime eventTimePeriod) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDateTimeMap.mapDateTime(eventDate, eventTimePeriod);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * When Event object is first created, auto-initialize DateTime mapping for Start\u0026End Date."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void initalizeDateTime(EventDate startDate, EventDate endDate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime standard \u003d EventDayTime.defaultEventDayTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assignDateTime(startDate, standard);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assignDateTime(endDate, standard);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Clears all DateTime Mappings associated with the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void clearDateTimeMapping() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDateTimeMap.clearMapping();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getManpowerNeeded().equals(getManpowerNeeded())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getManpowerAllocatedList().equals(getManpowerAllocatedList())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDateTimeMap().equals(getEventDateTimeMap())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 otherEvent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Objects.hash(name, venue, manpowerNeeded,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                startDate, endDate, manpowerAllocatedList, tags);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        builder.append(\" Event Venue: \").append(getVenue());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        builder.append(\" Event Manpower Needed: \").append(getManpowerNeeded());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        builder.append(\" Event Start Date: \").append(getStartDate());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        builder.append(\" Event End Date: \").append(getEndDate());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns a similar toString() variation with new line for GUI display."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public String toStringWithNewLine() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(\"Event Name: \").append(getName());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(\" \\nEvent Venue: \").append(getVenue());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(\" \\nEvent Manpower Count: \").append(getCurrentManpowerCount() + \" / \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .append(getManpowerNeeded());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(\" \\nEvent Date: \").append(getStartDate()).append(\" - \" + getEndDate());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(\" \\nAll Event Date/Time: \\n\").append(getEventDateTimeMap().toStringWithNewLine());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        builder.append(\" \\nTags: \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public int getCurrentManpowerCount() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return manpowerAllocatedList.getManpowerList().size();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 93,
      "DivineDX": 132,
      "shihaoyap": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventContainsKeyDatePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code Date} matches the given date in dd/MM/yyyy format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class EventContainsKeyDatePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public EventContainsKeyDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Checks if a date is currently within the range of the Event\u0027s start and end date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param event Event object that is referenced"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Boolean"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return (event.getStartDate().getDate().isBefore(date) || event.getStartDate().getDate().equals(date))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 (event.getEndDate().getDate().isAfter(date) || event.getEndDate().getDate().equals(date));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || (other instanceof EventContainsKeyDatePredicate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 date.equals(((EventContainsKeyDatePredicate) other).date));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DivineDX": 8,
      "shihaoyap": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventContainsKeyYearMonthPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code Date} matches the given Key Year Month in MM/yyyy format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class EventContainsKeyYearMonthPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public EventContainsKeyYearMonthPredicate(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public String getYearMonth() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return yearMonth.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Checks if a YearMonth is currently within the range of the Event\u0027s start."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @param event Event object that is referenced"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @return Boolean result of whether it is within the Year Month"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return YearMonth.from(event.getStartDate().getDate()).equals(yearMonth);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                || (other instanceof EventContainsKeyYearMonthPredicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 yearMonth.equals(((EventContainsKeyYearMonthPredicate) other).yearMonth));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents the Date of an Event in AddMin+. Events can span a time period of multiple days (dates)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventDate implements Comparable\u003cEventDate\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the following format dd/MM/yyyy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MONTH \u003d \"Input Year Month should be MM/yyyy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final DateTimeFormatter FORMATTER_YEAR_MONTH \u003d DateTimeFormatter.ofPattern(\"MM/yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EventDate}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param date A valid LocalDate Object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDate(LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if a given string is a valid localDate number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return LocalDate.parse(test, FORMATTER) instanceof LocalDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if a given string is a valid month, year format MM/yyyy."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static boolean isValidYearMonth(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return YearMonth.parse(test, FORMATTER_YEAR_MONTH) instanceof YearMonth;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns a sequential stream of Event Dates."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param endInclusive an Event Date that will be included in the Stream"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Stream\u003cEventDate\u003e datesUntil(EventDate endInclusive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return getDate().datesUntil(endInclusive.getDate().plusDays(1))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            .map(date -\u003e new EventDate(date));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return date.format(FORMATTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventDate // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 date.equals(((EventDate) other).date)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int compareTo(EventDate otherEventDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return getDate().compareTo(otherEventDate.getDate());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 59,
      "shihaoyap": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDateTimeMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseTimePeriod;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents a HashMap of the EventDate to EventDayTime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Used to represent the time period that the event is hosted for throughout a single day."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventDateTimeMap {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"EventDateTimeMap is of the format DDMMYYYY:HHMM-HHMM, delimited by commas\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Map\u003cEventDate, EventDayTime\u003e dateTimeMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDateTimeMap() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.dateTimeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDateTimeMap(Map\u003cEventDate, EventDayTime\u003e map) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dateTimeMap \u003d map;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDateTimeMap(String stringMap) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (stringMap.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] eachDateTime \u003d stringMap.split(\",\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            for (String dateTime : eachDateTime) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String[] dateTimeSplit \u003d dateTime.split(\":\"); //[0] is date, [1] is time-period"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                this.mapDateTime(parseDate(dateTimeSplit[0]), parseTimePeriod(dateTimeSplit[1]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new IllegalArgumentException(EventDateTimeMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if the given string represents a valid DateTime Mapping."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidEventDateTimeMap(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return ParserUtil.parseEventDateTimeMap(test) instanceof EventDateTimeMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Map\u003cEventDate, EventDayTime\u003e getDateTimeMap() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateTimeMap;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns a List of EventDates that are currently mapped"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cEventDate\u003e getDateMappedList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEventDate\u003e uniqueEventDates \u003d new ArrayList\u003c\u003e(dateTimeMap.keySet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Collections.sort(uniqueEventDates);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return uniqueEventDates;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Add/Update the Key-Value pair of an EventDate to a EventDayTime"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param date    EventDate object representing a Date of an Event"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dayTime EventDayTime object representing the time period in a day that the event is hosted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void mapDateTime(EventDate date, EventDayTime dayTime) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dateTimeMap.put(date, dayTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void clearMapping() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dateTimeMap.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean containsDateKey(EventDate date) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateTimeMap.containsKey(date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Deletes a Date from the Date-Time Mapping."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param date EventDate Object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void deleteDateKey(EventDate date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dateTimeMap.remove(date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventDateTimeMap // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 dateTimeMap.equals(((EventDateTimeMap) other).getDateTimeMap())); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateTimeMap.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (EventDate keyEventDate : dateTimeMap.keySet()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\",\"); //delimiter"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(keyEventDate.toString()); //Event Date"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\":\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(dateTimeMap.get(keyEventDate).toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * A similar variation of toString() for GUI display."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public String toStringWithNewLine() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (EventDate keyEventDate : dateTimeMap.keySet()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            sb.append(keyEventDate.toString()); //Event Date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            sb.append(\" : \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            sb.append(dateTimeMap.get(keyEventDate).toString() + \"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 14,
      "DivineDX": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDayTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents the time period of an EventDate. Contains a start time and an end time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventDayTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Time Period should be in the following format: HHMM-HHMM, StartingTime \u003c EndingTime\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventDayTime(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert endTime.isAfter(startTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Default EventDayTime to be initalized. Represents 8am-6pm."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static EventDayTime defaultEventDayTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(18, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new EventDayTime(startTime, endTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Return true if given string represents a valid time period within a day."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param test E.g. \"1020-1900\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] timeSplit \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalTime start \u003d LocalTime.parse(timeSplit[0], FORMATTER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalTime end \u003d LocalTime.parse(timeSplit[1], FORMATTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return start instanceof LocalTime \u0026\u0026 end instanceof LocalTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    \u0026\u0026 end.isAfter(start);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (DateTimeException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return startTime.format(FORMATTER) + \"-\" + endTime.format(FORMATTER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventDayTime // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 startTime.equals(((EventDayTime) other).getStartTime()) // state check)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 endTime.equals(((EventDayTime) other).getEndTime())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Objects.hash(startTime, endTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventManpowerAllocatedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * List of employees allocated as manpower for the Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventManpowerAllocatedList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private List\u003cEmployeeId\u003e manpowerList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventManpowerAllocatedList(String unprocessedList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (unprocessedList.equals(\"\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            manpowerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String[] personIds \u003d unprocessedList.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        manpowerList \u003d Arrays.stream(personIds)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .map(personId -\u003e new EmployeeId(personId))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventManpowerAllocatedList(List\u003cEmployeeId\u003e manpowerList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.manpowerList \u003d manpowerList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Constructs a {@code EventManpowerAllocatedList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventManpowerAllocatedList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        manpowerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public List\u003cEmployeeId\u003e getManpowerList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return manpowerList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Removes employee to the Manpower List for an Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param employee to be removed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @return boolean to represent if employee is successfully allocated to event"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean removeEmployee(Employee employee) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String employeeId \u003d employee.getEmployeeId().id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!manpowerList.contains(employeeId)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return manpowerList.remove(employeeId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Boolean Method to check if an the allocated list contains an employee"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean containsEmployee(Employee employee) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return manpowerList.contains(employee.getEmployeeId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        StringBuilder unprocessedList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (EmployeeId s : manpowerList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            unprocessedList.append(s + \" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return unprocessedList.toString().trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventManpowerAllocatedList // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 manpowerList.equals(((EventManpowerAllocatedList) other).manpowerList)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return manpowerList.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 49,
      "DivineDX": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventManpowerNeeded.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents the number of manpower needed for an Event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventManpowerNeeded {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \"Manpower Needed should be an integer, and \u003c 1000\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs a {@code EventManpowerNeeded}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param manpowerNum A valid number of manpower needed for an Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventManpowerNeeded(String manpowerNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(manpowerNum);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        checkArgument(isValidEventManpowerNeeded(manpowerNum), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        value \u003d Integer.parseInt(manpowerNum);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidEventManpowerNeeded(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return Integer.parseInt(test) \u003c 1000;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return value + \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventManpowerNeeded// instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((EventManpowerNeeded) other).value); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 8,
      "DivineDX": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents the Event\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Guarantees: Immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Constructs a {@code EmployeeName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 eventName.equals(((EventName) other).eventName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 46,
      "DivineDX": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getName().eventName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof seedu.address.model.event.EventNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \u0026\u0026 keywords.equals(((seedu.address.model.event.EventNameContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DivineDX": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventVenue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Represents the Event\u0027s Venue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventVenue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Venues can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * The first character of the Venue must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public final String venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructs an {@code Venue}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param venue A valid veneu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventVenue(String venue) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if a given string is a valid EventVenue."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static boolean isValidVenue(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                || (other instanceof EventVenue // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 venue.equals(((EventVenue) other).venue)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return venue.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 49,
      "shihaoyap": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * A list of Events that enforces uniqueness"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class UniqueEventList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns true if the list contains an equivalent employee as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Adds a employee to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * The employee must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Replaces the employee {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * The employee identity of {@code editedPerson} must not be the same as another existing employee in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * The employee must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setPersons(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        /*if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if {@code persons} contains only unique events."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private boolean personsAreUnique(List\u003cEmployee\u003e persons) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 13,
      "calvincxz": 98,
      "DivineDX": 13,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeGender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeJoinDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePosition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static Employee[] getSampleEmployees() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return new Employee[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"Alex Yeoh\"), new EmployeeGender(\"male\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    new EmployeePosition(\"Manager\"), new EmployeePhone(\"87438807\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    new EmployeeEmail(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"Bernice Yu\"), new EmployeeGender(\"female\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeePosition(\"Manager\"), new EmployeePhone(\"87438807\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeEmail(\"bbb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 BBB Street 29, #06-40\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"Charlotte Oliveiro\"), new EmployeeGender(\"female\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeePosition(\"Manager\"), new EmployeePhone(\"89123407\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeEmail(\"ccc@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 CCC Street 29, #06-40\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"David Li\"), new EmployeeGender(\"male\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeePosition(\"Manager\"), new EmployeePhone(\"87499807\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeEmail(\"ddd@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 DDD Street 29, #06-40\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"Irfan Ibrahim\"), new EmployeeGender(\"male\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeePosition(\"Manager\"), new EmployeePhone(\"87438807\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeEmail(\"eee@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 EEE Street 29, #06-40\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"Roy Balakrishnan\"), new EmployeeGender(\"male\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeePosition(\"Manager\"), new EmployeePhone(\"87438807\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeEmail(\"fff@example.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 FFF Street 29, #06-40\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Employee(new EmployeeId(), new EmployeeName(\"George Michael\"), new EmployeeGender(\"male\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeePosition(\"Temp\"), new EmployeePhone(\"87438807\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeEmail(\"ggg@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeAddress(\"Blk 30 GGG Street 99, #06-40\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EmployeeJoinDate(LocalDate.now()), getTagSet(\"friends\"))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            new Event(new EventName(\"Musical\"), new EventVenue(\"NUS\"), new EventManpowerNeeded(\"5\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            getTagSet(\"music\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Event(new EventName(\"Party\"), new EventVenue(\"ABC Hotel\"), new EventManpowerNeeded(\"20\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    getTagSet(\"informal\", \"above21\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Event(new EventName(\"Talk by DEF Company\"), new EventVenue(\"QWER Building, level 99\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventManpowerNeeded(\"3\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 11, 20)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 11, 21)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    getTagSet(\"formal\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Event(new EventName(\"Birthday party\"), new EventVenue(\"George\u0027s House\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventManpowerNeeded(\"3\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 11, 23)),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 11, 24)),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    getTagSet(\"fun\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            new Event(new EventName(\"Concert\"), new EventVenue(\"NUS Utown\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventManpowerNeeded(\"5\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 11, 23)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    new EventDate(LocalDate.of(2019, 11, 24)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    getTagSet(\"fun\", \"music\"))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        for (Employee sampleEmployee : getSampleEmployees()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            sampleAb.addEmployee(sampleEmployee);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static ReadOnlyEventBook getSampleEventBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBook sampleEb \u003d new EventBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (Event sampleEmployee : getSampleEvents()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            sampleEb.addEvent(sampleEmployee);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return (ReadOnlyEventBook) sampleEb;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 8,
      "calvincxz": 65,
      "DivineDX": 3,
      "-": 35,
      "shihaoyap": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EventBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EventBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public interface EventBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    Path getEventBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyEventBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Saves the given {@link ReadOnlyEventBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param eventBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 43,
      "DivineDX": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEmployee.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeGender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeJoinDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * Jackson-friendly version of {@link Employee}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "class JsonAdaptedEmployee {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Employee\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String position;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final String joindate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Constructs a {@code JsonAdaptedEmployee} with the given employee details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public JsonAdaptedEmployee(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                               @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                               @JsonProperty(\"id\") String id, @JsonProperty(\"position\") String position,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                               @JsonProperty(\"gender\") String gender, @JsonProperty(\"joindate\") String joindate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.joindate \u003d joindate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public JsonAdaptedEmployee(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                               @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.id \u003d \"000\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.joindate \u003d \"11/11/2011\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.gender \u003d \"male\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.position \u003d \"manager\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Converts a given {@code Employee} into this class for Jackson use."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public JsonAdaptedEmployee(Employee source) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        name \u003d source.getEmployeeName().fullName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        phone \u003d source.getEmployeePhone().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        email \u003d source.getEmployeeEmail().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        address \u003d source.getEmployeeAddress().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        id \u003d source.getEmployeeId().id;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        position \u003d source.getEmployeePosition().fullPosition;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        gender \u003d source.getEmployeeGender().gender;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        joindate \u003d source.getEmployeeJoinDate().toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Converts this Jackson-friendly adapted employee object into the model\u0027s {@code Employee} object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted employee."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public Employee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeeId.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EmployeeId.isValidId(id)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(EmployeeId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        final EmployeeId modelEmployeeId \u003d new EmployeeId(id);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (position \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeePosition.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeePosition.isValidPosition(position)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeePosition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeePosition modelEmployeePosition \u003d new EmployeePosition(position);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeeGender.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeGender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeeGender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeeGender modelEmployeeGender \u003d new EmployeeGender(gender);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (joindate \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                    EmployeeJoinDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeJoinDate.isValidJoinDate(joindate)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeeJoinDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        LocalDate newJoinDate \u003d LocalDate.parse(joindate, FORMATTER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeeJoinDate modelEmployeeJoinDate \u003d new EmployeeJoinDate(newJoinDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeeName.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeName.isValidName(name)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeeName modelEmployeeName \u003d new EmployeeName(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeePhone.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeePhone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeePhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeePhone modelEmployeePhone \u003d new EmployeePhone(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeeEmail.class.getSimpleName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeEmail.isValidEmail(email)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeeEmail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeeEmail modelEmployeeEmail \u003d new EmployeeEmail(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EmployeeAddress.class.getSimpleName()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!EmployeeAddress.isValidAddress(address)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            throw new IllegalValueException(EmployeeAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final EmployeeAddress modelEmployeeAddress \u003d new EmployeeAddress(address);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return new Employee(modelEmployeeId, modelEmployeeName, modelEmployeeGender, modelEmployeePosition,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                modelEmployeePhone, modelEmployeeEmail, modelEmployeeAddress, modelEmployeeJoinDate, modelTags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 143,
      "calvincxz": 17,
      "shihaoyap": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerAllocatedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String eventName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String eventVenue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String manpowerNeeded;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final String manpowerList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final String eventDateTimeMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public JsonAdaptedEvent("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            @JsonProperty(\"eventName\") String eventName,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            @JsonProperty(\"eventVenue\") String eventVenue,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            @JsonProperty(\"manpowerNeeded\") String manpowerNeeded,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            @JsonProperty(\"manpowerList\") String manpowerList,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            @JsonProperty(\"eventDateTimeMap\") String eventDateTimeMap,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.eventVenue \u003d eventVenue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.manpowerNeeded \u003d manpowerNeeded;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.manpowerList \u003d manpowerList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.eventDateTimeMap \u003d eventDateTimeMap;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Converts a given {@code Employee} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        eventName \u003d source.getName().eventName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        eventVenue \u003d source.getVenue().venue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        manpowerNeeded \u003d source.getManpowerNeeded().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        manpowerList \u003d source.getManpowerAllocatedList().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        eventDateTimeMap \u003d source.getEventDateTimeMap().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            eventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventName.isValidName(eventName)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        final EventName modelName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (eventVenue \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EventVenue.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventVenue.isValidVenue(eventVenue)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(EventVenue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        final EventVenue modelVenue \u003d new EventVenue(eventVenue);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (manpowerNeeded \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    EventManpowerNeeded.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!EventManpowerNeeded.isValidEventManpowerNeeded(manpowerNeeded)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(EventManpowerNeeded.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        final EventManpowerNeeded modelManpowerNeeded \u003d new EventManpowerNeeded(manpowerNeeded);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!EventDate.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDate newStartDate \u003d LocalDate.parse(startDate, FORMATTER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        final EventDate modelStartDate \u003d new EventDate(newStartDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!EventDate.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        LocalDate newEndDate \u003d LocalDate.parse(endDate, FORMATTER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        final EventDate modelEndDate \u003d new EventDate(newEndDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        final EventManpowerAllocatedList modelManpowerAllocatedList \u003d new EventManpowerAllocatedList(manpowerList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!EventDateTimeMap.isValidEventDateTimeMap(eventDateTimeMap)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new IllegalValueException(EventDateTimeMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        final EventDateTimeMap modelEventDateTimeMap \u003d new EventDateTimeMap(eventDateTimeMap);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event modelEvent \u003d new Event(modelName, modelVenue,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                modelManpowerNeeded, modelStartDate, modelEndDate, modelManpowerAllocatedList,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                modelEventDateTimeMap, modelTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return modelEvent;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 46,
      "DivineDX": 24,
      "shihaoyap": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonEventBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class JsonEventBookStorage implements EventBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public JsonEventBookStorage() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public JsonEventBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Path getEventBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return readEventBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Similar to {@link #readEventBook()}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Optional\u003cJsonSerializableEventBook\u003e jsonEventBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                filePath, JsonSerializableEventBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!jsonEventBook.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return Optional.of(jsonEventBook.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        saveEventBook(eventBook, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Similar to {@link #saveEventBook(ReadOnlyEventBook)}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(eventBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEventBook(eventBook), filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Employees list contains duplicate employee(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final List\u003cJsonAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given employees."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"employees\") List\u003cJsonAdaptedEmployee\u003e employees) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employees.addAll(employees);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employees.addAll(source.getEmployeeList().stream().map(JsonAdaptedEmployee::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        for (JsonAdaptedEmployee jsonAdaptedEmployee : employees) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            Employee employee \u003d jsonAdaptedEmployee.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            if (addressBook.hasEmployee(employee)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            addressBook.addEmployee(employee);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        int currentMax \u003d addressBook.getEmployeeList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .mapToInt(x -\u003e Integer.parseInt(x.getEmployeeId().id))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .max()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .orElse(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EmployeeId.setNextId(currentMax + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 10,
      "calvincxz": 8,
      "-": 48,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableEventBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * An Immutable EventBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "@JsonRootName(value \u003d \"eventbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "class JsonSerializableEventBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENTS \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public JsonSerializableEventBook(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public JsonSerializableEventBook(ReadOnlyEventBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBook eventBook \u003d new EventBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (eventBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            eventBook.addEvent(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, EventBookStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 4,
      "DivineDX": 5,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private EventBookStorage eventBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, EventBookStorage eventBookStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventBookStorage \u003d eventBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Path getEventBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBookStorage.getEventBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return readEventBook(eventBookStorage.getEventBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eventBookStorage.readEventBook(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        saveEventBook(eventBook, eventBookStorage.getEventBookFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventBookStorage.saveEventBook(eventBook, filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 28,
      "DivineDX": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private List\u003cString\u003e commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private int commandHistoryPointer \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventHandler\u003cKeyEvent\u003e handleArrowKey \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                if (commandHistory.size() \u003c 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                if (event.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    commandTextField.setText(commandHistory.get(commandHistoryPointer));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    if (commandHistoryPointer \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        commandHistoryPointer--;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                } else if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    commandTextField.setText(commandHistory.get(commandHistoryPointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    if (commandHistoryPointer \u003c commandHistory.size() - 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        commandHistoryPointer++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, handleArrowKey);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            commandHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            commandHistoryPointer \u003d commandHistory.size() - 1; //resets pointer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 38,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DateCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * An UI component that displays information of a {@code DistinctDate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DateCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String FXML \u003d \"DateListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public final DistinctDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label dateLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label eventsLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DateCard(DistinctDate distinctDate, int displayedIndex, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.date \u003d distinctDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.index \u003d displayedIndex - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        dateLabel.setText(date.getDate().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        eventsLabel.setText(generateString(distinctDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e eventHandler \u003d new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            public void handle(MouseEvent e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                mainWindow.handleEventFetch(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        cardPane.addEventFilter(MouseEvent.MOUSE_CLICKED, eventHandler);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Generates a string output based on the list of events inside the DistinctDate Object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @param date contains a list of events that i used to generate the string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @return a string of the information of the events inside the object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private String generateString(DistinctDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        List\u003cEvent\u003e list \u003d date.getListOfEvents();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        String outputString \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            Event currentEvent \u003d list.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            String eventDesc \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (currentEvent.getManpowerAllocatedList().toString().length() \u003c 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                String manpowerList \u003d \"No Allocated Staff\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                eventDesc \u003d (i + 1) + \") Event Name: \" + currentEvent.getName().toString()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        + \"  Venue: \" + currentEvent.getVenue().toString() + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        + \"Current Manpower List (ID) : \" + manpowerList + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                eventDesc \u003d (i + 1) + \") Event Name: \" + currentEvent.getName().toString()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        + \"  Venue: \" + currentEvent.getVenue().toString() + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        + \"Current Manpower List (ID) : \" + currentEvent.getManpowerAllocatedList().toString() + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            outputString \u003d outputString + eventDesc + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        DateCard card \u003d (DateCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return index.equals(card.index)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u0026\u0026 date.equals(card.date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 1,
      "shihaoyap": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DateWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * New Window to display the newly generated List of DistinctDate Objects"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DateWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FetchEventWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String FXML \u003d \"DateWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private ListView\u003cDistinctDate\u003e dateListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates a new DateWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param root Stage to use as the root of the DateWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DateWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ObservableList\u003cDistinctDate\u003e dateList \u003d logic.getEventDistinctDateList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        dateListView.setItems(dateList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        dateListView.setCellFactory(listView -\u003e new DateListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Creates a new DateWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public DateWindow(Logic logic) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Shows the Date window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        logger.fine(\"Showing generated schedule - all dates and corresponding events.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Returns true if the date window is currently being shown."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Hides the date window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Focuses on the date window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DistinctDate} using a {@code DateCard}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    class DateListViewCell extends ListCell\u003cDistinctDate\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        protected void updateItem(DistinctDate date, boolean empty) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            super.updateItem(date, empty);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (empty || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                setGraphic(new DateCard(date, getIndex() + 1, null).getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 4,
      "shihaoyap": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmployeeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYEE_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.DeallocateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.ManualAllocateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * An UI component that displays information of a {@code Employee}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static final String FXML \u003d \"EmployeeListCard.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String FETCH_WINDOW_FXML \u003d \"EmployeeListCardForFetch.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public final Employee employee;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ErrorWindow errorWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private ImageView imgBox;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public EmployeeCard(Employee employee, int displayedIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employee \u003d employee;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (employee.getEmployeeGender().gender.equals(\"male\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            Image image \u003d new Image(\"/images/maleEmployee.png\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            imgBox.setImage(image);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            Image image \u003d new Image(\"/images/femaleEmployee.png\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            imgBox.setImage(image);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        name.setText(employee.getEmployeeName().fullName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        phone.setText(employee.getEmployeePhone().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        address.setText(employee.getEmployeeAddress().value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        email.setText(employee.getEmployeeEmail().value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        employee.getTags().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EmployeeCard(Employee employee, int displayedIndex, String linkToFxml) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        super(linkToFxml);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.employee \u003d employee;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        name.setText(employee.getEmployeeName().fullName + \" ID: \" + employee.getEmployeeId().id); //for debug"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        phone.setText(employee.getEmployeePhone().value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        address.setText(employee.getEmployeeAddress().value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        email.setText(employee.getEmployeeEmail().value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employee.getTags().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EmployeeCard(Employee employee, int displayedIndex, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this(employee, displayedIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.index \u003d displayedIndex - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e eventHandler \u003d new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        mainWindow.handleEmployeeFetch(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        cardPane.addEventFilter(MouseEvent.MOUSE_CLICKED, eventHandler);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EmployeeCard(Employee employee, int displayedIndex, Logic logic, Event event, int eventOneBasedIndex,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                         FetchEventWindow fetchWindow, boolean isAllocate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this(employee, displayedIndex, FETCH_WINDOW_FXML);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e eventHandler \u003d new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            if (isAllocate) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                logic.execute(ManualAllocateCommand.COMMAND_WORD + \" \" + eventOneBasedIndex"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                        + \" \" + PREFIX_EMPLOYEE_ID + employee.getEmployeeId());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                logic.execute(DeallocateCommand.COMMAND_WORD + \" \" + eventOneBasedIndex"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                        + \" \" + PREFIX_EMPLOYEE_ID + employee.getEmployeeId());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            fetchWindow.updateCards();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            if (errorWindow !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                errorWindow.hide();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            errorWindow \u003d new ErrorWindow(e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                            errorWindow.show();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        cardPane.addEventFilter(MouseEvent.MOUSE_CLICKED, eventHandler);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        if (!(other instanceof EmployeeCard)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeCard card \u003d (EmployeeCard) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                \u0026\u0026 employee.equals(card.employee);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 13,
      "calvincxz": 58,
      "DivineDX": 22,
      "-": 59,
      "shihaoyap": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ErrorWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Controller for a error window"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class ErrorWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ErrorWindow.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String FXML \u003d \"ErrorWindow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Label errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates a new ErrorWindow."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param root Stage to use as the root of the ErrorWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * @param message of the exception to show in the ErrorWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ErrorWindow(Stage root, String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        errorMessage.setText(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Creates a new ErrorWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ErrorWindow(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this(new Stage(), message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Shows the error window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        logger.fine(\"Showing error message.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if the error window is currently being shown."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Hides the error window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Label manpowerCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventCard(Event event, int displayedIndex, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.index \u003d displayedIndex - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        name.setText(event.getName().eventName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        venue.setText(event.getVenue().venue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        manpowerCount.setText(\"Manpower: \" + event.getCurrentManpowerCount() + \" / \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                + event.getManpowerNeeded().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        startDate.setText(event.getStartDate() + \" to \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                + event.getEndDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        event.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e eventHandler \u003d new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        mainWindow.handleEventFetch(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        cardPane.addEventFilter(MouseEvent.MOUSE_CLICKED, eventHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 89,
      "DivineDX": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FetchEmployeeWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.processor.DistinctDatesProcessor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "//import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * New Window to display the newly generated List of DistinctDate Objects"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FetchEmployeeWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FetchEmployeeWindow.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static final String FXML \u003d \"FetchEmployeeWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private ListView\u003cDistinctDate\u003e dateListView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private AnchorPane employeeCard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private ImageView imgBox;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates a new FetchEmployeeWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param root Stage to use as the root of the FetchEmployeeWindow."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private FetchEmployeeWindow(Stage root, Logic logic, Integer index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employee \u003d logic.getFilteredEmployeeList().get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (employee.getEmployeeGender().gender.equals(\"male\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            Image image \u003d new Image(\"/images/maleEmployee.png\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            imgBox.setImage(image);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            Image image \u003d new Image(\"/images/femaleEmployee.png\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            imgBox.setImage(image);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ObservableList\u003cEvent\u003e eventDateList \u003d logic.getFullEventList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        updateCards(employee, eventDateList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        name.setText(employee.getEmployeeName().fullName + \" ID: \" + employee.getEmployeeId().id); //for debug"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        phone.setText(employee.getEmployeePhone().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        address.setText(employee.getEmployeeAddress().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        email.setText(employee.getEmployeeEmail().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        employee.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates a new FetchEmployeeWindow."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FetchEmployeeWindow(Logic logic, Integer index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this(new Stage(), logic, index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Updates the DistinctDate Cards."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private void updateCards(Employee employee, ObservableList\u003cEvent\u003e eventDateList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cDistinctDate\u003e dateList \u003d DistinctDatesProcessor.generateEmployeesDistinctDateList(eventDateList, employee);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ObservableList\u003cDistinctDate\u003e observableDateList \u003d FXCollections.observableList(dateList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dateListView.setItems(observableDateList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dateListView.setCellFactory(listView -\u003e new DateListViewCell());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Shows the FetchEmployeeWindow."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        logger.fine(\"Showing generated employee schedule - all dates and corresponding events.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns true if the FetchEmployeeWindow is currently being shown."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Hides the FetchEmployeeWindow."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Focuses on the FetchEmployeeWindow."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DistinctDate} using a {@code DateCard}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    class DateListViewCell extends ListCell\u003cDistinctDate\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        protected void updateItem(DistinctDate date, boolean empty) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            super.updateItem(date, empty);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (empty || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                setGraphic(new DateCard(date, getIndex() + 1, null).getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 111,
      "shihaoyap": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FetchEventWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.AutoAllocateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.DeallocateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Controller for a fetch page"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FetchEventWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FetchEventWindow.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private static final String FXML \u003d \"FetchEventWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final int eventOneBasedIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Integer index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ObservableList\u003cEmployee\u003e employeeList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ObservableList\u003cEvent\u003e filteredEventList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ErrorWindow errorWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ListView\u003cEmployee\u003e personListView;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ListView\u003cEmployee\u003e eventListView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private TextArea eventDescription;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Text currentListHeader;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Text eventHeader;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Text availableListHeader;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Button allocateButton;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Button freeButton;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates a new FetchEventWindow."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param root Stage to use as the root of the FetchEventWindow."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FetchEventWindow(Stage root, Logic logic, Integer index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.eventOneBasedIndex \u003d index + 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        employeeList \u003d logic.getFullEmployeeList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        filteredEventList \u003d logic.getFilteredEventList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        updateCards();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e handleAllocate \u003d new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            public void handle(MouseEvent e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    logic.execute(AutoAllocateCommand.COMMAND_WORD + \" \" + eventOneBasedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    updateCards();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                } catch (CommandException | ParseException ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    if (errorWindow !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        errorWindow.hide();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    errorWindow \u003d new ErrorWindow(ex.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    errorWindow.show();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e handleFree \u003d new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            public void handle(MouseEvent e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                int oneBasedIndex \u003d index + 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    logic.execute(DeallocateCommand.COMMAND_WORD + \" \" + oneBasedIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    updateCards();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                } catch (CommandException | ParseException ex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    if (errorWindow !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        errorWindow.hide();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    errorWindow \u003d new ErrorWindow(ex.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    errorWindow.show();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        allocateButton.addEventFilter(MouseEvent.MOUSE_CLICKED, handleAllocate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        freeButton.addEventFilter(MouseEvent.MOUSE_CLICKED, handleFree);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates a new FetchEventWindow."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FetchEventWindow(Logic logic, Integer index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this(new Stage(), logic, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Updates the EmployeeCard and EventDescriptions."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void updateCards() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        event \u003d filteredEventList.get(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ObservableList\u003cEmployee\u003e employeeListForEvent \u003d getEmployeeListForEvent(event, employeeList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventDescription.setText(event.toStringWithNewLine());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        personListView.setItems(employeeList.filtered(x -\u003e event.isAvailableForEvent(x, filteredEventList)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new AvailablePersonListViewCell(this));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventListView.setItems(employeeListForEvent);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new CurrentPersonListViewCell(this));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Gets the current list of employees for the event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getEmployeeListForEvent(Event event, ObservableList\u003cEmployee\u003e employeeList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ObservableList\u003cEmployee\u003e list \u003d event.getManpowerAllocatedList().getManpowerList().stream()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .flatMap(x -\u003e employeeList.stream().map(y -\u003e y.getEmployeeId().equals(x) ? y : new Employee()))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .filter(employee -\u003e employee.getEmployeeName() !\u003d null)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                .collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Shows the fetch window."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        logger.fine(\"Showing fetched event.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns true if the fetch window is currently being shown."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Hides the fetch window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Focuses on the fetch window."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Employee} using a {@code EmployeeCard}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    class AvailablePersonListViewCell extends ListCell\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        private FetchEventWindow fetchWindow;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        AvailablePersonListViewCell(FetchEventWindow fetchWindow) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            this.fetchWindow \u003d fetchWindow;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        protected void updateItem(Employee employee, boolean empty) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            super.updateItem(employee, empty);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (empty || employee \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setGraphic(new EmployeeCard(employee, getIndex() + 1, logic, event,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        eventOneBasedIndex, fetchWindow, true).getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Employee} using a {@code EmployeeCard}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    class CurrentPersonListViewCell extends ListCell\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        private FetchEventWindow fetchWindow;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        CurrentPersonListViewCell(FetchEventWindow fetchWindow) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            this.fetchWindow \u003d fetchWindow;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        protected void updateItem(Employee employee, boolean empty) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            super.updateItem(employee, empty);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (empty || employee \u003d\u003d null) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setGraphic(new EmployeeCard(employee, getIndex() + 1, logic, event,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        eventOneBasedIndex, fetchWindow, false).getRoot());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 207,
      "DivineDX": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t11-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Panel containing the list of persons and events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class ListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private ListView\u003cEmployee\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public ListPanel(ObservableList\u003cEmployee\u003e employeeList, ObservableList\u003cEvent\u003e eventList, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        personListView.setItems(employeeList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new EmployeeListViewCell(mainWindow));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell(mainWindow));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Employee} using a {@code EmployeeCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    class EmployeeListViewCell extends ListCell\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        private MainWindow mainWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EmployeeListViewCell(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        protected void updateItem(Employee employee, boolean empty) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            super.updateItem(employee, empty);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            if (empty || employee \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                setGraphic(new EmployeeCard(employee, getIndex() + 1, mainWindow).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        private MainWindow mainWindow;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventListViewCell(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                EventCard eventCard \u003d new EventCard(event, getIndex() + 1, mainWindow);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                setGraphic(eventCard.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 6,
      "calvincxz": 36,
      "DivineDX": 9,
      "-": 30,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ListPanel listPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private FetchEventWindow fetchEventWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private FetchEmployeeWindow fetchEmployeeWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private DateWindow dateWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private ScheduleBox scheduleBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private SingleSelectionModel\u003cTab\u003e selectionModel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private StackPane schedulePlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private TabPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        listPanel \u003d new ListPanel(logic.getFilteredEmployeeList(), logic.getFilteredEventList(), this);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        listPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        scheduleBox \u003d new ScheduleBox(logic.getFilteredScheduledEventList(), logic, this);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        schedulePlaceholder.getChildren().add(scheduleBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        selectionModel \u003d tabPanePlaceholder.getSelectionModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Opens the fetch window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void handleEventFetch(Integer index) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (fetchEventWindow !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEventWindow.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        fetchEventWindow \u003d new FetchEventWindow(logic, index);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        fetchEventWindow.getRoot().getScene().getStylesheets().add(\"view/FetchWindowTheme.css\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!fetchEventWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEventWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEventWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Opens the FetchEmployeeWindow or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void handleEmployeeFetch(Integer index) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (fetchEmployeeWindow !\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEmployeeWindow.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        fetchEmployeeWindow \u003d new FetchEmployeeWindow(logic, index);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        fetchEmployeeWindow.getRoot().getScene().getStylesheets().add(\"view/FetchWindowTheme.css\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (!fetchEmployeeWindow.isShowing()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEmployeeWindow.show();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEmployeeWindow.focus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Opens the date window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void generateDate() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (dateWindow !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            dateWindow.hide();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        dateWindow \u003d new DateWindow(logic);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        dateWindow.getRoot().getScene().getStylesheets().add(\"view/FetchWindowTheme.css\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (!dateWindow.isShowing()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            dateWindow.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            dateWindow.focus();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (fetchEventWindow !\u003d null) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fetchEventWindow.hide();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public seedu.address.ui.ListPanel getListPanel() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            if (commandResult.getFetch() !\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                if (commandResult.getType().equals(\"employee\")) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    handleEmployeeFetch(commandResult.getFetch());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                if (commandResult.getType().equals(\"event\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    handleEventFetch(commandResult.getFetch());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (commandResult.getType().equals(\"Generate\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                generateDate();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (commandResult.getType().equals(\"Schedule\")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                selectionModel.select(1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                scheduleBox.setLabelText(commandResult.getUiChange());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (!commandResult.getType().equals(\"Schedule\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                selectionModel.select(0);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            /*if (commandResult.isFetch()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                listPanelForFetch \u003d new ListPanelForFetch(logic.getFilteredEmployeeList(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        logic.getFilteredEventList(), logic.getFilteredEventList().get(0));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                listPanelPlaceholder.getChildren().set(0, listPanelForFetch.getRoot());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                listPanel \u003d new ListPanel(logic.getFilteredEmployeeList(), logic.getFilteredEventList());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                listPanelPlaceholder.getChildren().set(0, listPanel.getRoot());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 29,
      "DivineDX": 37,
      "-": 186,
      "shihaoyap": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.DatePicker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForDateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForYearMonthCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.GenerateScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * A ui for the Schedule Tab that is displayed on the secondary Tab of the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class ScheduleBox extends Tabs\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String FXML \u003d \"Schedule.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private String[] monthName \u003d {\"January\", \"February\", \"March\", \"April\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                  \"May\", \"June\", \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                  \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private int currentMonthInFocus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private int currentYearInFocus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private ListView\u003cEvent\u003e eventScheduleListView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label dateLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label monthLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private Label currentMonthYear;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private DatePicker datePicker;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public ScheduleBox(ObservableList\u003cEvent\u003e eventList, Logic logic, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        super(FXML, mainWindow, logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        eventScheduleListView.setItems(eventList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        eventScheduleListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        dateLabel.setText(\"Select Date to View Events\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        monthLabel.setText(\"Select Month to View Events\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        currentMonthInFocus \u003d cal.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        currentYearInFocus \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        currentMonthYear.setText(monthName[currentMonthInFocus] + \",\" + currentYearInFocus);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1, mainWindow).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * Inputs {@code datePicker.getVaue()} that displays the events for that specific date"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * with an {@code EventCard}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private void handlePickDate() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        LocalDate currentDate \u003d datePicker.getValue();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        currentMonthYear.setText(monthName[currentDate.getMonth().getValue() - 1] + \",\" + currentDate.getYear());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        mainWindow.executeCommand(DisplayScheduleForDateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                + \" \" + CliSyntax.PREFIX_DATE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                + datePicker.getValue().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * decreases the current Month and year that is in focus if applicable. Displays all the events that"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * are happening in that current Month and Year."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException thrown when input format is in the wrong order or format and could not be parsed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws CommandException thrown when input format is in the wrong format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private void onPrevClickButton() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        datePicker.getEditor().clear();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (currentMonthInFocus \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentYearInFocus--;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthInFocus \u003d 11;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthInFocus--;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (currentMonthInFocus \u003c 9) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            mainWindow.executeCommand(DisplayScheduleForYearMonthCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + \" \" + CliSyntax.PREFIX_YEAR_MONTH + \"0\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + (currentMonthInFocus + 1) + \"/\" + currentYearInFocus);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthYear.setText(monthName[currentMonthInFocus] + \",\" + currentYearInFocus);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            mainWindow.executeCommand(DisplayScheduleForYearMonthCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + \" \" + CliSyntax.PREFIX_YEAR_MONTH + (currentMonthInFocus + 1) + \"/\" + currentYearInFocus);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthYear.setText(monthName[currentMonthInFocus] + \",\" + currentYearInFocus);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * increases the current Month and year that is in focus if applicable. Displays all the events that"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * are happening in that current Month and Year."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException thrown when input format is in the wrong order or format and could not be parsed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws CommandException thrown when input format is in the wrong format."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private void onNextClickButton() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        datePicker.getEditor().clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (currentMonthInFocus \u003d\u003d 11) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentYearInFocus++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthInFocus \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthInFocus++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (currentMonthInFocus \u003c 9) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            mainWindow.executeCommand(DisplayScheduleForYearMonthCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + \" \" + CliSyntax.PREFIX_YEAR_MONTH + \"0\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + (currentMonthInFocus + 1) + \"/\" + currentYearInFocus);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthYear.setText(monthName[currentMonthInFocus] + \",\" + currentYearInFocus);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            mainWindow.executeCommand(DisplayScheduleForYearMonthCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + \" \" + CliSyntax.PREFIX_YEAR_MONTH + (currentMonthInFocus + 1) + \"/\" + currentYearInFocus);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthYear.setText(monthName[currentMonthInFocus] + \",\" + currentYearInFocus);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * generates a new window which will display a new List of date object and all the events which occurs on"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * the corresponding dates."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws ParseException thrown when input format is in the wrong order or format and could not be parsed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @throws CommandException thrown when input format is in the wrong format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private void generateSchedule() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        mainWindow.executeCommand(GenerateScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void setLabelText(String text) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        if (text.length() \u003e 7) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.parse(text);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthYear.setText(monthName[currentDate.getMonth().getValue() - 1] + \",\" + currentDate.getYear());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            datePicker.getEditor().clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            YearMonth currentYearMonth \u003d YearMonth.parse(text);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            currentMonthYear.setText(monthName[currentYearMonth.getMonth().getValue() - 1]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    + \",\" + currentYearMonth.getYear());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            datePicker.getEditor().clear();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 1,
      "shihaoyap": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Tabs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * Represents a distinct part of the UI - in particular Tabs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public abstract class Tabs\u003cT extends Node\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    protected MainWindow mainWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    protected Tabs(String fxml, MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 1,
      "-": 85,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*-fx-background-color: derive(#0d4178, 20%);*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    background-color: #1d1d1d; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: linear-gradient(to right, #292E49 0%, #536976 100%);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: linear-gradient(to right, #536976 0%, #292E49 100%);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%); /*color for command line input*/"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/*Solution below adapted from https://stackoverflow.com/questions/19788661/change-javafx-tab-default-look*/"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 1,
      "DivineDX": 40,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/DateListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cLabel fx:id\u003d\"dateLabel\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c!--            \u003cLabel fx:id\u003d\"eventId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventId\" /\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventsLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventdetails\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 37
    }
  },
  {
    "path": "src/main/resources/view/DateWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"DateWindow\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cVBox prefHeight\u003d\"485.0\" prefWidth\u003d\"478.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"leftAnchorPane\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cText fx:id\u003d\"availableListHeader\" fill\u003d\"WHITE\" layoutX\u003d\"13.0\" layoutY\u003d\"14.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Generated Schedule : Display every date that has an event\" wrappingWidth\u003d\"392.5368347167969\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cListView fx:id\u003d\"dateListView\" prefHeight\u003d\"509.0\" prefWidth\u003d\"239.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 36
    }
  },
  {
    "path": "src/main/resources/view/EmployeeListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"101.0\" prefWidth\u003d\"244.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "   \u003cBorderPane prefHeight\u003d\"96.0\" prefWidth\u003d\"90.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003ccenter\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003cImageView fx:id\u003d\"imgBox\" fitHeight\u003d\"87.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003c/center\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "   \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"136.0\" prefWidth\u003d\"175.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeeID\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeeGender\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeePosition\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 3,
      "DivineDX": 15,
      "-": 28,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/main/resources/view/EmployeeListCardForFetch.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeeID\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeeGender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$employeePosition\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 36
    }
  },
  {
    "path": "src/main/resources/view/ErrorWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Error\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003cImage url\u003d\"@/images/error_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"132.0\" prefWidth\u003d\"325.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003cLabel fx:id\u003d\"errorMessage\" text\u003d\"Label\" textFill\u003d\"#da0d0d\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 37
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"101.0\" prefWidth\u003d\"244.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003cBorderPane prefHeight\u003d\"96.0\" prefWidth\u003d\"90.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003ccenter\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003cImageView fitHeight\u003d\"87.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                  \u003cImage url\u003d\"@../images/event.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003c/center\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"136.0\" prefWidth\u003d\"175.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cLabel fx:id\u003d\"manpowerCount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$manpowerCount\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 37,
      "DivineDX": 21
    }
  },
  {
    "path": "src/main/resources/view/FetchEmployeeWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Employee Details\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003cVBox prefHeight\u003d\"485.0\" prefWidth\u003d\"478.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"EmployeeCard\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"155.0\" prefWidth\u003d\"478.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cImageView fx:id\u003d\"imgBox\" fitHeight\u003d\"124.0\" fitWidth\u003d\"166.0\" layoutX\u003d\"14.0\" layoutY\u003d\"8.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cVBox layoutX\u003d\"202.0\" layoutY\u003d\"22.0\" prefHeight\u003d\"96.0\" prefWidth\u003d\"262.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cFlowPane fx:id\u003d\"tags\" prefHeight\u003d\"0.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cLabel fx:id\u003d\"address\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cLabel fx:id\u003d\"email\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003c/stylesheets\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"58.0\" prefWidth\u003d\"478.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cLabel prefHeight\u003d\"47.0\" prefWidth\u003d\"482.0\" style\u003d\"-fx-background-color: #1d1d1d;\" text\u003d\"         List of all dates and events that employee is working for :\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cListView fx:id\u003d\"dateListView\" prefHeight\u003d\"319.0\" prefWidth\u003d\"478.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 23,
      "shihaoyap": 45
    }
  },
  {
    "path": "src/main/resources/view/FetchEventWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Fetch\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"600.0\" prefWidth\u003d\"700.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"485.0\" prefWidth\u003d\"478.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"leftAnchorPane\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"247.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                              \u003cText fx:id\u003d\"availableListHeader\" fill\u003d\"WHITE\" layoutX\u003d\"22.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"List of Available Employees:\" wrappingWidth\u003d\"231.536865234375\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                                    \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                 \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        \u003cListView fx:id\u003d\"personListView\" prefHeight\u003d\"575.0\" prefWidth\u003d\"247.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"485.0\" prefWidth\u003d\"685.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003cAnchorPane fx:id\u003d\"rightAnchorPane\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"258.0\" prefWidth\u003d\"451.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cText fx:id\u003d\"currentListHeader\" fill\u003d\"WHITE\" layoutX\u003d\"9.0\" layoutY\u003d\"228.76289062500027\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Current Employee list for Event:\" wrappingWidth\u003d\"218.33665466308594\" AnchorPane.bottomAnchor\u003d\"9.323437499999727\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                    \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cText fx:id\u003d\"eventHeader\" fill\u003d\"WHITE\" layoutX\u003d\"25.0\" layoutY\u003d\"23.58203125\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Event description:\" wrappingWidth\u003d\"336.5366668701172\" AnchorPane.topAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                                    \u003cFont name\u003d\"System Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cTextArea fx:id\u003d\"eventDescription\" layoutX\u003d\"7.0\" layoutY\u003d\"32.0\" prefHeight\u003d\"158.0\" prefWidth\u003d\"426.0\" AnchorPane.topAnchor\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cButton fx:id\u003d\"allocateButton\" layoutX\u003d\"279.0\" layoutY\u003d\"200.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"27.0\" prefWidth\u003d\"71.0\" text\u003d\"Allocate\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cButton fx:id\u003d\"freeButton\" layoutX\u003d\"367.0\" layoutY\u003d\"200.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"27.0\" prefWidth\u003d\"67.0\" text\u003d\"Free\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                        \u003cListView fx:id\u003d\"eventListView\" prefHeight\u003d\"376.0\" prefWidth\u003d\"454.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 62,
      "DivineDX": 6
    }
  },
  {
    "path": "src/main/resources/view/FetchWindowTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*-fx-background-color: derive(#0d4178, 20%);*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    background-color: #1d1d1d;  /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "#leftAnchorPane{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "#rightAnchorPane{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "#eventListView {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "#personListView {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "#eventDescription{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-control-inner-background:#80a4e8;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-text-fill: #4104bd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-highlight-fill: #80a4e8;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-highlight-text-fill: #f0e051;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: linear-gradient(to right, #292E49 0%, #536976 100%);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-background-color: linear-gradient(to right, #536976 0%, #292E49 100%);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 73,
      "DivineDX": 10
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003cHBox maxHeight\u003d\"500.0\" prefHeight\u003d\"450.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 5,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/ListPanelForFetch.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003cHBox prefHeight\u003d\"410.0\" prefWidth\u003d\"507.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" prefHeight\u003d\"410.0\" prefWidth\u003d\"0.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "   \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "             \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"102.0\" prefWidth\u003d\"270.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                     \u003cText fx:id\u003d\"eventDescription\" fill\u003d\"#1c1919\" layoutY\u003d\"27.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" wrappingWidth\u003d\"221.3367156982422\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "               \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "          \u003cListView fx:id\u003d\"eventListView\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"AddMin+\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPanePlaceholder\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cTab text\u003d\"Main\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                          \u003cVBox styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                               \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cTab text\u003d\"Schedule\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                      \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                               \u003cVBox styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"schedulePlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" prefHeight\u003d\"0.0\" prefWidth\u003d\"202.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 6,
      "-": 46,
      "shihaoyap": 38
    }
  },
  {
    "path": "src/main/resources/view/Schedule.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003cHBox prefHeight\u003d\"536.0\" prefWidth\u003d\"837.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cLabel fx:id\u003d\"dateLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$Date\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cDatePicker fx:id\u003d\"datePicker\" onAction\u003d\"#handlePickDate\" GridPane.halignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cLabel fx:id\u003d\"monthLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$Month\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onPrevClickButton\" text\u003d\"Previous\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentMonthYear\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$currentMonthYear\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onNextClickButton\" text\u003d\"Next\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cButton fx:id\u003d\"generateButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#generateSchedule\" text\u003d\"Generate Schedule\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cLabel fx:id\u003d\"monthLabel1\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Generate Schedule\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                  \u003cListView fx:id\u003d\"eventScheduleListView\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@DarkTheme.css\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.storage.JsonEventBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        JsonEventBookStorage eventBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new JsonEventBookStorage(temporaryFolder.resolve(\"eventBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        String deleteCommand \u003d \"delete_em 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        JsonEventBookStorage eventBookStorage \u003d new JsonEventBookStorage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee expectedEmployee \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.addEmployee(expectedEmployee);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        //assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEmployeeList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        //assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 13,
      "DivineDX": 4,
      "-": 148,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AutoAllocateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.allocate.AutoAllocateCommand.MESSAGE_ALLOCATE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.allocate.AutoAllocateCommand.createEventAfterManpowerAllocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.AutoAllocateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.employee.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * {@code AutoAllocateCommandTest}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class AutoAllocateCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyAddressBook initialData \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyEventBook initialEventData \u003d SampleDataUtil.getSampleEventBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialEventData, new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Integer sampleManpowerCountToAdd \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private final Integer sampleManpowerNeeded \u003d 5;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Set\u003cTag\u003e tagList \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        tagList.add(new Tag(\"male\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                sampleManpowerCountToAdd, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                initialEventData.getEventList().get(0).getName().eventName, sampleManpowerCountToAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(autoAllocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_onlyTagsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        tagList.add(new Tag(\"male\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT, null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                tagList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                initialEventData.getEventList().get(0).getName().eventName, sampleManpowerNeeded);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(autoAllocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_onlyManpowerCountToAddSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT, sampleManpowerCountToAdd,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                tagList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_SUCCESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                initialEventData.getEventList().get(0).getName().eventName, sampleManpowerCountToAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(autoAllocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT, null,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                tagList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_SUCCESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                initialEventData.getEventList().get(0).getName().eventName, sampleManpowerNeeded);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(autoAllocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer outOfBoundInteger \u003d initialEventData.getEventList().size() + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index invalidIndex \u003d Index.fromOneBased(outOfBoundInteger);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(invalidIndex,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                sampleManpowerCountToAdd, tagList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(autoAllocateCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidManpowerCountUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer invalidManpowerCount \u003d 20;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                invalidManpowerCount, tagList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(autoAllocateCommand, model, Messages.MESSAGE_MANPOWER_COUNT_EXCEEDED);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_fullManpowerCountUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToEdit \u003d initialEventData.getEventList().get(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e availableEmployeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (int i \u003d 0; i \u003c eventToEdit.getManpowerNeeded().value; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            availableEmployeeList.add(initialData.getEmployeeList().get(i));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEvent \u003d createEventAfterManpowerAllocation(eventToEdit, availableEmployeeList, 5);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToEdit, newEvent);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                1, tagList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(autoAllocateCommand, model, Messages.MESSAGE_EVENT_FULL_MANPOWER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_insufficientManpowerCountUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand autoAllocateCommand \u003d new AutoAllocateCommand(INDEX_SECOND_EVENT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                null, tagList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(autoAllocateCommand, model, Messages.MESSAGE_INSUFFICIENT_MANPOWER_COUNT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        final AutoAllocateCommand standardCommand \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                sampleManpowerCountToAdd, tagList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand commandWithSameValues \u003d new AutoAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                sampleManpowerCountToAdd, tagList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new AutoAllocateCommand(INDEX_SECOND_EVENT,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                sampleManpowerCountToAdd, tagList)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer differentManpowerCountToAdd \u003d 3;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new AutoAllocateCommand(INDEX_SECOND_EVENT,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                differentManpowerCountToAdd, tagList)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Set\u003cTag\u003e differentTagList \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        differentTagList.add(new Tag(\"something\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new AutoAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                sampleManpowerCountToAdd, differentTagList)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANPOWER_TO_ADD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR_MONTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    //valid employee fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    //valid date fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String VALID_DATE_1 \u003d \" \" + PREFIX_DATE + \"20/10/2019\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String VALID_DATE_2 \u003d \" \" + PREFIX_DATE + \"10/10/2021\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String VALID_YEAR_MONTH_1 \u003d \" \" + PREFIX_YEAR_MONTH + \"10/2019\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String VALID_YEAR_MONTH_2 \u003d \" \" + PREFIX_YEAR_MONTH + \"01/2019\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    //invalid date fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_DATE_1 \u003d \" \" + PREFIX_DATE + \"2019/10/29\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_DATE_2 \u003d \" \" + PREFIX_DATE + \"20 Aug 2019\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_DATE_3 \u003d \" \" + PREFIX_DATE + \"date\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_DATE_4 \u003d \" \" + PREFIX_DATE + \"10/12\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_YEAR_MONTH_1 \u003d \" \" + PREFIX_YEAR_MONTH + \"1/2019\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_YEAR_MONTH_2 \u003d \" \" + PREFIX_YEAR_MONTH + \"2019/10\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_YEAR_MONTH_3 \u003d \" \" + PREFIX_YEAR_MONTH + \"2019 August\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public static final String INVALID_YEAR_MONTH_4 \u003d \" \" + PREFIX_YEAR_MONTH + \"August 2019\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    //valid event fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String VALID_NAME_PARTY \u003d \"party\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String VALID_NAME_MUSICAL \u003d \"musical\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String VALID_VENUE_NUS \u003d \"NUS\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String VALID_MANPOWER_COUNT_TO_ADD \u003d \"2\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String VALID_TAG_FUN \u003d \"fun\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String NAME_DESC_PARTY \u003d \" \" + PREFIX_NAME + VALID_NAME_PARTY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String MANPOWER_COUNT_DESC \u003d \" \" + PREFIX_MANPOWER_TO_ADD + VALID_MANPOWER_COUNT_TO_ADD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String INVALID_MANPOWER_DESC \u003d \" \" + PREFIX_MANPOWER_TO_ADD + \"James\u0026\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final EditCommand.EditEmployeeDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final EditCommand.EditEmployeeDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            assertEquals(actualModel, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * - the address book, filtered employee list and selected employee in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cEmployee\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the employee at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employee \u003d model.getFilteredEmployeeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        final String[] splitName \u003d employee.getEmployeeName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        model.updateFilteredEmployeeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(1, model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * {@code model}\u0027s event book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static void showEventAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        final String[] splitName \u003d event.getName().eventName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertEquals(1, model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 3,
      "calvincxz": 25,
      "DivineDX": 9,
      "-": 118,
      "shihaoyap": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.commands.general.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.logic.commands.general.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ManualAllocateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.allocate.AutoAllocateCommand.createEventAfterManpowerAllocation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.allocate.ManualAllocateCommand.MESSAGE_ALLOCATE_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.ManualAllocateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.employee.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * {@code ManualAllocateCommandTest}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class ManualAllocateCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyAddressBook initialData \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyEventBook initialEventData \u003d SampleDataUtil.getSampleEventBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialEventData, new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand manualAllocateCommand \u003d new ManualAllocateCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                initialData.getEmployeeList().get(0).getEmployeeName(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                initialEventData.getEventList().get(0).getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(manualAllocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer outOfBoundInteger \u003d initialEventData.getEventList().size() + 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index invalidIndex \u003d Index.fromOneBased(outOfBoundInteger);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand autoAllocateCommand \u003d new ManualAllocateCommand(invalidIndex, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(autoAllocateCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidEmployeeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer outOfBoundInteger \u003d initialData.getEmployeeList().size() + 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index invalidIndex \u003d Index.fromOneBased(outOfBoundInteger);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand manualAllocateCommand \u003d new ManualAllocateCommand(INDEX_FIRST_EVENT, invalidIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(manualAllocateCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_fullManpowerCountUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToEdit \u003d initialEventData.getEventList().get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e availableEmployeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (int i \u003d 0; i \u003c eventToEdit.getManpowerNeeded().value; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            availableEmployeeList.add(initialData.getEmployeeList().get(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEvent \u003d createEventAfterManpowerAllocation(eventToEdit, availableEmployeeList, 5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToEdit, newEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer validInteger \u003d 6;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(validInteger);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand manualAllocateCommand \u003d new ManualAllocateCommand(INDEX_FIRST_EVENT, validIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(manualAllocateCommand, model, Messages.MESSAGE_EVENT_FULL_MANPOWER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_unavailableManpowerUnfilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToEdit \u003d initialEventData.getEventList().get(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        List\u003cEmployee\u003e availableEmployeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (int i \u003d 0; i \u003c eventToEdit.getManpowerNeeded().value - 1; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            availableEmployeeList.add(initialData.getEmployeeList().get(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event newEvent \u003d createEventAfterManpowerAllocation(eventToEdit, availableEmployeeList, 4);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        model.setEvent(eventToEdit, newEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer validInteger \u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(validInteger);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand manualAllocateCommand \u003d new ManualAllocateCommand(INDEX_FIRST_EVENT, validIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(manualAllocateCommand, model, Messages.MESSAGE_UNAVAILABLE_MANPOWER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        final ManualAllocateCommand standardCommand \u003d new ManualAllocateCommand(INDEX_FIRST_EVENT, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ManualAllocateCommand commandWithSameValues \u003d new ManualAllocateCommand(INDEX_FIRST_EVENT, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different eventIndex -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new ManualAllocateCommand(INDEX_SECOND_EVENT, INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different employeeIndex -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(standardCommand.equals(new ManualAllocateCommand(INDEX_FIRST_EVENT, INDEX_SECOND_PERSON)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "calvincxz": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee validEmployee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.addEmployee(validEmployee);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertCommandSuccess(new AddCommand(validEmployee), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validEmployee), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employeeInList \u003d model.getAddressBook().getEmployeeList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertCommandFailure(new AddCommand(employeeInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 4,
      "DivineDX": 3,
      "-": 37,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.distinctdate.DistinctDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee validEmployee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEmployee).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEmployee), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(Arrays.asList(validEmployee), modelStub.employeesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee validEmployee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEmployee);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validEmployee);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public ObservableList\u003cEmployee\u003e getFullListEmployees() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void deleteEmployee(Employee target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public ObservableList\u003cDistinctDate\u003e getEventDistinctDatesList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void updateEmployeeDistinctDateList(List\u003cDistinctDate\u003e list) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void updateEventDistinctDatesList(List\u003cDistinctDate\u003e list) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public Path getEventBookFilePath() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public void setEventBookFilePath(Path eventBookFilePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public void setEventBook(ReadOnlyEventBook eventBook) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public ReadOnlyEventBook getEventBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFullListEvents() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredScheduledEventList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        public void updateFilteredScheduledEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public ObservableList\u003cDistinctDate\u003e getEmployeeDistinctDatesList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * A Model stub that contains a single employee."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private final Employee employee;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        ModelStubWithPerson(Employee employee) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employee \u003d employee;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return this.employee.isSameEmployee(employee);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * A Model stub that always accept the employee being added."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        final ArrayList\u003cEmployee\u003e employeesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return employeesAdded.stream().anyMatch(employee::isSameEmployee);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            employeesAdded.add(employee);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 18,
      "calvincxz": 52,
      "DivineDX": 32,
      "-": 166,
      "shihaoyap": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, employeeToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, employeeToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEmployeeList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        model.updateFilteredEmployeeList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(model.getFilteredEmployeeList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 3,
      "calvincxz": 2,
      "DivineDX": 9,
      "-": 94,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedEmployee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedEmployee).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.setEmployee(model.getFilteredEmployeeList().get(0), editedEmployee);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee lastEmployee \u003d model.getFilteredEmployeeList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastEmployee);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedEmployee \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.setEmployee(lastEmployee, editedEmployee);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditEmployeeDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee editedEmployee \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employeeInFilteredList \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedEmployee \u003d new PersonBuilder(employeeInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.setEmployee(model.getFilteredEmployeeList().get(0), editedEmployee);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee firstEmployee \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstEmployee).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // edit employee in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Employee employeeInList \u003d model.getAddressBook().getEmployeeList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new EditPersonDescriptorBuilder(employeeInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEmployeeList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor copyDescriptor \u003d new EditEmployeeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 10,
      "calvincxz": 2,
      "DivineDX": 19,
      "-": 140,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/EditEmployeeDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EditEmployeeDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptorWithSameValues \u003d new EditEmployeeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "DivineDX": 4,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "DivineDX": 5,
      "-": 76,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/employee/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/event/FetchEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " * {@code FetchEventCommandTest}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "class FetchEventCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyAddressBook initialData \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyEventBook initialEventData \u003d SampleDataUtil.getSampleEventBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialEventData, new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchCommand \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToFetch \u003d initialEventData.getEventList().get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expectedMessage \u003d String.format(FetchEventCommand.MESSAGE_SUCCESS, eventToFetch.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(fetchCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Integer outOfBoundInteger \u003d initialEventData.getEventList().size() + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index invalidIndex \u003d Index.fromOneBased(outOfBoundInteger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchCommand \u003d new FetchEventCommand(invalidIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(fetchCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand firstCommand \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand secondCommand \u003d new FetchEventCommand(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand firstCommandCopy \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 74,
      "DivineDX": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee expectedEmployee \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee expectedEmployeeMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedEmployeeMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee expectedEmployee \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new AddCommand(expectedEmployee));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, EmployeeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, EmployeePhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, EmployeeEmail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, EmployeeAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                EmployeeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 15,
      "calvincxz": 2,
      "DivineDX": 1,
      "-": 119,
      "shihaoyap": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AutoAllocateCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.allocate.AutoAllocateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.parser.allocate.AutoAllocateCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class AutoAllocateCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String TAG_MALE \u003d \" \" + PREFIX_TAG + \"male\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AutoAllocateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private AutoAllocateCommandParser parser \u003d new AutoAllocateCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.MANPOWER_COUNT_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // only tags specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, TAG_MALE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_MANPOWER_DESC, MESSAGE_INVALID_FORMAT); // invalid name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_MANPOWER_DESC + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.VALID_MANPOWER_COUNT_TO_ADD + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand expectedCommand \u003d new AutoAllocateCommand(targetIndex, null,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.MANPOWER_COUNT_DESC;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        AutoAllocateCommand expectedCommand \u003d new AutoAllocateCommand(targetIndex,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                Integer.valueOf(CommandTestUtil.VALID_MANPOWER_COUNT_TO_ADD), new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            System.out.println(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DisplayScheduleForDateParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForDateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.schedule.DisplayScheduleForDateParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventContainsKeyDatePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DisplayScheduleForDateParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayScheduleForDateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private DisplayScheduleForDateParser parser \u003d new DisplayScheduleForDateParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"2019/10/29\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_DATE_1, EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"20 Aug 2019\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_DATE_2, EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"date\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_DATE_3, EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"10/12\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_DATE_4, EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_validDateSpecified1_success() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate expectedStart \u003d ParserUtil.parseDate(\"20/10/2019\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        DisplayScheduleForDateCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                new DisplayScheduleForDateCommand(new EventContainsKeyDatePredicate(expectedStart.getDate()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseSuccess(parser, CommandTestUtil.VALID_DATE_1, expectedCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_validDateSpecified2_success() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate expectedStart \u003d ParserUtil.parseDate(\"10/10/2021\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        DisplayScheduleForDateCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                new DisplayScheduleForDateCommand(new EventContainsKeyDatePredicate(expectedStart.getDate()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseSuccess(parser, CommandTestUtil.VALID_DATE_2, expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DisplayScheduleForYearMonthParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.commands.schedule.DisplayScheduleForYearMonthCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.logic.parser.schedule.DisplayScheduleForYearMonthParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventContainsKeyYearMonthPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "public class DisplayScheduleForYearMonthParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayScheduleForYearMonthCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private DisplayScheduleForYearMonthParser parser \u003d new DisplayScheduleForYearMonthParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid Year Month format : Input - \"1/2019\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_YEAR_MONTH_1, EventDate.MESSAGE_CONSTRAINTS_MONTH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"2019/10\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_YEAR_MONTH_2, EventDate.MESSAGE_CONSTRAINTS_MONTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"2019 August\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_YEAR_MONTH_3, EventDate.MESSAGE_CONSTRAINTS_MONTH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        // invalid date format : Input - \"August 2019\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INVALID_YEAR_MONTH_4, EventDate.MESSAGE_CONSTRAINTS_MONTH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_validYearMonthSpecified1_success() throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        YearMonth expectedYearMonth \u003d ParserUtil.parseYearMonth(\"10/2019\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        DisplayScheduleForYearMonthCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                new DisplayScheduleForYearMonthCommand(new EventContainsKeyYearMonthPredicate(expectedYearMonth));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseSuccess(parser, CommandTestUtil.VALID_YEAR_MONTH_1, expectedCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parse_validYearMonthSpecified2_success() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        YearMonth expectedYearMonth \u003d ParserUtil.parseYearMonth(\"01/2019\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        DisplayScheduleForYearMonthCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                new DisplayScheduleForYearMonthCommand(new EventContainsKeyYearMonthPredicate(expectedYearMonth));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertParseSuccess(parser, CommandTestUtil.VALID_YEAR_MONTH_2, expectedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shihaoyap": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EmployeeAddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeAddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee employee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(employee));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(new AddCommand(employee), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee employee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder(employee).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 5,
      "calvincxz": 2,
      "DivineDX": 9,
      "-": 82,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDayTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private static final String INVALID_VENUE \u003d \"sTA@BUCKS\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeName expectedEmployeeName \u003d new EmployeeName(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeeName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeName expectedEmployeeName \u003d new EmployeeName(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeeName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeePhone expectedEmployeePhone \u003d new EmployeePhone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeePhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeePhone expectedEmployeePhone \u003d new EmployeePhone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeePhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeAddress expectedEmployeeAddress \u003d new EmployeeAddress(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeeAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeAddress expectedEmployeeAddress \u003d new EmployeeAddress(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeeAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeEmail expectedEmployeeEmail \u003d new EmployeeEmail(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeeEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        EmployeeEmail expectedEmployeeEmail \u003d new EmployeeEmail(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedEmployeeEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parseEventName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventName(INVALID_NAME));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void parseEventDateTimeMap() throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            -\u003e ParserUtil.parseEventDateTimeMap(\"20102019\")); //Only date, no time"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            -\u003e ParserUtil.parseEventDateTimeMap(\"20102019-1000-2000\")); //Wrong format, should have colon"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            -\u003e ParserUtil.parseEventDateTimeMap(\"30102019:1000-2000\")); //invalid date"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            -\u003e ParserUtil.parseEventDateTimeMap(\"20102019:5000-2000\")); //invalid time"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            -\u003e ParserUtil.parseEventDateTimeMap(\"20102019:1000-2000;20102019:1000-2000\")); //Wrong delimiter"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap testMap \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate dateOne \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime timeOne \u003d new EventDayTime(LocalTime.of(10, 0), LocalTime.of(20, 0));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        testMap.mapDateTime(dateOne, timeOne);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(ParserUtil.parseEventDateTimeMap(\"20/10/2019:1000-2000\"), testMap);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate dateTwo \u003d new EventDate(LocalDate.of(2019, 10, 21));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime timeTwo \u003d new EventDayTime(LocalTime.of(17, 0), LocalTime.of(21, 0));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        testMap.mapDateTime(dateTwo, timeTwo);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(ParserUtil.parseEventDateTimeMap(\"20/10/2019:1000-2000,21/10/2019:1700-2100\"), testMap);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsEventDate() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate dateTestOne \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"20/10/2019\"), dateTestOne);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate dateTestTwo \u003d new EventDate(LocalDate.of(2019, 10, 21));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"21/10/2019\"), dateTestTwo);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsEventDate() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate dateTestOne \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\"20/10/2019 \"), dateTestOne);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        EventDate dateTestTwo \u003d new EventDate(LocalDate.of(2019, 10, 21));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertEquals(ParserUtil.parseDate(\" 21/10/2019\"), dateTestTwo);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parseDate_invalidFormat() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        //Format is not in dd/MM/yyyy format"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"20102019\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"20191020\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"21 August 2019\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void parseDate_invalidValue() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"01/9/2019\"));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"1/10/2019\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"date\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 16,
      "DivineDX": 30,
      "-": 176,
      "shihaoyap": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/employee/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/employee/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, EmployeeName.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, EmployeePhone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, EmployeeEmail.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, EmployeeAddress.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, EmployeePhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, EmployeePhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Employee} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                EmployeeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 8,
      "DivineDX": 9,
      "-": 190,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/employee/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.logic.parser.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 2,
      "-": 31,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/event/FetchEventCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.logic.commands.event.FetchEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "class FetchEventCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyAddressBook initialData \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private ReadOnlyEventBook initialEventData \u003d SampleDataUtil.getSampleEventBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialEventData, new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToFetch \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchCommand \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expectedMessage \u003d String.format(FetchEventCommand.MESSAGE_SUCCESS, eventToFetch.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                model.getEventBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(fetchCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchCommand \u003d new FetchEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(fetchCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Event eventToFetch \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchCommand \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expectedMessage \u003d String.format(FetchEventCommand.MESSAGE_SUCCESS, eventToFetch.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EventBook(model.getEventBook()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandSuccess(fetchCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventBook().getEventList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchCommand \u003d new FetchEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertCommandFailure(fetchCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchFirstCommand \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchSecondCommand \u003d new FetchEventCommand(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(fetchFirstCommand.equals(fetchFirstCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        FetchEventCommand fetchFirstCommandCopy \u003d new FetchEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(fetchFirstCommand.equals(fetchFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(fetchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(fetchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(fetchFirstCommand.equals(fetchSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 95,
      "DivineDX": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/Employee/EmployeeJoinDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "class EmployeeJoinDateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void employeeJoinDateToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(new EmployeeJoinDate(LocalDate.of(2019, 10, 20)).toString(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                \"20/10/2019\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void employeeJoinDateEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(new EmployeeJoinDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new EmployeeJoinDate(LocalDate.of(2019, 10, 20)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertNotEquals(new EmployeeJoinDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new EmployeeJoinDate(LocalDate.of(2019, 10, 19))); //diff day"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertNotEquals(new EmployeeJoinDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new EmployeeJoinDate(LocalDate.of(2019, 9, 19))); //diff month"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertNotEquals(new EmployeeJoinDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new EmployeeJoinDate(LocalDate.of(2020, 10, 19))); //diff year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    void isValidJoinDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        //null event venue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EmployeeJoinDate.isValidJoinDate(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // invalid join date format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeJoinDate.isValidJoinDate(\"\")); // empty string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeJoinDate.isValidJoinDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeJoinDate.isValidJoinDate(\"2019/12/21\")); // invalid date format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeJoinDate.isValidJoinDate(\"12-02-2019\")); // invalid date format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeJoinDate.isValidJoinDate(\"12 Aug 2019\")); // invalid date format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // valid join date format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeJoinDate.isValidJoinDate(\"02/12/2019\")); // dd/MM/yyyy format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeJoinDate.isValidJoinDate(\"02/01/2018\")); // dd/MM/yyyy format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 52,
      "calvincxz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EmployeeAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeAddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getEmployeeList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // Two employees with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        List\u003cEmployee\u003e newEmployees \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newEmployees);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(DuplicateEmployeeException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasEmployee(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(addressBook.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        addressBook.addEmployee(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(addressBook.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        addressBook.addEmployee(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(addressBook.hasEmployee(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getEmployeeList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * A stub ReadOnlyAddressBook whose employees list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        private final ObservableList\u003cEmployee\u003e employees \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        AddressBookStub(Collection\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            this.employees.setAll(employees);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        public ObservableList\u003cEmployee\u003e getEmployeeList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            return employees;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 12,
      "DivineDX": 9,
      "-": 79,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEmployee(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(modelManager.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        modelManager.addEmployee(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(modelManager.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEmployeeList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        //EventBook eventBook \u003d new EventBookBuilder"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBook eventBook \u003d new EventBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBook differentEventBook \u003d new EventBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, eventBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, eventBook, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentEventBook, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String[] keywords \u003d ALICE.getEmployeeName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        modelManager.updateFilteredEmployeeList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, eventBook, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        modelManager.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, eventBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 8,
      "DivineDX": 7,
      "-": 118,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/distinctdate/DistinctDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "package seedu.address.model.distinctdate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "class DistinctDateTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventName name \u003d new EventName(\"Orchestra\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventVenue venue \u003d new EventVenue(\"Esplanade\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventManpowerNeeded manpowerNeeded \u003d new EventManpowerNeeded(\"10\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventDate startDate \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final EventDate endDate \u003d new EventDate(LocalDate.of(2019, 10, 25));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final Event eventTest \u003d new Event(name, venue,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "            manpowerNeeded, startDate, endDate, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final List\u003cEvent\u003e eventListTest \u003d new ArrayList\u003cEvent\u003e(Arrays.asList(eventTest));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDate dateTest \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    private final DistinctDate distinctDateTest \u003d new DistinctDate(dateTest, eventListTest);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    public void isSameDistinctDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        //same DistinctDate object --\u003e Return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertTrue(distinctDateTest.isSameDate(distinctDateTest));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate newEventDate \u003d new EventDate(LocalDate.of(2019, 10, 21));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        DistinctDate newDistinctDateTest \u003d new DistinctDate(newEventDate, eventListTest);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertFalse(distinctDateTest.isSameDate(newDistinctDateTest));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 4,
      "shihaoyap": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventDateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventDateToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(new EventDate(LocalDate.of(2019, 10, 20)).toString(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \"20/10/2019\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventStartDateEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDate(LocalDate.of(2019, 10, 20)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDate(LocalDate.of(2019, 10, 19))); //diff day"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDate(LocalDate.of(2019, 9, 19))); //diff month"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventDate(LocalDate.of(2019, 10, 20)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDate(LocalDate.of(2020, 10, 19))); //diff year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void isValidDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //null event date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventDate.isValidDate(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // invalid date format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2019/12/21\")); // invalid date format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"12-02-2019\")); // invalid date format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"12 Aug 2019\")); // invalid date format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // valid date format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"02/12/2019\")); // dd/MM/yyyy format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"02/01/2018\")); // dd/MM/yyyy format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDateTimeMapTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventDateTimeMapTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void mapDateTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap map \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate eventDate \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime eventDayTime \u003d new EventDayTime(LocalTime.of(10, 20), LocalTime.of(10, 30));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        map.mapDateTime(eventDate, eventDayTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(map.getDateTimeMap().containsKey(eventDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(map.getDateTimeMap().containsValue(eventDayTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void isSameEventDateTimeMap() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap map \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDateTimeMap map2 \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDate date \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime time \u003d new EventDayTime(LocalTime.of(10, 20), LocalTime.of(10, 30));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime time2 \u003d new EventDayTime(LocalTime.of(10, 20), LocalTime.of(10, 31));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        map.mapDateTime(date, time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        map2.mapDateTime(date, time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(map.equals(map2)); //same K-V values"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        map.mapDateTime(date, time2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(map.equals(map2)); //different K-V values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDayTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventDayTimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventDayTimeToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime edtTest \u003d new EventDayTime(LocalTime.of(10, 20), LocalTime.of(20, 30));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(edtTest.toString(), \"1020-2030\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventDayTime edtTest2 \u003d new EventDayTime(LocalTime.of(00, 03), LocalTime.of(02, 50));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(edtTest2.toString(), \"0003-0250\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void isValidEventDayTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //null event time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventDayTime.isValidTime(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //invalid time format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDayTime.isValidTime(\"1020\")); //single value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDayTime.isValidTime(\"10:20-12:30\")); //no colons"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDayTime.isValidTime(\"1020, 2030\")); //not seperated by commas"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventDayTime.isValidTime(\"1020-2530\")); //invalid time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //valid time format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventDayTime.isValidTime(\"1020-2030\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventDayTime.isValidTime(\"0020-0530\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventDayTimeEquals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(new EventDayTime(LocalTime.of(10, 20), LocalTime.of(10, 30)),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDayTime(LocalTime.of(10, 20), LocalTime.of(10, 30)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventDayTime(LocalTime.of(10, 30), LocalTime.of(10, 40)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDayTime(LocalTime.of(10, 30), LocalTime.of(10, 45)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventManpowerAllocatedListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventManpowerAllocatedListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventManpowerAllocatedListEquals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        EventManpowerAllocatedList allocatedListA \u003d new EventManpowerAllocatedList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerAllocatedList allocatedListB \u003d new EventManpowerAllocatedList(\"001\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventManpowerAllocatedList allocatedListC \u003d new EventManpowerAllocatedList(\"    \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(allocatedListA, allocatedListB);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertEquals(allocatedListA, allocatedListC);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 4,
      "DivineDX": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventManpowerNeededTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventManpowerNeededTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void isValidEventManpowerNeeded() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // invalid Event Manpower Needed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventManpowerNeeded.isValidEventManpowerNeeded(\"50 people\")); // Invalid input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventManpowerNeeded.isValidEventManpowerNeeded(\"50000\")); // exceed limit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventManpowerNeeded.isValidEventManpowerNeeded(\"1000\")); // exceed limit"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // valid Event Manpower Needed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventManpowerNeeded.isValidEventManpowerNeeded(\"000\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventManpowerNeeded.isValidEventManpowerNeeded(\"005\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventManpowerNeeded.isValidEventManpowerNeeded(\"035\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventManpowerNeeded.isValidEventManpowerNeeded(\"999\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventManpowerNeededEquals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventManpowerNeeded(\"20\"), new EventManpowerNeeded(\"21\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(new EventManpowerNeeded(\"50\"), new EventManpowerNeeded(\"50\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void constructor_invalidEventName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String invalidEventName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidEventName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //null event name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventName.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventName.isValidName(\"music concert\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventName.isValidName(\"2nd coming\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventName.isValidName(\"Graduation Ceremony\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventName.isValidName(\"CS2103T Practical Exam for AY1920 Semester 1\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventNameEquals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(new EventName(\"niceevent\"), new EventName(\"niceevent\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventName(\"niceevent\"), new EventName(\"niceEvent\")); //Different casing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventName(\"Nice Event   \"), new EventName(\"Nice Event \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventName name \u003d new EventName(\"Orchestra\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventVenue venue \u003d new EventVenue(\"Esplanade\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventManpowerNeeded manpowerNeeded \u003d new EventManpowerNeeded(\"10\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDate startDate \u003d new EventDate(LocalDate.of(2019, 10, 20));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final EventDate endDate \u003d new EventDate(LocalDate.of(2019, 10, 25));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final Event eventTest \u003d new Event(name, venue,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            manpowerNeeded, startDate, endDate, tags);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //same object --\u003e Return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(eventTest.isSameEvent(eventTest));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Event newEventTest \u003d new Event(name, venue, manpowerNeeded,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                new EventDate(LocalDate.of(2019, 10, 21)), endDate, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(eventTest.isSameEvent(newEventTest));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventVenueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "class EventVenueTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventVenue(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void constructor_invalidEventName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String invalidEventVenue \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventVenue(invalidEventVenue));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void isValidVenue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        //null event venue"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventVenue.isValidVenue(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // invalid event venue"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventVenue.isValidVenue(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(EventVenue.isValidVenue(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        // valid event venue"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventVenue.isValidVenue(\"kent ridge\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventVenue.isValidVenue(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventVenue.isValidVenue(\"PlaCe\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventVenue.isValidVenue(\"NUS @ Kent Ridge\")); // alphanumeric with symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(EventVenue.isValidVenue(\"PARLIAMENT\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void eventVenueEquals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(new EventVenue(\"niceVenue\"), new EventVenue(\"niceVenue\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventVenue(\"niceVenue\"), new EventVenue(\"nicevenue\")); //Different casing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertNotEquals(new EventVenue(\"Nice Venue   \"), new EventVenue(\"Nice Venue \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmployeeAddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeAddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EmployeeAddress(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EmployeeAddress(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EmployeeAddress.isValidAddress(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeAddress.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeAddress.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeAddress.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeAddress.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertTrue(EmployeeAddress.isValidAddress(\"Leng Inc; \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                + \"1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 35,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmployeeEmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeEmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EmployeeEmail(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EmployeeEmail(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EmployeeEmail.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeEmail.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeEmail.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 61,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmployeeNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "-": 73,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmployeeNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EmployeeName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EmployeeName(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EmployeeName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeeName.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeName.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeName.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeName.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeeName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 40,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmployeePhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeePhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EmployeePhone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EmployeePhone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EmployeePhone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeePhone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeePhone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeePhone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeePhone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeePhone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(EmployeePhone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeePhone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeePhone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(EmployeePhone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 40,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmployeeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class EmployeeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee employee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e employee.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(ALICE.isSameEmployee(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertFalse(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 7,
      "calvincxz": 1,
      "DivineDX": 6,
      "-": 81,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueEmployeeListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class UniqueEmployeeListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private final UniqueEmployeeList uniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertFalse(uniqueEmployeeList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(uniqueEmployeeList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertTrue(uniqueEmployeeList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(DuplicateEmployeeException.class, () -\u003e uniqueEmployeeList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployee(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployee(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(EmployeeNotFoundException.class, () -\u003e uniqueEmployeeList.setEmployee(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        expectedUniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        Employee editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        expectedUniqueEmployeeList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        expectedUniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(DuplicateEmployeeException.class, () -\u003e uniqueEmployeeList.setEmployee(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(EmployeeNotFoundException.class, () -\u003e uniqueEmployeeList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployees((UniqueEmployeeList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        expectedUniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        uniqueEmployeeList.setEmployees(expectedUniqueEmployeeList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployees((List\u003cEmployee\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        List\u003cEmployee\u003e employeeList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        uniqueEmployeeList.setEmployees(employeeList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        expectedUniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        List\u003cEmployee\u003e listWithDuplicateEmployees \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        assertThrows(DuplicateEmployeeException.class, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                uniqueEmployeeList.setEmployees(listWithDuplicateEmployees));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Crisgu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "            -\u003e uniqueEmployeeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 156,
      "DivineDX": 11,
      "shihaoyap": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEmployeeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedEmployee.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "public class JsonAdaptedEmployeeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getEmployeeName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getEmployeePhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmployeeEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getEmployeeAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new JsonAdaptedEmployee(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d EmployeeName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EmployeeName.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d EmployeePhone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EmployeePhone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d EmployeeEmail.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EmployeeEmail.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d EmployeeAddress.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EmployeeAddress.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        JsonAdaptedEmployee person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 29,
      "-": 77,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        original.addEmployee(HOON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        original.removeEmployee(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        original.addEmployee(IDA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 3,
      "DivineDX": 3,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    //private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    //private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 9,
      "-": 35,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.ReadOnlyEventBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        JsonEventBookStorage eventBookStorage \u003d new JsonEventBookStorage(getTempFilePath(\"eb\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * {@link JsonEmployeeAddressBookStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        //ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        //assertEquals(original.toString(), new AddressBook(retrieved).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void eventBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "         * {@link JsonEmployeeAddressBookStorageTest} class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBook original \u003d getTypicalEventBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        storageManager.saveEventBook(original);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        ReadOnlyEventBook retrieved \u003d storageManager.readEventBook().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertEquals(original.toString(), new EventBook(retrieved).toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public void getEventBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        assertNotNull(storageManager.getEventBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 23,
      "-": 64,
      "shihaoyap": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Adds a new {@code Employee} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public AddressBookBuilder withPerson(Employee employee) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        addressBook.addEmployee(employee);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 2,
      "calvincxz": 1,
      "-": 30,
      "shihaoyap": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private EditEmployeeDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EditPersonDescriptorBuilder(EditEmployeeDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.descriptor \u003d new EditEmployeeDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code employee}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public EditPersonDescriptorBuilder(Employee employee) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeeName(employee.getEmployeeName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeePhone(employee.getEmployeePhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeeEmail(employee.getEmployeeEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeeAddress(employee.getEmployeeAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setTags(employee.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeName} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeeName(new EmployeeName(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeePhone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeePhone(new EmployeePhone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeEmail} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeeEmail(new EmployeeEmail(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeAddress} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.setEmployeeAddress(new EmployeeAddress(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EditEmployeeDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 15,
      "DivineDX": 7,
      "-": 60,
      "shihaoyap": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.model.event.EventDateTimeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerAllocatedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventManpowerNeeded;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " *  A utility class to help with building Event objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Party\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"11/11/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private EventName name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private EventDate startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private EventDate endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private EventVenue venue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private EventManpowerNeeded manpowerNeeded;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private EventManpowerAllocatedList manpowerAllocatedList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private EventDateTimeMap eventDateTimeMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        name \u003d new EventName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        startDate \u003d new EventDate(LocalDate.parse(DEFAULT_DATE, FORMATTER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        endDate \u003d new EventDate(LocalDate.parse(DEFAULT_DATE, FORMATTER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        venue \u003d new EventVenue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        manpowerNeeded \u003d new EventManpowerNeeded(\"5\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        manpowerAllocatedList \u003d new EventManpowerAllocatedList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        eventDateTimeMap \u003d new EventDateTimeMap();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*public EventBuilder(Event personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        name \u003d personToCopy.getEmployeeName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        phone \u003d personToCopy.getEmployeePhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        email \u003d personToCopy.getEmployeeEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        address \u003d personToCopy.getEmployeeAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeName} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.name \u003d new EmployeeName(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.address \u003d new EmployeeAddress(address);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.phone \u003d new EmployeePhone(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.email \u003d new EmployeeEmail(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return new Event(name, venue, manpowerNeeded, startDate, endDate, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 9,
      "calvincxz": 70,
      "DivineDX": 10,
      "shihaoyap": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeGender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeJoinDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeeName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePhone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.EmployeePosition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * A utility class to help with building Employee objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private EmployeeName employeeName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private EmployeePhone employeePhone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private EmployeeEmail employeeEmail;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    private EmployeeAddress employeeAddress;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeeName \u003d new EmployeeName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeePhone \u003d new EmployeePhone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeeEmail \u003d new EmployeeEmail(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeeAddress \u003d new EmployeeAddress(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code employeeToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public PersonBuilder(Employee employeeToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeeName \u003d employeeToCopy.getEmployeeName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeePhone \u003d employeeToCopy.getEmployeePhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeeEmail \u003d employeeToCopy.getEmployeeEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employeeAddress \u003d employeeToCopy.getEmployeeAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(employeeToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeName} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employeeName \u003d new EmployeeName(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Employee} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeAddress} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employeeAddress \u003d new EmployeeAddress(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeePhone} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employeePhone \u003d new EmployeePhone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Sets the {@code EmployeeEmail} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        this.employeeEmail \u003d new EmployeeEmail(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * creates an draft Employee Objects and returns it"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     * @return Employee Object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public Employee build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new Employee(new EmployeeId(\"000\"), employeeName, new EmployeeGender(\"male\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "                new EmployeePosition(\"manager\"), employeePhone, employeeEmail, employeeAddress,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                new EmployeeJoinDate(LocalDate.parse(\"11/12/2011\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))), tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 26,
      "calvincxz": 6,
      "-": 60,
      "shihaoyap": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import seedu.address.logic.commands.employee.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * A utility class for Employee."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns an add command string for adding the {@code employee}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static String getAddCommand(Employee employee) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(employee);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns the part of command string for the given {@code employee}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static String getPersonDetails(Employee employee) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        sb.append(PREFIX_NAME + employee.getEmployeeName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        sb.append(PREFIX_PHONE + employee.getEmployeePhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        sb.append(PREFIX_EMAIL + employee.getEmployeeEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        sb.append(PREFIX_ADDRESS + employee.getEmployeeAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        employee.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCommand.EditEmployeeDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.getEmployeeName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.getEmployeePhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        descriptor.getEmployeeEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "        descriptor.getEmployeeAddress().ifPresent(address -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "                sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 14,
      "DivineDX": 3,
      "-": 43,
      "shihaoyap": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns the middle index of the employee in the {@code model}\u0027s employee list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEmployeeList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns the last index of the employee in the {@code model}\u0027s employee list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "     * Returns the employee in the {@code model}\u0027s employee list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static Employee getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return model.getFilteredEmployeeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 4,
      "DivineDX": 3,
      "-": 47,
      "shihaoyap": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.EventBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * A utility class containing a list of {@code Employee} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /*public static final Event AAA \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            .withTags(\"friends\").build();*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final Event A \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static EventBook getTypicalEventBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        EventBook eb \u003d new EventBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        for (Event event : getTypicalEvent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "            eb.addEvent(event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calvincxz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvent() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 1,
      "calvincxz": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calvincxz"
        },
        "content": "    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calvincxz": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shihaoyap"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Crisgu"
        },
        "content": " * A utility class containing a list of {@code Employee} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    // Manually added - Employee\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static final Employee BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "        for (Employee employee : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            ab.addEmployee(employee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Crisgu"
        },
        "content": "    public static List\u003cEmployee\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Crisgu": 15,
      "DivineDX": 1,
      "-": 59,
      "shihaoyap": 1
    }
  },
  {
    "path": "testTravis.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Travis is running!"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 1
    }
  }
]
